   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LFB110:
  14               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  19:quantum/quantum.c **** #include "outputselect.h"
  20:quantum/quantum.c **** #endif
  21:quantum/quantum.c **** 
  22:quantum/quantum.c **** #ifndef TAPPING_TERM
  23:quantum/quantum.c **** #define TAPPING_TERM 200
  24:quantum/quantum.c **** #endif
  25:quantum/quantum.c **** 
  26:quantum/quantum.c **** #include "backlight.h"
  27:quantum/quantum.c **** extern backlight_config_t backlight_config;
  28:quantum/quantum.c **** 
  29:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  30:quantum/quantum.c **** #include "fauxclicky.h"
  31:quantum/quantum.c **** #endif
  32:quantum/quantum.c **** 
  33:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  34:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  35:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  36:quantum/quantum.c ****   #endif
  37:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  38:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  39:quantum/quantum.c ****   #endif
  40:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  41:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  42:quantum/quantum.c ****   #endif
  43:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  44:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  45:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  46:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  47:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  48:quantum/quantum.c ****   #endif
  49:quantum/quantum.c **** #endif
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  15               		.loc 1 51 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
  38 0008 8C01      		movw r16,r24
  39 000a EB01      		movw r28,r22
  52:quantum/quantum.c ****   switch (code) {
  40               		.loc 1 52 0
  41 000c 9A95      		dec r25
  42               	.LVL1:
  43 000e 8115      		cp r24,__zero_reg__
  44 0010 9F41      		sbci r25,31
  45 0012 00F4      		brsh .L1
  53:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  54:quantum/quantum.c ****     break;
  55:quantum/quantum.c ****   default:
  56:quantum/quantum.c ****     return;
  57:quantum/quantum.c ****   }
  58:quantum/quantum.c **** 
  59:quantum/quantum.c ****   if (code & QK_LCTL)
  46               		.loc 1 59 0
  47 0014 10FF      		sbrs r17,0
  48 0016 00C0      		rjmp .L4
  60:quantum/quantum.c ****     f(KC_LCTL);
  49               		.loc 1 60 0
  50 0018 80EE      		ldi r24,lo8(-32)
  51 001a FB01      		movw r30,r22
  52 001c 0995      		icall
  53               	.LVL2:
  54               	.L4:
  61:quantum/quantum.c ****   if (code & QK_LSFT)
  55               		.loc 1 61 0
  56 001e 11FF      		sbrs r17,1
  57 0020 00C0      		rjmp .L5
  62:quantum/quantum.c ****     f(KC_LSFT);
  58               		.loc 1 62 0
  59 0022 81EE      		ldi r24,lo8(-31)
  60 0024 FE01      		movw r30,r28
  61 0026 0995      		icall
  62               	.LVL3:
  63               	.L5:
  63:quantum/quantum.c ****   if (code & QK_LALT)
  64               		.loc 1 63 0
  65 0028 12FF      		sbrs r17,2
  66 002a 00C0      		rjmp .L6
  64:quantum/quantum.c ****     f(KC_LALT);
  67               		.loc 1 64 0
  68 002c 82EE      		ldi r24,lo8(-30)
  69 002e FE01      		movw r30,r28
  70 0030 0995      		icall
  71               	.LVL4:
  72               	.L6:
  65:quantum/quantum.c ****   if (code & QK_LGUI)
  73               		.loc 1 65 0
  74 0032 13FF      		sbrs r17,3
  75 0034 00C0      		rjmp .L7
  66:quantum/quantum.c ****     f(KC_LGUI);
  76               		.loc 1 66 0
  77 0036 83EE      		ldi r24,lo8(-29)
  78 0038 FE01      		movw r30,r28
  79 003a 0995      		icall
  80               	.LVL5:
  81               	.L7:
  67:quantum/quantum.c **** 
  68:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  82               		.loc 1 68 0
  83 003c 0115      		cp r16,__zero_reg__
  84 003e 1041      		sbci r17,16
  85 0040 00F4      		brsh .L21
  86               	.L1:
  87               	/* epilogue start */
  69:quantum/quantum.c **** 
  70:quantum/quantum.c ****   if (code & QK_RCTL)
  71:quantum/quantum.c ****     f(KC_RCTL);
  72:quantum/quantum.c ****   if (code & QK_RSFT)
  73:quantum/quantum.c ****     f(KC_RSFT);
  74:quantum/quantum.c ****   if (code & QK_RALT)
  75:quantum/quantum.c ****     f(KC_RALT);
  76:quantum/quantum.c ****   if (code & QK_RGUI)
  77:quantum/quantum.c ****     f(KC_RGUI);
  78:quantum/quantum.c **** }
  88               		.loc 1 78 0
  89 0042 DF91      		pop r29
  90 0044 CF91      		pop r28
  91               	.LVL6:
  92 0046 1F91      		pop r17
  93 0048 0F91      		pop r16
  94               	.LVL7:
  95 004a 0895      		ret
  96               	.LVL8:
  97               	.L21:
  71:quantum/quantum.c ****   if (code & QK_RSFT)
  98               		.loc 1 71 0
  99 004c 84EE      		ldi r24,lo8(-28)
 100 004e FE01      		movw r30,r28
 101 0050 0995      		icall
 102               	.LVL9:
  73:quantum/quantum.c ****   if (code & QK_RALT)
 103               		.loc 1 73 0
 104 0052 85EE      		ldi r24,lo8(-27)
 105 0054 FE01      		movw r30,r28
 106 0056 0995      		icall
 107               	.LVL10:
  75:quantum/quantum.c ****   if (code & QK_RGUI)
 108               		.loc 1 75 0
 109 0058 86EE      		ldi r24,lo8(-26)
 110 005a FE01      		movw r30,r28
 111 005c 0995      		icall
 112               	.LVL11:
  77:quantum/quantum.c **** }
 113               		.loc 1 77 0
 114 005e 87EE      		ldi r24,lo8(-25)
 115 0060 FE01      		movw r30,r28
 116               	/* epilogue start */
 117               		.loc 1 78 0
 118 0062 DF91      		pop r29
 119 0064 CF91      		pop r28
 120               	.LVL12:
 121 0066 1F91      		pop r17
 122 0068 0F91      		pop r16
 123               	.LVL13:
  77:quantum/quantum.c **** }
 124               		.loc 1 77 0
 125 006a 0994      		ijmp
 126               	.LVL14:
 127               		.cfi_endproc
 128               	.LFE110:
 130               		.section	.text.qk_register_weak_mods,"ax",@progbits
 132               	qk_register_weak_mods:
 133               	.LFB111:
  79:quantum/quantum.c **** 
  80:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 134               		.loc 1 80 0
 135               		.cfi_startproc
 136               	.LVL15:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  81:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 141               		.loc 1 81 0
 142 0000 8770      		andi r24,lo8(7)
 143               	.LVL16:
 144 0002 91E0      		ldi r25,lo8(1)
 145 0004 00C0      		rjmp 2f
 146               		1:
 147 0006 990F      		lsl r25
 148               		2:
 149 0008 8A95      		dec r24
 150 000a 02F4      		brpl 1b
 151 000c 892F      		mov r24,r25
 152 000e 0E94 0000 		call add_weak_mods
 153               	.LVL17:
  82:quantum/quantum.c ****     send_keyboard_report();
 154               		.loc 1 82 0
 155 0012 0C94 0000 		jmp send_keyboard_report
 156               	.LVL18:
 157               		.cfi_endproc
 158               	.LFE111:
 160               		.section	.text.qk_register_mods,"ax",@progbits
 162               	qk_register_mods:
 163               	.LFB155:
 164               		.cfi_startproc
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 0 */
 168               	.L__stack_usage = 0
 169 0000 0C94 0000 		jmp qk_register_weak_mods
 170               		.cfi_endproc
 171               	.LFE155:
 173               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 175               	qk_unregister_weak_mods:
 176               	.LFB112:
  83:quantum/quantum.c **** }
  84:quantum/quantum.c **** 
  85:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 177               		.loc 1 85 0
 178               		.cfi_startproc
 179               	.LVL19:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
  86:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 184               		.loc 1 86 0
 185 0000 8770      		andi r24,lo8(7)
 186               	.LVL20:
 187 0002 91E0      		ldi r25,lo8(1)
 188 0004 00C0      		rjmp 2f
 189               		1:
 190 0006 990F      		lsl r25
 191               		2:
 192 0008 8A95      		dec r24
 193 000a 02F4      		brpl 1b
 194 000c 892F      		mov r24,r25
 195 000e 0E94 0000 		call del_weak_mods
 196               	.LVL21:
  87:quantum/quantum.c ****     send_keyboard_report();
 197               		.loc 1 87 0
 198 0012 0C94 0000 		jmp send_keyboard_report
 199               	.LVL22:
 200               		.cfi_endproc
 201               	.LFE112:
 203               		.section	.text.qk_unregister_mods,"ax",@progbits
 205               	qk_unregister_mods:
 206               	.LFB157:
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212 0000 0C94 0000 		jmp qk_unregister_weak_mods
 213               		.cfi_endproc
 214               	.LFE157:
 216               		.section	.text.register_code16,"ax",@progbits
 217               	.global	register_code16
 219               	register_code16:
 220               	.LFB115:
  88:quantum/quantum.c **** }
  89:quantum/quantum.c **** 
  90:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
  91:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
  92:quantum/quantum.c ****     send_keyboard_report();
  93:quantum/quantum.c **** }
  94:quantum/quantum.c **** 
  95:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
  96:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
  97:quantum/quantum.c ****     send_keyboard_report();
  98:quantum/quantum.c **** }
  99:quantum/quantum.c **** 
 100:quantum/quantum.c **** void register_code16 (uint16_t code) {
 221               		.loc 1 100 0
 222               		.cfi_startproc
 223               	.LVL23:
 224               		.loc 1 100 0
 225 0000 CF93      		push r28
 226               	.LCFI4:
 227               		.cfi_def_cfa_offset 3
 228               		.cfi_offset 28, -2
 229 0002 DF93      		push r29
 230               	.LCFI5:
 231               		.cfi_def_cfa_offset 4
 232               		.cfi_offset 29, -3
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 2 */
 236               	.L__stack_usage = 2
 237 0004 EC01      		movw r28,r24
 101:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 238               		.loc 1 101 0
 239 0006 805E      		subi r24,-32
 240 0008 9109      		sbc r25,__zero_reg__
 241               	.LVL24:
 242 000a 0897      		sbiw r24,8
 243 000c 00F0      		brlo .L27
 102:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 103:quantum/quantum.c ****   } else {
 104:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 244               		.loc 1 104 0 discriminator 1
 245 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 246 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 101:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 247               		.loc 1 101 0 discriminator 1
 248 0012 2097      		sbiw r28,0
 249 0014 01F4      		brne .L30
 250               	.L27:
 102:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 251               		.loc 1 102 0
 252 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 253 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 254               	.L30:
 255               		.loc 1 104 0
 256 001a CE01      		movw r24,r28
 257 001c 0E94 0000 		call do_code16
 258               	.LVL25:
 105:quantum/quantum.c ****   }
 106:quantum/quantum.c ****   register_code (code);
 259               		.loc 1 106 0
 260 0020 8C2F      		mov r24,r28
 261               	/* epilogue start */
 107:quantum/quantum.c **** }
 262               		.loc 1 107 0
 263 0022 DF91      		pop r29
 264 0024 CF91      		pop r28
 265               	.LVL26:
 106:quantum/quantum.c **** }
 266               		.loc 1 106 0
 267 0026 0C94 0000 		jmp register_code
 268               	.LVL27:
 269               		.cfi_endproc
 270               	.LFE115:
 272               		.section	.text.unregister_code16,"ax",@progbits
 273               	.global	unregister_code16
 275               	unregister_code16:
 276               	.LFB116:
 108:quantum/quantum.c **** 
 109:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 277               		.loc 1 109 0
 278               		.cfi_startproc
 279               	.LVL28:
 280 0000 CF93      		push r28
 281               	.LCFI6:
 282               		.cfi_def_cfa_offset 3
 283               		.cfi_offset 28, -2
 284 0002 DF93      		push r29
 285               	.LCFI7:
 286               		.cfi_def_cfa_offset 4
 287               		.cfi_offset 29, -3
 288               	/* prologue: function */
 289               	/* frame size = 0 */
 290               	/* stack size = 2 */
 291               	.L__stack_usage = 2
 292 0004 EC01      		movw r28,r24
 110:quantum/quantum.c ****   unregister_code (code);
 293               		.loc 1 110 0
 294 0006 0E94 0000 		call unregister_code
 295               	.LVL29:
 111:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 296               		.loc 1 111 0
 297 000a CE01      		movw r24,r28
 298 000c 805E      		subi r24,-32
 299 000e 9109      		sbc r25,__zero_reg__
 300 0010 0897      		sbiw r24,8
 301 0012 00F0      		brlo .L32
 112:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 113:quantum/quantum.c ****   } else {
 114:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 302               		.loc 1 114 0 discriminator 1
 303 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 304 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 111:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 305               		.loc 1 111 0 discriminator 1
 306 0018 2097      		sbiw r28,0
 307 001a 01F4      		brne .L34
 308               	.L32:
 112:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 309               		.loc 1 112 0
 310 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 311 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 312               	.L34:
 313               		.loc 1 114 0
 314 0020 CE01      		movw r24,r28
 315               	/* epilogue start */
 115:quantum/quantum.c ****   }
 116:quantum/quantum.c **** }
 316               		.loc 1 116 0
 317 0022 DF91      		pop r29
 318 0024 CF91      		pop r28
 319               	.LVL30:
 114:quantum/quantum.c ****   }
 320               		.loc 1 114 0
 321 0026 0C94 0000 		jmp do_code16
 322               	.LVL31:
 323               		.cfi_endproc
 324               	.LFE116:
 326               		.section	.text.process_action_kb,"ax",@progbits
 327               		.weak	process_action_kb
 329               	process_action_kb:
 330               	.LFB117:
 117:quantum/quantum.c **** 
 118:quantum/quantum.c **** __attribute__ ((weak))
 119:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 331               		.loc 1 119 0
 332               		.cfi_startproc
 333               	.LVL32:
 334               	/* prologue: function */
 335               	/* frame size = 0 */
 336               	/* stack size = 0 */
 337               	.L__stack_usage = 0
 120:quantum/quantum.c ****   return true;
 121:quantum/quantum.c **** }
 338               		.loc 1 121 0
 339 0000 81E0      		ldi r24,lo8(1)
 340               	.LVL33:
 341               	/* epilogue start */
 342 0002 0895      		ret
 343               		.cfi_endproc
 344               	.LFE117:
 346               		.section	.text.process_record_user,"ax",@progbits
 347               		.weak	process_record_user
 349               	process_record_user:
 350               	.LFB119:
 122:quantum/quantum.c **** 
 123:quantum/quantum.c **** __attribute__ ((weak))
 124:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 125:quantum/quantum.c ****   return process_record_user(keycode, record);
 126:quantum/quantum.c **** }
 127:quantum/quantum.c **** 
 128:quantum/quantum.c **** __attribute__ ((weak))
 129:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 351               		.loc 1 129 0
 352               		.cfi_startproc
 353               	.LVL34:
 354               	/* prologue: function */
 355               	/* frame size = 0 */
 356               	/* stack size = 0 */
 357               	.L__stack_usage = 0
 130:quantum/quantum.c ****   return true;
 131:quantum/quantum.c **** }
 358               		.loc 1 131 0
 359 0000 81E0      		ldi r24,lo8(1)
 360               	.LVL35:
 361               	/* epilogue start */
 362 0002 0895      		ret
 363               		.cfi_endproc
 364               	.LFE119:
 366               		.section	.text.process_record_kb,"ax",@progbits
 367               		.weak	process_record_kb
 369               	process_record_kb:
 370               	.LFB118:
 124:quantum/quantum.c ****   return process_record_user(keycode, record);
 371               		.loc 1 124 0
 372               		.cfi_startproc
 373               	.LVL36:
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 125:quantum/quantum.c **** }
 378               		.loc 1 125 0
 379 0000 0C94 0000 		jmp process_record_user
 380               	.LVL37:
 381               		.cfi_endproc
 382               	.LFE118:
 384               		.section	.text.reset_keyboard,"ax",@progbits
 385               	.global	reset_keyboard
 387               	reset_keyboard:
 388               	.LFB120:
 132:quantum/quantum.c **** 
 133:quantum/quantum.c **** void reset_keyboard(void) {
 389               		.loc 1 133 0
 390               		.cfi_startproc
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
 134:quantum/quantum.c ****   clear_keyboard();
 395               		.loc 1 134 0
 396 0000 0E94 0000 		call clear_keyboard
 397               	.LVL38:
 398               	.LBB22:
 399               	.LBB23:
 400               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 401               		.loc 2 187 0
 402 0004 2FEF      		ldi r18,lo8(799999)
 403 0006 84E3      		ldi r24,hi8(799999)
 404 0008 9CE0      		ldi r25,hlo8(799999)
 405 000a 2150      	1:	subi r18,1
 406 000c 8040      		sbci r24,0
 407 000e 9040      		sbci r25,0
 408 0010 01F4      		brne 1b
 409 0012 00C0      		rjmp .
 410 0014 0000      		nop
 411               	.LVL39:
 412               	.LBE23:
 413               	.LBE22:
 135:quantum/quantum.c **** #if defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_ENABLE_BASIC))
 136:quantum/quantum.c ****   music_all_notes_off();
 137:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 138:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 139:quantum/quantum.c ****   shutdown_user();
 140:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250) 
 141:quantum/quantum.c ****     wait_ms(1);
 142:quantum/quantum.c ****   stop_all_notes();
 143:quantum/quantum.c **** #else
 144:quantum/quantum.c ****   wait_ms(250);
 145:quantum/quantum.c **** #endif
 146:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 147:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 148:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 149:quantum/quantum.c **** #endif
 150:quantum/quantum.c ****   bootloader_jump();
 414               		.loc 1 150 0
 415 0016 0C94 0000 		jmp bootloader_jump
 416               	.LVL40:
 417               		.cfi_endproc
 418               	.LFE120:
 420               		.section	.text.process_record_quantum,"ax",@progbits
 421               	.global	process_record_quantum
 423               	process_record_quantum:
 424               	.LFB121:
 151:quantum/quantum.c **** }
 152:quantum/quantum.c **** 
 153:quantum/quantum.c **** // Shift / paren setup
 154:quantum/quantum.c **** 
 155:quantum/quantum.c **** #ifndef LSPO_KEY
 156:quantum/quantum.c ****   #define LSPO_KEY KC_9
 157:quantum/quantum.c **** #endif
 158:quantum/quantum.c **** #ifndef RSPC_KEY
 159:quantum/quantum.c ****   #define RSPC_KEY KC_0
 160:quantum/quantum.c **** #endif
 161:quantum/quantum.c **** 
 162:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 163:quantum/quantum.c **** static uint16_t scs_timer[2] = {0, 0};
 164:quantum/quantum.c **** 
 165:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 166:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 167:quantum/quantum.c ****  */
 168:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 169:quantum/quantum.c **** 
 170:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 425               		.loc 1 170 0
 426               		.cfi_startproc
 427               	.LVL41:
 428 0000 FF92      		push r15
 429               	.LCFI8:
 430               		.cfi_def_cfa_offset 3
 431               		.cfi_offset 15, -2
 432 0002 0F93      		push r16
 433               	.LCFI9:
 434               		.cfi_def_cfa_offset 4
 435               		.cfi_offset 16, -3
 436 0004 1F93      		push r17
 437               	.LCFI10:
 438               		.cfi_def_cfa_offset 5
 439               		.cfi_offset 17, -4
 440 0006 CF93      		push r28
 441               	.LCFI11:
 442               		.cfi_def_cfa_offset 6
 443               		.cfi_offset 28, -5
 444 0008 DF93      		push r29
 445               	.LCFI12:
 446               		.cfi_def_cfa_offset 7
 447               		.cfi_offset 29, -6
 448               	/* prologue: function */
 449               	/* frame size = 0 */
 450               	/* stack size = 5 */
 451               	.L__stack_usage = 5
 452 000a 8C01      		movw r16,r24
 171:quantum/quantum.c **** 
 172:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 173:quantum/quantum.c ****   keypos_t key = record->event.key;
 453               		.loc 1 173 0
 454 000c FC01      		movw r30,r24
 455 000e C081      		ld r28,Z
 456 0010 D181      		ldd r29,Z+1
 457               	.LVL42:
 174:quantum/quantum.c ****   uint16_t keycode;
 175:quantum/quantum.c **** 
 176:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 177:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 178:quantum/quantum.c ****     if (!disable_action_cache) {
 458               		.loc 1 178 0
 459 0012 8091 0000 		lds r24,disable_action_cache
 460               	.LVL43:
 461 0016 8111      		cpse r24,__zero_reg__
 462 0018 00C0      		rjmp .L40
 463               	.LBB24:
 179:quantum/quantum.c ****       uint8_t layer;
 180:quantum/quantum.c **** 
 181:quantum/quantum.c ****       if (record->event.pressed) {
 464               		.loc 1 181 0
 465 001a 8281      		ldd r24,Z+2
 466 001c 8823      		tst r24
 467 001e 01F4      		brne .+2
 468 0020 00C0      		rjmp .L41
 469               	.LVL44:
 182:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 470               		.loc 1 182 0
 471 0022 CE01      		movw r24,r28
 472 0024 0E94 0000 		call layer_switch_get_layer
 473               	.LVL45:
 474 0028 F82E      		mov r15,r24
 475               	.LVL46:
 183:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 476               		.loc 1 183 0
 477 002a 682F      		mov r22,r24
 478 002c CE01      		movw r24,r28
 479 002e 0E94 0000 		call update_source_layers_cache
 480               	.LVL47:
 481               	.L42:
 184:quantum/quantum.c ****       } else {
 185:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 186:quantum/quantum.c ****       }
 187:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 482               		.loc 1 187 0
 483 0032 BE01      		movw r22,r28
 484 0034 8F2D      		mov r24,r15
 485               	.LVL48:
 486               	.L120:
 487               	.LBE24:
 188:quantum/quantum.c ****     } else
 189:quantum/quantum.c ****   #endif
 190:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 488               		.loc 1 190 0
 489 0036 0E94 0000 		call keymap_key_to_keycode
 490               	.LVL49:
 491 003a EC01      		movw r28,r24
 492               	.LVL50:
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****     // This is how you use actions here
 193:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 194:quantum/quantum.c ****     //   action_t action;
 195:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 196:quantum/quantum.c ****     //   process_action(record, action);
 197:quantum/quantum.c ****     //   return false;
 198:quantum/quantum.c ****     // }
 199:quantum/quantum.c **** 
 200:quantum/quantum.c ****   if (!(
 201:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 202:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 203:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 204:quantum/quantum.c ****   #endif
 205:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 493               		.loc 1 205 0
 494 003c B801      		movw r22,r16
 495 003e 0E94 0000 		call process_record_kb
 496               	.LVL51:
 206:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 207:quantum/quantum.c ****     process_midi(keycode, record) &&
 208:quantum/quantum.c ****   #endif
 209:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 210:quantum/quantum.c ****     process_audio(keycode, record) &&
 211:quantum/quantum.c ****   #endif
 212:quantum/quantum.c ****   #ifdef STENO_ENABLE
 213:quantum/quantum.c ****     process_steno(keycode, record) &&
 214:quantum/quantum.c ****   #endif
 215:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))
 216:quantum/quantum.c ****     process_music(keycode, record) &&
 217:quantum/quantum.c ****   #endif
 218:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 219:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 497               		.loc 1 219 0
 498 0042 8823      		tst r24
 499 0044 01F4      		brne .+2
 500 0046 00C0      		rjmp .L39
 213:quantum/quantum.c ****   #endif
 501               		.loc 1 213 0
 502 0048 B801      		movw r22,r16
 503 004a CE01      		movw r24,r28
 504 004c 0E94 0000 		call process_steno
 505               	.LVL52:
 205:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 506               		.loc 1 205 0
 507 0050 8823      		tst r24
 508 0052 01F4      		brne .+2
 509 0054 00C0      		rjmp .L39
 510               		.loc 1 219 0
 511 0056 B801      		movw r22,r16
 512 0058 CE01      		movw r24,r28
 513 005a 0E94 0000 		call process_tap_dance
 514               	.LVL53:
 213:quantum/quantum.c ****   #endif
 515               		.loc 1 213 0
 516 005e 8823      		tst r24
 517 0060 01F4      		brne .+2
 518 0062 00C0      		rjmp .L39
 220:quantum/quantum.c ****   #endif
 221:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 222:quantum/quantum.c ****     process_leader(keycode, record) &&
 519               		.loc 1 222 0 discriminator 2
 520 0064 B801      		movw r22,r16
 521 0066 CE01      		movw r24,r28
 522 0068 0E94 0000 		call process_leader
 523               	.LVL54:
 219:quantum/quantum.c ****   #endif
 524               		.loc 1 219 0 discriminator 2
 525 006c 8823      		tst r24
 526 006e 01F4      		brne .+2
 527 0070 00C0      		rjmp .L39
 223:quantum/quantum.c ****   #endif
 224:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 225:quantum/quantum.c ****     process_chording(keycode, record) &&
 226:quantum/quantum.c ****   #endif
 227:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 228:quantum/quantum.c ****     process_combo(keycode, record) &&
 229:quantum/quantum.c ****   #endif
 230:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 231:quantum/quantum.c ****     process_unicode(keycode, record) &&
 232:quantum/quantum.c ****   #endif
 233:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 234:quantum/quantum.c ****     process_ucis(keycode, record) &&
 235:quantum/quantum.c ****   #endif
 236:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 237:quantum/quantum.c ****     process_printer(keycode, record) &&
 238:quantum/quantum.c ****   #endif
 239:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 240:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 241:quantum/quantum.c ****   #endif
 242:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 243:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 246:quantum/quantum.c ****     process_terminal(keycode, record) &&
 247:quantum/quantum.c ****   #endif
 248:quantum/quantum.c ****       true)) {
 249:quantum/quantum.c ****     return false;
 250:quantum/quantum.c ****   }
 251:quantum/quantum.c **** 
 252:quantum/quantum.c ****   // Shift / paren setup
 253:quantum/quantum.c **** 
 254:quantum/quantum.c ****   switch(keycode) {
 528               		.loc 1 254 0
 529 0072 C531      		cpi r28,21
 530 0074 FCE5      		ldi r31,92
 531 0076 DF07      		cpc r29,r31
 532 0078 01F4      		brne .+2
 533 007a 00C0      		rjmp .L48
 534 007c 00F4      		brsh .L49
 535 007e C130      		cpi r28,1
 536 0080 ECE5      		ldi r30,92
 537 0082 DE07      		cpc r29,r30
 538 0084 01F4      		brne .+2
 539 0086 00C0      		rjmp .L50
 540 0088 00F0      		brlo .+2
 541 008a 00C0      		rjmp .L51
 542 008c C115      		cp r28,__zero_reg__
 543 008e DC45      		sbci r29,92
 544 0090 01F0      		breq .L52
 545               	.L47:
 255:quantum/quantum.c ****     case RESET:
 256:quantum/quantum.c ****       if (record->event.pressed) {
 257:quantum/quantum.c ****         reset_keyboard();
 258:quantum/quantum.c ****       }
 259:quantum/quantum.c ****     return false;
 260:quantum/quantum.c ****     case DEBUG:
 261:quantum/quantum.c ****       if (record->event.pressed) {
 262:quantum/quantum.c ****           debug_enable = true;
 263:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 264:quantum/quantum.c ****       }
 265:quantum/quantum.c ****     return false;
 266:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 267:quantum/quantum.c ****   case FC_TOG:
 268:quantum/quantum.c ****     if (record->event.pressed) {
 269:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 270:quantum/quantum.c ****     }
 271:quantum/quantum.c ****     return false;
 272:quantum/quantum.c ****   case FC_ON:
 273:quantum/quantum.c ****     if (record->event.pressed) {
 274:quantum/quantum.c ****       FAUXCLICKY_ON;
 275:quantum/quantum.c ****     }
 276:quantum/quantum.c ****     return false;
 277:quantum/quantum.c ****   case FC_OFF:
 278:quantum/quantum.c ****     if (record->event.pressed) {
 279:quantum/quantum.c ****       FAUXCLICKY_OFF;
 280:quantum/quantum.c ****     }
 281:quantum/quantum.c ****     return false;
 282:quantum/quantum.c ****   #endif
 283:quantum/quantum.c ****   #ifdef RGBLIGHT_ENABLE
 284:quantum/quantum.c ****   case RGB_TOG:
 285:quantum/quantum.c ****     if (record->event.pressed) {
 286:quantum/quantum.c ****       rgblight_toggle();
 287:quantum/quantum.c ****     }
 288:quantum/quantum.c ****     return false;
 289:quantum/quantum.c ****   case RGB_MOD:
 290:quantum/quantum.c ****     if (record->event.pressed) {
 291:quantum/quantum.c ****       rgblight_step();
 292:quantum/quantum.c ****     }
 293:quantum/quantum.c ****     return false;
 294:quantum/quantum.c ****   case RGB_SMOD:
 295:quantum/quantum.c ****     // same as RBG_MOD, but if shift is pressed, it will use the reverese direction instead.
 296:quantum/quantum.c ****     if (record->event.pressed) {
 297:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 298:quantum/quantum.c ****       if(shifted) {
 299:quantum/quantum.c ****         rgblight_step_reverse();
 300:quantum/quantum.c ****       }
 301:quantum/quantum.c ****       else {
 302:quantum/quantum.c ****         rgblight_step();
 303:quantum/quantum.c ****       }
 304:quantum/quantum.c ****     }
 305:quantum/quantum.c ****     return false;
 306:quantum/quantum.c ****   case RGB_HUI:
 307:quantum/quantum.c ****     if (record->event.pressed) {
 308:quantum/quantum.c ****       rgblight_increase_hue();
 309:quantum/quantum.c ****     }
 310:quantum/quantum.c ****     return false;
 311:quantum/quantum.c ****   case RGB_HUD:
 312:quantum/quantum.c ****     if (record->event.pressed) {
 313:quantum/quantum.c ****       rgblight_decrease_hue();
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c ****     return false;
 316:quantum/quantum.c ****   case RGB_SAI:
 317:quantum/quantum.c ****     if (record->event.pressed) {
 318:quantum/quantum.c ****       rgblight_increase_sat();
 319:quantum/quantum.c ****     }
 320:quantum/quantum.c ****     return false;
 321:quantum/quantum.c ****   case RGB_SAD:
 322:quantum/quantum.c ****     if (record->event.pressed) {
 323:quantum/quantum.c ****       rgblight_decrease_sat();
 324:quantum/quantum.c ****     }
 325:quantum/quantum.c ****     return false;
 326:quantum/quantum.c ****   case RGB_VAI:
 327:quantum/quantum.c ****     if (record->event.pressed) {
 328:quantum/quantum.c ****       rgblight_increase_val();
 329:quantum/quantum.c ****     }
 330:quantum/quantum.c ****     return false;
 331:quantum/quantum.c ****   case RGB_VAD:
 332:quantum/quantum.c ****     if (record->event.pressed) {
 333:quantum/quantum.c ****       rgblight_decrease_val();
 334:quantum/quantum.c ****     }
 335:quantum/quantum.c ****     return false;
 336:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 337:quantum/quantum.c ****     if (record->event.pressed) {
 338:quantum/quantum.c ****       rgblight_mode(1);
 339:quantum/quantum.c ****     }
 340:quantum/quantum.c ****     return false;
 341:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 342:quantum/quantum.c ****     if (record->event.pressed) {
 343:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 344:quantum/quantum.c ****         rgblight_step();
 345:quantum/quantum.c ****       } else {
 346:quantum/quantum.c ****         rgblight_mode(2);
 347:quantum/quantum.c ****       }
 348:quantum/quantum.c ****     }
 349:quantum/quantum.c ****     return false;
 350:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 351:quantum/quantum.c ****     if (record->event.pressed) {
 352:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 353:quantum/quantum.c ****         rgblight_step();
 354:quantum/quantum.c ****       } else {
 355:quantum/quantum.c ****         rgblight_mode(6);
 356:quantum/quantum.c ****       }
 357:quantum/quantum.c ****     }
 358:quantum/quantum.c ****     return false;
 359:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 360:quantum/quantum.c ****     if (record->event.pressed) {
 361:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 362:quantum/quantum.c ****         rgblight_step();
 363:quantum/quantum.c ****       } else {
 364:quantum/quantum.c ****         rgblight_mode(9);
 365:quantum/quantum.c ****       }
 366:quantum/quantum.c ****     }
 367:quantum/quantum.c ****     return false;
 368:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 369:quantum/quantum.c ****     if (record->event.pressed) {
 370:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 371:quantum/quantum.c ****         rgblight_step();
 372:quantum/quantum.c ****       } else {
 373:quantum/quantum.c ****         rgblight_mode(15);
 374:quantum/quantum.c ****       }
 375:quantum/quantum.c ****     }
 376:quantum/quantum.c ****     return false;
 377:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 378:quantum/quantum.c ****     if (record->event.pressed) {
 379:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 380:quantum/quantum.c ****         rgblight_step();
 381:quantum/quantum.c ****       } else {
 382:quantum/quantum.c ****         rgblight_mode(21);
 383:quantum/quantum.c ****       }
 384:quantum/quantum.c ****     }
 385:quantum/quantum.c ****     return false;
 386:quantum/quantum.c ****   case RGB_MODE_XMAS:
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****       rgblight_mode(24);
 389:quantum/quantum.c ****     }
 390:quantum/quantum.c ****     return false;
 391:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 392:quantum/quantum.c ****     if (record->event.pressed) {
 393:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 394:quantum/quantum.c ****         rgblight_step();
 395:quantum/quantum.c ****       } else {
 396:quantum/quantum.c ****         rgblight_mode(25);
 397:quantum/quantum.c ****       }
 398:quantum/quantum.c ****     }
 399:quantum/quantum.c ****     return false;
 400:quantum/quantum.c ****   #endif
 401:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 402:quantum/quantum.c ****     case OUT_AUTO:
 403:quantum/quantum.c ****       if (record->event.pressed) {
 404:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 405:quantum/quantum.c ****       }
 406:quantum/quantum.c ****       return false;
 407:quantum/quantum.c ****     case OUT_USB:
 408:quantum/quantum.c ****       if (record->event.pressed) {
 409:quantum/quantum.c ****         set_output(OUTPUT_USB);
 410:quantum/quantum.c ****       }
 411:quantum/quantum.c ****       return false;
 412:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 413:quantum/quantum.c ****     case OUT_BT:
 414:quantum/quantum.c ****       if (record->event.pressed) {
 415:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 416:quantum/quantum.c ****       }
 417:quantum/quantum.c ****       return false;
 418:quantum/quantum.c ****     #endif
 419:quantum/quantum.c ****     #endif
 420:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 421:quantum/quantum.c ****       if (record->event.pressed) {
 422:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 423:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 424:quantum/quantum.c ****             eeconfig_init();
 425:quantum/quantum.c ****         }
 426:quantum/quantum.c ****         /* keymap config */
 427:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 428:quantum/quantum.c ****         switch (keycode)
 429:quantum/quantum.c ****         {
 430:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 431:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 432:quantum/quantum.c ****             break;
 433:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 434:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 435:quantum/quantum.c ****             break;
 436:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 437:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 438:quantum/quantum.c ****             break;
 439:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 440:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 441:quantum/quantum.c ****             break;
 442:quantum/quantum.c ****           case MAGIC_NO_GUI:
 443:quantum/quantum.c ****             keymap_config.no_gui = true;
 444:quantum/quantum.c ****             break;
 445:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 446:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 447:quantum/quantum.c ****             break;
 448:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 449:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 450:quantum/quantum.c ****             break;
 451:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 452:quantum/quantum.c ****             keymap_config.nkro = true;
 453:quantum/quantum.c ****             break;
 454:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 455:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 456:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 457:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 458:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 459:quantum/quantum.c ****             #endif
 460:quantum/quantum.c ****             break;
 461:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 462:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 463:quantum/quantum.c ****             break;
 464:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 465:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 466:quantum/quantum.c ****             break;
 467:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 468:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 469:quantum/quantum.c ****             break;
 470:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 471:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 472:quantum/quantum.c ****             break;
 473:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 474:quantum/quantum.c ****             keymap_config.no_gui = false;
 475:quantum/quantum.c ****             break;
 476:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 477:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 478:quantum/quantum.c ****             break;
 479:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 480:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 481:quantum/quantum.c ****             break;
 482:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 483:quantum/quantum.c ****             keymap_config.nkro = false;
 484:quantum/quantum.c ****             break;
 485:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 486:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 487:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 488:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 489:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 490:quantum/quantum.c ****             #endif
 491:quantum/quantum.c ****             break;
 492:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 493:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 494:quantum/quantum.c ****             break;
 495:quantum/quantum.c ****           default:
 496:quantum/quantum.c ****             break;
 497:quantum/quantum.c ****         }
 498:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 499:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 500:quantum/quantum.c **** 
 501:quantum/quantum.c ****         return false;
 502:quantum/quantum.c ****       }
 503:quantum/quantum.c ****       break;
 504:quantum/quantum.c ****     case KC_LSPO: {
 505:quantum/quantum.c ****       if (record->event.pressed) {
 506:quantum/quantum.c ****         shift_interrupted[0] = false;
 507:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 508:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 509:quantum/quantum.c ****       }
 510:quantum/quantum.c ****       else {
 511:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 512:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 513:quantum/quantum.c ****             shift_interrupted[0] = true;
 514:quantum/quantum.c ****             shift_interrupted[1] = true;
 515:quantum/quantum.c ****           }
 516:quantum/quantum.c ****         #endif
 517:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer[0]) < TAPPING_TERM) {
 518:quantum/quantum.c ****           register_code(LSPO_KEY);
 519:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 520:quantum/quantum.c ****         }
 521:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 522:quantum/quantum.c ****       }
 523:quantum/quantum.c ****       return false;
 524:quantum/quantum.c ****     }
 525:quantum/quantum.c **** 
 526:quantum/quantum.c ****     case KC_RSPC: {
 527:quantum/quantum.c ****       if (record->event.pressed) {
 528:quantum/quantum.c ****         shift_interrupted[1] = false;
 529:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 530:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 531:quantum/quantum.c ****       }
 532:quantum/quantum.c ****       else {
 533:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 534:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 535:quantum/quantum.c ****             shift_interrupted[0] = true;
 536:quantum/quantum.c ****             shift_interrupted[1] = true;
 537:quantum/quantum.c ****           }
 538:quantum/quantum.c ****         #endif
 539:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 540:quantum/quantum.c ****           register_code(RSPC_KEY);
 541:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 542:quantum/quantum.c ****         }
 543:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 544:quantum/quantum.c ****       }
 545:quantum/quantum.c ****       return false;
 546:quantum/quantum.c ****     }
 547:quantum/quantum.c ****     case GRAVE_ESC: {
 548:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 549:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 550:quantum/quantum.c **** 
 551:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 552:quantum/quantum.c ****       // if CTRL is pressed, ESC is always read as ESC, even if SHIFT or GUI is pressed.
 553:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 554:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL)))
 555:quantum/quantum.c ****         shifted = 0;
 556:quantum/quantum.c **** #endif
 557:quantum/quantum.c **** 
 558:quantum/quantum.c ****       if (record->event.pressed) {
 559:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 560:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 561:quantum/quantum.c ****       }
 562:quantum/quantum.c ****       else {
 563:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 564:quantum/quantum.c ****       }
 565:quantum/quantum.c **** 
 566:quantum/quantum.c ****       send_keyboard_report();
 567:quantum/quantum.c ****     }
 568:quantum/quantum.c ****     default: {
 569:quantum/quantum.c ****       shift_interrupted[0] = true;
 546               		.loc 1 569 0
 547 0092 81E0      		ldi r24,lo8(1)
 548 0094 8093 0000 		sts shift_interrupted,r24
 570:quantum/quantum.c ****       shift_interrupted[1] = true;
 549               		.loc 1 570 0
 550 0098 8093 0000 		sts shift_interrupted+1,r24
 551               	.L58:
 571:quantum/quantum.c ****       break;
 572:quantum/quantum.c ****     }
 573:quantum/quantum.c ****   }
 574:quantum/quantum.c **** 
 575:quantum/quantum.c ****   return process_action_kb(record);
 552               		.loc 1 575 0
 553 009c C801      		movw r24,r16
 554               	/* epilogue start */
 576:quantum/quantum.c **** }
 555               		.loc 1 576 0
 556 009e DF91      		pop r29
 557 00a0 CF91      		pop r28
 558               	.LVL55:
 559 00a2 1F91      		pop r17
 560 00a4 0F91      		pop r16
 561               	.LVL56:
 562 00a6 FF90      		pop r15
 575:quantum/quantum.c **** }
 563               		.loc 1 575 0
 564 00a8 0C94 0000 		jmp process_action_kb
 565               	.LVL57:
 566               	.L41:
 567               	.LBB25:
 185:quantum/quantum.c ****       }
 568               		.loc 1 185 0
 569 00ac CE01      		movw r24,r28
 570 00ae 0E94 0000 		call read_source_layers_cache
 571               	.LVL58:
 572 00b2 F82E      		mov r15,r24
 573               	.LVL59:
 574 00b4 00C0      		rjmp .L42
 575               	.LVL60:
 576               	.L40:
 577               	.LBE25:
 190:quantum/quantum.c **** 
 578               		.loc 1 190 0
 579 00b6 CE01      		movw r24,r28
 580 00b8 0E94 0000 		call layer_switch_get_layer
 581               	.LVL61:
 582 00bc BE01      		movw r22,r28
 583 00be 00C0      		rjmp .L120
 584               	.LVL62:
 585               	.L49:
 254:quantum/quantum.c ****     case RESET:
 586               		.loc 1 254 0
 587 00c0 C53D      		cpi r28,-43
 588 00c2 ECE5      		ldi r30,92
 589 00c4 DE07      		cpc r29,r30
 590 00c6 01F4      		brne .+2
 591 00c8 00C0      		rjmp .L53
 592 00ca 00F4      		brsh .L54
 593 00cc C43D      		cpi r28,-44
 594 00ce DC45      		sbci r29,92
 595 00d0 01F4      		brne .L47
 505:quantum/quantum.c ****         shift_interrupted[0] = false;
 596               		.loc 1 505 0
 597 00d2 F801      		movw r30,r16
 598 00d4 8281      		ldd r24,Z+2
 599 00d6 8823      		tst r24
 600 00d8 01F4      		brne .+2
 601 00da 00C0      		rjmp .L81
 506:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 602               		.loc 1 506 0
 603 00dc 1092 0000 		sts shift_interrupted,__zero_reg__
 507:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 604               		.loc 1 507 0
 605 00e0 0E94 0000 		call timer_read
 606               	.LVL63:
 607 00e4 9093 0000 		sts scs_timer+1,r25
 608 00e8 8093 0000 		sts scs_timer,r24
 508:quantum/quantum.c ****       }
 609               		.loc 1 508 0
 610 00ec 82E0      		ldi r24,lo8(2)
 611               	.L123:
 530:quantum/quantum.c ****       }
 612               		.loc 1 530 0
 613 00ee 0E94 0000 		call register_mods
 614               	.LVL64:
 615 00f2 00C0      		rjmp .L39
 616               	.L54:
 254:quantum/quantum.c ****     case RESET:
 617               		.loc 1 254 0
 618 00f4 C83D      		cpi r28,-40
 619 00f6 ECE5      		ldi r30,92
 620 00f8 DE07      		cpc r29,r30
 621 00fa 01F0      		breq .L56
 622 00fc C93D      		cpi r28,-39
 623 00fe DC45      		sbci r29,92
 624 0100 01F4      		brne .L47
 408:quantum/quantum.c ****         set_output(OUTPUT_USB);
 625               		.loc 1 408 0
 626 0102 F801      		movw r30,r16
 627 0104 8281      		ldd r24,Z+2
 628 0106 8823      		tst r24
 629 0108 01F0      		breq .L39
 409:quantum/quantum.c ****       }
 630               		.loc 1 409 0
 631 010a 82E0      		ldi r24,lo8(2)
 632 010c 00C0      		rjmp .L122
 633               	.L52:
 256:quantum/quantum.c ****         reset_keyboard();
 634               		.loc 1 256 0
 635 010e F801      		movw r30,r16
 636 0110 8281      		ldd r24,Z+2
 637 0112 8111      		cpse r24,__zero_reg__
 257:quantum/quantum.c ****       }
 638               		.loc 1 257 0
 639 0114 0E94 0000 		call reset_keyboard
 640               	.LVL65:
 641               	.L39:
 642               		.loc 1 576 0
 643 0118 80E0      		ldi r24,0
 644               	/* epilogue start */
 645 011a DF91      		pop r29
 646 011c CF91      		pop r28
 647               	.LVL66:
 648 011e 1F91      		pop r17
 649 0120 0F91      		pop r16
 650               	.LVL67:
 651 0122 FF90      		pop r15
 652 0124 0895      		ret
 653               	.LVL68:
 654               	.L50:
 261:quantum/quantum.c ****           debug_enable = true;
 655               		.loc 1 261 0
 656 0126 F801      		movw r30,r16
 657 0128 8281      		ldd r24,Z+2
 658 012a 8823      		tst r24
 659 012c 01F0      		breq .L39
 262:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 660               		.loc 1 262 0
 661 012e 8091 0000 		lds r24,debug_config
 662 0132 8160      		ori r24,lo8(1<<0)
 663 0134 8093 0000 		sts debug_config,r24
 664 0138 00C0      		rjmp .L39
 665               	.L56:
 403:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 666               		.loc 1 403 0
 667 013a F801      		movw r30,r16
 668 013c 8281      		ldd r24,Z+2
 669 013e 8823      		tst r24
 670 0140 01F0      		breq .L39
 404:quantum/quantum.c ****       }
 671               		.loc 1 404 0
 672 0142 80E0      		ldi r24,0
 673               	.L122:
 409:quantum/quantum.c ****       }
 674               		.loc 1 409 0
 675 0144 0E94 0000 		call set_output
 676               	.LVL69:
 677 0148 00C0      		rjmp .L39
 678               	.L51:
 421:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 679               		.loc 1 421 0
 680 014a F801      		movw r30,r16
 681 014c 8281      		ldd r24,Z+2
 682 014e 8823      		tst r24
 683 0150 01F4      		brne .+2
 684 0152 00C0      		rjmp .L58
 423:quantum/quantum.c ****             eeconfig_init();
 685               		.loc 1 423 0
 686 0154 0E94 0000 		call eeconfig_is_enabled
 687               	.LVL70:
 688 0158 8111      		cpse r24,__zero_reg__
 689 015a 00C0      		rjmp .L59
 424:quantum/quantum.c ****         }
 690               		.loc 1 424 0
 691 015c 0E94 0000 		call eeconfig_init
 692               	.LVL71:
 693               	.L59:
 427:quantum/quantum.c ****         switch (keycode)
 694               		.loc 1 427 0
 695 0160 0E94 0000 		call eeconfig_read_keymap
 696               	.LVL72:
 697 0164 90E0      		ldi r25,0
 698 0166 9093 0000 		sts keymap_config+1,r25
 699 016a 8093 0000 		sts keymap_config,r24
 428:quantum/quantum.c ****         {
 700               		.loc 1 428 0
 701 016e FE01      		movw r30,r28
 702 0170 E350      		subi r30,3
 703 0172 FC45      		sbci r31,92
 431:quantum/quantum.c ****             break;
 704               		.loc 1 431 0
 705 0174 8091 0000 		lds r24,keymap_config
 706 0178 8160      		ori r24,lo8(1<<0)
 428:quantum/quantum.c ****         {
 707               		.loc 1 428 0
 708 017a E231      		cpi r30,18
 709 017c F105      		cpc r31,__zero_reg__
 710 017e 00F4      		brsh .L121
 711 0180 E050      		subi r30,lo8(-(gs(.L62)))
 712 0182 F040      		sbci r31,hi8(-(gs(.L62)))
 713 0184 0C94 0000 		jmp __tablejump2__
 714               		.p2align	1
 715               	.L62:
 716 0188 0000      		.word gs(.L61)
 717 018a 0000      		.word gs(.L63)
 718 018c 0000      		.word gs(.L64)
 719 018e 0000      		.word gs(.L65)
 720 0190 0000      		.word gs(.L66)
 721 0192 0000      		.word gs(.L67)
 722 0194 0000      		.word gs(.L68)
 723 0196 0000      		.word gs(.L69)
 724 0198 0000      		.word gs(.L70)
 725 019a 0000      		.word gs(.L71)
 726 019c 0000      		.word gs(.L72)
 727 019e 0000      		.word gs(.L73)
 728 01a0 0000      		.word gs(.L74)
 729 01a2 0000      		.word gs(.L75)
 730 01a4 0000      		.word gs(.L76)
 731 01a6 0000      		.word gs(.L77)
 732 01a8 0000      		.word gs(.L78)
 733 01aa 0000      		.word gs(.L79)
 734               	.L61:
 434:quantum/quantum.c ****             break;
 735               		.loc 1 434 0
 736 01ac 8091 0000 		lds r24,keymap_config
 737 01b0 8260      		ori r24,lo8(1<<1)
 738               	.L121:
 493:quantum/quantum.c ****             break;
 739               		.loc 1 493 0
 740 01b2 8093 0000 		sts keymap_config,r24
 498:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 741               		.loc 1 498 0
 742 01b6 8091 0000 		lds r24,keymap_config
 743 01ba 0E94 0000 		call eeconfig_update_keymap
 744               	.LVL73:
 499:quantum/quantum.c **** 
 745               		.loc 1 499 0
 746 01be 0E94 0000 		call clear_keyboard
 747               	.LVL74:
 501:quantum/quantum.c ****       }
 748               		.loc 1 501 0
 749 01c2 00C0      		rjmp .L39
 750               	.L63:
 437:quantum/quantum.c ****             break;
 751               		.loc 1 437 0
 752 01c4 8091 0000 		lds r24,keymap_config
 753 01c8 8460      		ori r24,lo8(1<<2)
 754 01ca 00C0      		rjmp .L121
 755               	.L64:
 440:quantum/quantum.c ****             break;
 756               		.loc 1 440 0
 757 01cc 8091 0000 		lds r24,keymap_config
 758               	.L126:
 456:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 759               		.loc 1 456 0
 760 01d0 8860      		ori r24,lo8(1<<3)
 761 01d2 00C0      		rjmp .L121
 762               	.L65:
 443:quantum/quantum.c ****             break;
 763               		.loc 1 443 0
 764 01d4 8091 0000 		lds r24,keymap_config
 765 01d8 8061      		ori r24,lo8(1<<4)
 766 01da 00C0      		rjmp .L121
 767               	.L66:
 446:quantum/quantum.c ****             break;
 768               		.loc 1 446 0
 769 01dc 8091 0000 		lds r24,keymap_config
 770 01e0 8062      		ori r24,lo8(1<<5)
 771 01e2 00C0      		rjmp .L121
 772               	.L67:
 449:quantum/quantum.c ****             break;
 773               		.loc 1 449 0
 774 01e4 8091 0000 		lds r24,keymap_config
 775 01e8 8064      		ori r24,lo8(1<<6)
 776 01ea 00C0      		rjmp .L121
 777               	.L68:
 452:quantum/quantum.c ****             break;
 778               		.loc 1 452 0
 779 01ec 8091 0000 		lds r24,keymap_config
 780 01f0 8068      		ori r24,lo8(1<<7)
 781 01f2 00C0      		rjmp .L121
 782               	.L69:
 455:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 783               		.loc 1 455 0
 784 01f4 8091 0000 		lds r24,keymap_config
 456:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 785               		.loc 1 456 0
 786 01f8 8460      		ori r24,lo8(4)
 787 01fa 00C0      		rjmp .L126
 788               	.L70:
 462:quantum/quantum.c ****             break;
 789               		.loc 1 462 0
 790 01fc 8091 0000 		lds r24,keymap_config
 791 0200 8E7F      		andi r24,lo8(~(1<<0))
 792 0202 00C0      		rjmp .L121
 793               	.L71:
 465:quantum/quantum.c ****             break;
 794               		.loc 1 465 0
 795 0204 8091 0000 		lds r24,keymap_config
 796 0208 8D7F      		andi r24,lo8(~(1<<1))
 797 020a 00C0      		rjmp .L121
 798               	.L72:
 468:quantum/quantum.c ****             break;
 799               		.loc 1 468 0
 800 020c 8091 0000 		lds r24,keymap_config
 801 0210 8B7F      		andi r24,lo8(~(1<<2))
 802 0212 00C0      		rjmp .L121
 803               	.L73:
 471:quantum/quantum.c ****             break;
 804               		.loc 1 471 0
 805 0214 8091 0000 		lds r24,keymap_config
 806               	.L125:
 487:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 807               		.loc 1 487 0
 808 0218 877F      		andi r24,lo8(~(1<<3))
 809 021a 00C0      		rjmp .L121
 810               	.L74:
 474:quantum/quantum.c ****             break;
 811               		.loc 1 474 0
 812 021c 8091 0000 		lds r24,keymap_config
 813 0220 8F7E      		andi r24,lo8(~(1<<4))
 814 0222 00C0      		rjmp .L121
 815               	.L75:
 477:quantum/quantum.c ****             break;
 816               		.loc 1 477 0
 817 0224 8091 0000 		lds r24,keymap_config
 818 0228 8F7D      		andi r24,lo8(~(1<<5))
 819 022a 00C0      		rjmp .L121
 820               	.L76:
 480:quantum/quantum.c ****             break;
 821               		.loc 1 480 0
 822 022c 8091 0000 		lds r24,keymap_config
 823 0230 8F7B      		andi r24,lo8(~(1<<6))
 824 0232 00C0      		rjmp .L121
 825               	.L77:
 483:quantum/quantum.c ****             break;
 826               		.loc 1 483 0
 827 0234 8091 0000 		lds r24,keymap_config
 828 0238 8F77      		andi r24,lo8(~(1<<7))
 829 023a 00C0      		rjmp .L121
 830               	.L78:
 486:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 831               		.loc 1 486 0
 832 023c 8091 0000 		lds r24,keymap_config
 487:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 833               		.loc 1 487 0
 834 0240 8B7F      		andi r24,lo8(-5)
 835 0242 00C0      		rjmp .L125
 836               	.L79:
 493:quantum/quantum.c ****             break;
 837               		.loc 1 493 0
 838 0244 9091 0000 		lds r25,keymap_config
 839 0248 892F      		mov r24,r25
 840 024a 97FB      		bst r25,7
 841 024c 87F9      		bld r24,7
 842 024e 8058      		subi r24,0x80
 843 0250 00C0      		rjmp .L121
 844               	.L81:
 517:quantum/quantum.c ****           register_code(LSPO_KEY);
 845               		.loc 1 517 0
 846 0252 8091 0000 		lds r24,shift_interrupted
 847 0256 8111      		cpse r24,__zero_reg__
 848 0258 00C0      		rjmp .L83
 517:quantum/quantum.c ****           register_code(LSPO_KEY);
 849               		.loc 1 517 0 is_stmt 0 discriminator 1
 850 025a 8091 0000 		lds r24,scs_timer
 851 025e 9091 0000 		lds r25,scs_timer+1
 852 0262 0E94 0000 		call timer_elapsed
 853               	.LVL75:
 854 0266 883C      		cpi r24,-56
 855 0268 9105      		cpc r25,__zero_reg__
 856 026a 00F4      		brsh .L83
 518:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 857               		.loc 1 518 0 is_stmt 1
 858 026c 86E2      		ldi r24,lo8(38)
 859 026e 0E94 0000 		call register_code
 860               	.LVL76:
 519:quantum/quantum.c ****         }
 861               		.loc 1 519 0
 862 0272 86E2      		ldi r24,lo8(38)
 863 0274 0E94 0000 		call unregister_code
 864               	.LVL77:
 865               	.L83:
 521:quantum/quantum.c ****       }
 866               		.loc 1 521 0
 867 0278 82E0      		ldi r24,lo8(2)
 868               	.L124:
 543:quantum/quantum.c ****       }
 869               		.loc 1 543 0
 870 027a 0E94 0000 		call unregister_mods
 871               	.LVL78:
 872 027e 00C0      		rjmp .L39
 873               	.L53:
 527:quantum/quantum.c ****         shift_interrupted[1] = false;
 874               		.loc 1 527 0
 875 0280 F801      		movw r30,r16
 876 0282 8281      		ldd r24,Z+2
 877 0284 8823      		tst r24
 878 0286 01F0      		breq .L85
 528:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 879               		.loc 1 528 0
 880 0288 1092 0000 		sts shift_interrupted+1,__zero_reg__
 529:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 881               		.loc 1 529 0
 882 028c 0E94 0000 		call timer_read
 883               	.LVL79:
 884 0290 9093 0000 		sts scs_timer+2+1,r25
 885 0294 8093 0000 		sts scs_timer+2,r24
 530:quantum/quantum.c ****       }
 886               		.loc 1 530 0
 887 0298 80E2      		ldi r24,lo8(32)
 888 029a 00C0      		rjmp .L123
 889               	.L85:
 539:quantum/quantum.c ****           register_code(RSPC_KEY);
 890               		.loc 1 539 0
 891 029c 8091 0000 		lds r24,shift_interrupted+1
 892 02a0 8111      		cpse r24,__zero_reg__
 893 02a2 00C0      		rjmp .L87
 539:quantum/quantum.c ****           register_code(RSPC_KEY);
 894               		.loc 1 539 0 is_stmt 0 discriminator 1
 895 02a4 8091 0000 		lds r24,scs_timer+2
 896 02a8 9091 0000 		lds r25,scs_timer+2+1
 897 02ac 0E94 0000 		call timer_elapsed
 898               	.LVL80:
 899 02b0 883C      		cpi r24,-56
 900 02b2 9105      		cpc r25,__zero_reg__
 901 02b4 00F4      		brsh .L87
 540:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 902               		.loc 1 540 0 is_stmt 1
 903 02b6 87E2      		ldi r24,lo8(39)
 904 02b8 0E94 0000 		call register_code
 905               	.LVL81:
 541:quantum/quantum.c ****         }
 906               		.loc 1 541 0
 907 02bc 87E2      		ldi r24,lo8(39)
 908 02be 0E94 0000 		call unregister_code
 909               	.LVL82:
 910               	.L87:
 543:quantum/quantum.c ****       }
 911               		.loc 1 543 0
 912 02c2 80E2      		ldi r24,lo8(32)
 913 02c4 00C0      		rjmp .L124
 914               	.L48:
 915               	.LBB26:
 548:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 916               		.loc 1 548 0
 917 02c6 0E94 0000 		call get_mods
 918               	.LVL83:
 558:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 919               		.loc 1 558 0
 920 02ca F801      		movw r30,r16
 921 02cc 9281      		ldd r25,Z+2
 922 02ce 9923      		tst r25
 923 02d0 01F0      		breq .L89
 548:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 924               		.loc 1 548 0
 925 02d2 8A7A      		andi r24,lo8(-86)
 926               	.LVL84:
 559:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 927               		.loc 1 559 0
 928 02d4 91E0      		ldi r25,lo8(1)
 929 02d6 01F4      		brne .L90
 930 02d8 90E0      		ldi r25,0
 931               	.L90:
 932 02da 9093 0000 		sts grave_esc_was_shifted,r25
 560:quantum/quantum.c ****       }
 933               		.loc 1 560 0
 934 02de 8111      		cpse r24,__zero_reg__
 935 02e0 00C0      		rjmp .L94
 936 02e2 89E2      		ldi r24,lo8(41)
 937               	.LVL85:
 938               	.L91:
 560:quantum/quantum.c ****       }
 939               		.loc 1 560 0 is_stmt 0 discriminator 4
 940 02e4 0E94 0000 		call add_key
 941               	.LVL86:
 942               	.L92:
 566:quantum/quantum.c ****     }
 943               		.loc 1 566 0 is_stmt 1
 944 02e8 0E94 0000 		call send_keyboard_report
 945               	.LVL87:
 946 02ec 00C0      		rjmp .L47
 947               	.LVL88:
 948               	.L94:
 560:quantum/quantum.c ****       }
 949               		.loc 1 560 0
 950 02ee 85E3      		ldi r24,lo8(53)
 951               	.LVL89:
 952 02f0 00C0      		rjmp .L91
 953               	.LVL90:
 954               	.L89:
 563:quantum/quantum.c ****       }
 955               		.loc 1 563 0
 956 02f2 8091 0000 		lds r24,grave_esc_was_shifted
 957               	.LVL91:
 958 02f6 8111      		cpse r24,__zero_reg__
 959 02f8 00C0      		rjmp .L95
 960 02fa 89E2      		ldi r24,lo8(41)
 961               	.L93:
 563:quantum/quantum.c ****       }
 962               		.loc 1 563 0 is_stmt 0 discriminator 4
 963 02fc 0E94 0000 		call del_key
 964               	.LVL92:
 965 0300 00C0      		rjmp .L92
 966               	.L95:
 563:quantum/quantum.c ****       }
 967               		.loc 1 563 0
 968 0302 85E3      		ldi r24,lo8(53)
 969 0304 00C0      		rjmp .L93
 970               	.LBE26:
 971               		.cfi_endproc
 972               	.LFE121:
 974               		.section	.text.send_char,"ax",@progbits
 975               	.global	send_char
 977               	send_char:
 978               	.LFB126:
 577:quantum/quantum.c **** 
 578:quantum/quantum.c **** __attribute__ ((weak))
 579:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 580:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 581:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 582:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 583:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 584:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 585:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 586:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 587:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 588:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 589:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 590:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 591:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 592:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 593:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 594:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 595:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 596:quantum/quantum.c **** };
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** __attribute__ ((weak))
 599:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 600:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 601:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 602:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 603:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 604:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 605:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 606:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 607:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 608:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 609:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 610:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 611:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 612:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 613:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 614:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 615:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 616:quantum/quantum.c **** };
 617:quantum/quantum.c **** 
 618:quantum/quantum.c **** void send_string(const char *str) {
 619:quantum/quantum.c ****   send_string_with_delay(str, 0);
 620:quantum/quantum.c **** }
 621:quantum/quantum.c **** 
 622:quantum/quantum.c **** void send_string_P(const char *str) {
 623:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 624:quantum/quantum.c **** }
 625:quantum/quantum.c **** 
 626:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 627:quantum/quantum.c ****     while (1) {
 628:quantum/quantum.c ****         char ascii_code = *str;
 629:quantum/quantum.c ****         if (!ascii_code) break;
 630:quantum/quantum.c ****         if (ascii_code == 1) {
 631:quantum/quantum.c ****           // tap
 632:quantum/quantum.c ****           uint8_t keycode = *(++str);
 633:quantum/quantum.c ****           register_code(keycode);
 634:quantum/quantum.c ****           unregister_code(keycode);
 635:quantum/quantum.c ****         } else if (ascii_code == 2) {
 636:quantum/quantum.c ****           // down
 637:quantum/quantum.c ****           uint8_t keycode = *(++str);
 638:quantum/quantum.c ****           register_code(keycode);
 639:quantum/quantum.c ****         } else if (ascii_code == 3) {
 640:quantum/quantum.c ****           // up
 641:quantum/quantum.c ****           uint8_t keycode = *(++str);
 642:quantum/quantum.c ****           unregister_code(keycode);
 643:quantum/quantum.c ****         } else {
 644:quantum/quantum.c ****           send_char(ascii_code);
 645:quantum/quantum.c ****         }
 646:quantum/quantum.c ****         ++str;
 647:quantum/quantum.c ****         // interval
 648:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 649:quantum/quantum.c ****     }
 650:quantum/quantum.c **** }
 651:quantum/quantum.c **** 
 652:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 653:quantum/quantum.c ****     while (1) {
 654:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 655:quantum/quantum.c ****         if (!ascii_code) break;
 656:quantum/quantum.c ****         if (ascii_code == 1) {
 657:quantum/quantum.c ****           // tap
 658:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 659:quantum/quantum.c ****           register_code(keycode);
 660:quantum/quantum.c ****           unregister_code(keycode);
 661:quantum/quantum.c ****         } else if (ascii_code == 2) {
 662:quantum/quantum.c ****           // down
 663:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 664:quantum/quantum.c ****           register_code(keycode);
 665:quantum/quantum.c ****         } else if (ascii_code == 3) {
 666:quantum/quantum.c ****           // up
 667:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 668:quantum/quantum.c ****           unregister_code(keycode);
 669:quantum/quantum.c ****         } else {
 670:quantum/quantum.c ****           send_char(ascii_code);
 671:quantum/quantum.c ****         }
 672:quantum/quantum.c ****         ++str;
 673:quantum/quantum.c ****         // interval
 674:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** }
 677:quantum/quantum.c **** 
 678:quantum/quantum.c **** void send_char(char ascii_code) {
 979               		.loc 1 678 0 is_stmt 1
 980               		.cfi_startproc
 981               	.LVL93:
 982 0000 CF93      		push r28
 983               	.LCFI13:
 984               		.cfi_def_cfa_offset 3
 985               		.cfi_offset 28, -2
 986               	/* prologue: function */
 987               	/* frame size = 0 */
 988               	/* stack size = 1 */
 989               	.L__stack_usage = 1
 990 0002 90E0      		ldi r25,0
 991               	.LVL94:
 992               	.LBB27:
 679:quantum/quantum.c ****   uint8_t keycode;
 680:quantum/quantum.c ****   keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 993               		.loc 1 680 0
 994 0004 FC01      		movw r30,r24
 995 0006 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 996 0008 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 997               	.LVL95:
 998               	/* #APP */
 999               	 ;  680 "quantum/quantum.c" 1
 1000 000a C491      		lpm r28, Z
 1001               		
 1002               	 ;  0 "" 2
 1003               	.LVL96:
 1004               	/* #NOAPP */
 1005               	.LBE27:
 1006               	.LBB28:
 681:quantum/quantum.c ****   if (pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code])) {
 1007               		.loc 1 681 0
 1008 000c 8050      		subi r24,lo8(-(ascii_to_shift_lut))
 1009 000e 9040      		sbci r25,hi8(-(ascii_to_shift_lut))
 1010               	.LVL97:
 1011 0010 FC01      		movw r30,r24
 1012               	.LVL98:
 1013               	/* #APP */
 1014               	 ;  681 "quantum/quantum.c" 1
 1015 0012 8491      		lpm r24, Z
 1016               		
 1017               	 ;  0 "" 2
 1018               	.LVL99:
 1019               	/* #NOAPP */
 1020               	.LBE28:
 1021 0014 8823      		tst r24
 1022 0016 01F0      		breq .L128
 682:quantum/quantum.c ****       register_code(KC_LSFT);
 1023               		.loc 1 682 0
 1024 0018 81EE      		ldi r24,lo8(-31)
 1025               	.LVL100:
 1026 001a 0E94 0000 		call register_code
 1027               	.LVL101:
 683:quantum/quantum.c ****       register_code(keycode);
 1028               		.loc 1 683 0
 1029 001e 8C2F      		mov r24,r28
 1030 0020 0E94 0000 		call register_code
 1031               	.LVL102:
 684:quantum/quantum.c ****       unregister_code(keycode);
 1032               		.loc 1 684 0
 1033 0024 8C2F      		mov r24,r28
 1034 0026 0E94 0000 		call unregister_code
 1035               	.LVL103:
 685:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1036               		.loc 1 685 0
 1037 002a 81EE      		ldi r24,lo8(-31)
 1038               	.L129:
 1039               	/* epilogue start */
 686:quantum/quantum.c ****   } else {
 687:quantum/quantum.c ****       register_code(keycode);
 688:quantum/quantum.c ****       unregister_code(keycode);
 689:quantum/quantum.c ****   }
 690:quantum/quantum.c **** }
 1040               		.loc 1 690 0
 1041 002c CF91      		pop r28
 1042               	.LVL104:
 688:quantum/quantum.c ****   }
 1043               		.loc 1 688 0
 1044 002e 0C94 0000 		jmp unregister_code
 1045               	.LVL105:
 1046               	.L128:
 687:quantum/quantum.c ****       unregister_code(keycode);
 1047               		.loc 1 687 0
 1048 0032 8C2F      		mov r24,r28
 1049               	.LVL106:
 1050 0034 0E94 0000 		call register_code
 1051               	.LVL107:
 688:quantum/quantum.c ****   }
 1052               		.loc 1 688 0
 1053 0038 8C2F      		mov r24,r28
 1054 003a 00C0      		rjmp .L129
 1055               		.cfi_endproc
 1056               	.LFE126:
 1058               		.section	.text.send_string_with_delay,"ax",@progbits
 1059               	.global	send_string_with_delay
 1061               	send_string_with_delay:
 1062               	.LFB124:
 626:quantum/quantum.c ****     while (1) {
 1063               		.loc 1 626 0
 1064               		.cfi_startproc
 1065               	.LVL108:
 1066 0000 FF92      		push r15
 1067               	.LCFI14:
 1068               		.cfi_def_cfa_offset 3
 1069               		.cfi_offset 15, -2
 1070 0002 0F93      		push r16
 1071               	.LCFI15:
 1072               		.cfi_def_cfa_offset 4
 1073               		.cfi_offset 16, -3
 1074 0004 1F93      		push r17
 1075               	.LCFI16:
 1076               		.cfi_def_cfa_offset 5
 1077               		.cfi_offset 17, -4
 1078 0006 CF93      		push r28
 1079               	.LCFI17:
 1080               		.cfi_def_cfa_offset 6
 1081               		.cfi_offset 28, -5
 1082 0008 DF93      		push r29
 1083               	.LCFI18:
 1084               		.cfi_def_cfa_offset 7
 1085               		.cfi_offset 29, -6
 1086               	/* prologue: function */
 1087               	/* frame size = 0 */
 1088               	/* stack size = 5 */
 1089               	.L__stack_usage = 5
 1090 000a EC01      		movw r28,r24
 1091 000c F62E      		mov r15,r22
 1092               	.LVL109:
 1093               	.L138:
 1094               	.LBB29:
 628:quantum/quantum.c ****         if (!ascii_code) break;
 1095               		.loc 1 628 0
 1096 000e 8881      		ld r24,Y
 1097               	.LVL110:
 629:quantum/quantum.c ****         if (ascii_code == 1) {
 1098               		.loc 1 629 0
 1099 0010 8823      		tst r24
 1100 0012 01F0      		breq .L130
 1101 0014 8E01      		movw r16,r28
 1102 0016 0F5F      		subi r16,-1
 1103 0018 1F4F      		sbci r17,-1
 630:quantum/quantum.c ****           // tap
 1104               		.loc 1 630 0
 1105 001a 8130      		cpi r24,lo8(1)
 1106 001c 01F4      		brne .L132
 1107               	.LVL111:
 1108               	.LBB30:
 632:quantum/quantum.c ****           register_code(keycode);
 1109               		.loc 1 632 0
 1110 001e C981      		ldd r28,Y+1
 1111               	.LVL112:
 633:quantum/quantum.c ****           unregister_code(keycode);
 1112               		.loc 1 633 0
 1113 0020 8C2F      		mov r24,r28
 1114               	.LVL113:
 1115 0022 0E94 0000 		call register_code
 1116               	.LVL114:
 634:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1117               		.loc 1 634 0
 1118 0026 8C2F      		mov r24,r28
 1119               	.LVL115:
 1120               	.L139:
 1121               	.LBE30:
 1122               	.LBB31:
 642:quantum/quantum.c ****         } else {
 1123               		.loc 1 642 0
 1124 0028 0E94 0000 		call unregister_code
 1125               	.LVL116:
 1126               	.LBE31:
 1127 002c 00C0      		rjmp .L133
 1128               	.LVL117:
 1129               	.L132:
 635:quantum/quantum.c ****           // down
 1130               		.loc 1 635 0
 1131 002e 8230      		cpi r24,lo8(2)
 1132 0030 01F4      		brne .L134
 1133               	.LVL118:
 1134               	.LBB32:
 638:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1135               		.loc 1 638 0
 1136 0032 8981      		ldd r24,Y+1
 1137               	.LVL119:
 1138 0034 0E94 0000 		call register_code
 1139               	.LVL120:
 1140               	.L133:
 1141               	.LBE32:
 646:quantum/quantum.c ****         // interval
 1142               		.loc 1 646 0
 1143 0038 E801      		movw r28,r16
 1144 003a 2196      		adiw r28,1
 1145               	.LVL121:
 1146               	.LBB33:
 648:quantum/quantum.c ****     }
 1147               		.loc 1 648 0
 1148 003c 8F2D      		mov r24,r15
 1149               	.LVL122:
 1150               	.L136:
 648:quantum/quantum.c ****     }
 1151               		.loc 1 648 0 is_stmt 0 discriminator 1
 1152               	.LVL123:
 1153 003e 8150      		subi r24,1
 1154 0040 00F0      		brcs .L138
 1155               	.LBB34:
 1156               	.LBB35:
 1157               		.loc 2 187 0 is_stmt 1
 1158 0042 EFE9      		ldi r30,lo8(3999)
 1159 0044 FFE0      		ldi r31,hi8(3999)
 1160 0046 3197      	1:	sbiw r30,1
 1161 0048 01F4      		brne 1b
 1162 004a 00C0      		rjmp .
 1163 004c 0000      		nop
 1164 004e 00C0      		rjmp .L136
 1165               	.LVL124:
 1166               	.L134:
 1167               	.LBE35:
 1168               	.LBE34:
 1169               	.LBE33:
 639:quantum/quantum.c ****           // up
 1170               		.loc 1 639 0
 1171 0050 8330      		cpi r24,lo8(3)
 1172 0052 01F4      		brne .L135
 1173               	.LVL125:
 1174               	.LBB36:
 642:quantum/quantum.c ****         } else {
 1175               		.loc 1 642 0
 1176 0054 8981      		ldd r24,Y+1
 1177               	.LVL126:
 1178 0056 00C0      		rjmp .L139
 1179               	.LVL127:
 1180               	.L135:
 1181               	.LBE36:
 644:quantum/quantum.c ****         }
 1182               		.loc 1 644 0
 1183 0058 0E94 0000 		call send_char
 1184               	.LVL128:
 1185 005c 8E01      		movw r16,r28
 1186 005e 00C0      		rjmp .L133
 1187               	.LVL129:
 1188               	.L130:
 1189               	/* epilogue start */
 1190               	.LBE29:
 650:quantum/quantum.c **** 
 1191               		.loc 1 650 0
 1192 0060 DF91      		pop r29
 1193 0062 CF91      		pop r28
 1194               	.LVL130:
 1195 0064 1F91      		pop r17
 1196 0066 0F91      		pop r16
 1197 0068 FF90      		pop r15
 1198               	.LVL131:
 1199 006a 0895      		ret
 1200               		.cfi_endproc
 1201               	.LFE124:
 1203               		.section	.text.send_string,"ax",@progbits
 1204               	.global	send_string
 1206               	send_string:
 1207               	.LFB122:
 618:quantum/quantum.c ****   send_string_with_delay(str, 0);
 1208               		.loc 1 618 0
 1209               		.cfi_startproc
 1210               	.LVL132:
 1211               	/* prologue: function */
 1212               	/* frame size = 0 */
 1213               	/* stack size = 0 */
 1214               	.L__stack_usage = 0
 619:quantum/quantum.c **** }
 1215               		.loc 1 619 0
 1216 0000 60E0      		ldi r22,0
 1217 0002 0C94 0000 		jmp send_string_with_delay
 1218               	.LVL133:
 1219               		.cfi_endproc
 1220               	.LFE122:
 1222               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1223               	.global	send_string_with_delay_P
 1225               	send_string_with_delay_P:
 1226               	.LFB125:
 652:quantum/quantum.c ****     while (1) {
 1227               		.loc 1 652 0
 1228               		.cfi_startproc
 1229               	.LVL134:
 1230 0000 FF92      		push r15
 1231               	.LCFI19:
 1232               		.cfi_def_cfa_offset 3
 1233               		.cfi_offset 15, -2
 1234 0002 0F93      		push r16
 1235               	.LCFI20:
 1236               		.cfi_def_cfa_offset 4
 1237               		.cfi_offset 16, -3
 1238 0004 1F93      		push r17
 1239               	.LCFI21:
 1240               		.cfi_def_cfa_offset 5
 1241               		.cfi_offset 17, -4
 1242 0006 CF93      		push r28
 1243               	.LCFI22:
 1244               		.cfi_def_cfa_offset 6
 1245               		.cfi_offset 28, -5
 1246 0008 DF93      		push r29
 1247               	.LCFI23:
 1248               		.cfi_def_cfa_offset 7
 1249               		.cfi_offset 29, -6
 1250               	/* prologue: function */
 1251               	/* frame size = 0 */
 1252               	/* stack size = 5 */
 1253               	.L__stack_usage = 5
 1254 000a 8C01      		movw r16,r24
 1255 000c F62E      		mov r15,r22
 1256               	.LVL135:
 1257               	.L149:
 1258               	.LBB37:
 1259               	.LBB38:
 654:quantum/quantum.c ****         if (!ascii_code) break;
 1260               		.loc 1 654 0
 1261 000e F801      		movw r30,r16
 1262               	/* #APP */
 1263               	 ;  654 "quantum/quantum.c" 1
 1264 0010 8491      		lpm r24, Z
 1265               		
 1266               	 ;  0 "" 2
 1267               	.LVL136:
 1268               	/* #NOAPP */
 1269               	.LBE38:
 655:quantum/quantum.c ****         if (ascii_code == 1) {
 1270               		.loc 1 655 0
 1271 0012 8823      		tst r24
 1272 0014 01F0      		breq .L141
 1273 0016 E801      		movw r28,r16
 1274 0018 2196      		adiw r28,1
 656:quantum/quantum.c ****           // tap
 1275               		.loc 1 656 0
 1276 001a 8130      		cpi r24,lo8(1)
 1277 001c 01F4      		brne .L143
 1278               	.LVL137:
 1279               	.LBB39:
 1280               	.LBB40:
 658:quantum/quantum.c ****           register_code(keycode);
 1281               		.loc 1 658 0
 1282 001e FE01      		movw r30,r28
 1283               	/* #APP */
 1284               	 ;  658 "quantum/quantum.c" 1
 1285 0020 1491      		lpm r17, Z
 1286               		
 1287               	 ;  0 "" 2
 1288               	.LVL138:
 1289               	/* #NOAPP */
 1290               	.LBE40:
 659:quantum/quantum.c ****           unregister_code(keycode);
 1291               		.loc 1 659 0
 1292 0022 812F      		mov r24,r17
 1293               	.LVL139:
 1294 0024 0E94 0000 		call register_code
 1295               	.LVL140:
 660:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1296               		.loc 1 660 0
 1297 0028 812F      		mov r24,r17
 1298               	.LVL141:
 1299               	.L150:
 1300               	.LBE39:
 1301               	.LBB41:
 668:quantum/quantum.c ****         } else {
 1302               		.loc 1 668 0
 1303 002a 0E94 0000 		call unregister_code
 1304               	.LVL142:
 1305               	.LBE41:
 1306 002e 00C0      		rjmp .L144
 1307               	.LVL143:
 1308               	.L143:
 661:quantum/quantum.c ****           // down
 1309               		.loc 1 661 0
 1310 0030 8230      		cpi r24,lo8(2)
 1311 0032 01F4      		brne .L145
 1312               	.LVL144:
 1313               	.LBB43:
 1314               	.LBB44:
 663:quantum/quantum.c ****           register_code(keycode);
 1315               		.loc 1 663 0
 1316 0034 FE01      		movw r30,r28
 1317               	/* #APP */
 1318               	 ;  663 "quantum/quantum.c" 1
 1319 0036 8491      		lpm r24, Z
 1320               		
 1321               	 ;  0 "" 2
 1322               	.LVL145:
 1323               	/* #NOAPP */
 1324               	.LBE44:
 664:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1325               		.loc 1 664 0
 1326 0038 0E94 0000 		call register_code
 1327               	.LVL146:
 1328               	.L144:
 1329               	.LBE43:
 672:quantum/quantum.c ****         // interval
 1330               		.loc 1 672 0
 1331 003c 8E01      		movw r16,r28
 1332 003e 0F5F      		subi r16,-1
 1333 0040 1F4F      		sbci r17,-1
 1334               	.LVL147:
 1335               	.LBB45:
 674:quantum/quantum.c ****     }
 1336               		.loc 1 674 0
 1337 0042 8F2D      		mov r24,r15
 1338               	.LVL148:
 1339               	.L147:
 674:quantum/quantum.c ****     }
 1340               		.loc 1 674 0 is_stmt 0 discriminator 1
 1341               	.LVL149:
 1342 0044 8150      		subi r24,1
 1343 0046 00F0      		brcs .L149
 1344               	.LBB46:
 1345               	.LBB47:
 1346               		.loc 2 187 0 is_stmt 1
 1347 0048 EFE9      		ldi r30,lo8(3999)
 1348 004a FFE0      		ldi r31,hi8(3999)
 1349 004c 3197      	1:	sbiw r30,1
 1350 004e 01F4      		brne 1b
 1351 0050 00C0      		rjmp .
 1352 0052 0000      		nop
 1353 0054 00C0      		rjmp .L147
 1354               	.LVL150:
 1355               	.L145:
 1356               	.LBE47:
 1357               	.LBE46:
 1358               	.LBE45:
 665:quantum/quantum.c ****           // up
 1359               		.loc 1 665 0
 1360 0056 8330      		cpi r24,lo8(3)
 1361 0058 01F4      		brne .L146
 1362               	.LVL151:
 1363               	.LBB48:
 1364               	.LBB42:
 667:quantum/quantum.c ****           unregister_code(keycode);
 1365               		.loc 1 667 0
 1366 005a FE01      		movw r30,r28
 1367               	/* #APP */
 1368               	 ;  667 "quantum/quantum.c" 1
 1369 005c 8491      		lpm r24, Z
 1370               		
 1371               	 ;  0 "" 2
 1372               	.LVL152:
 1373               	/* #NOAPP */
 1374 005e 00C0      		rjmp .L150
 1375               	.LVL153:
 1376               	.L146:
 1377               	.LBE42:
 1378               	.LBE48:
 670:quantum/quantum.c ****         }
 1379               		.loc 1 670 0
 1380 0060 0E94 0000 		call send_char
 1381               	.LVL154:
 1382 0064 E801      		movw r28,r16
 1383 0066 00C0      		rjmp .L144
 1384               	.LVL155:
 1385               	.L141:
 1386               	/* epilogue start */
 1387               	.LBE37:
 676:quantum/quantum.c **** 
 1388               		.loc 1 676 0
 1389 0068 DF91      		pop r29
 1390 006a CF91      		pop r28
 1391 006c 1F91      		pop r17
 1392 006e 0F91      		pop r16
 1393               	.LVL156:
 1394 0070 FF90      		pop r15
 1395               	.LVL157:
 1396 0072 0895      		ret
 1397               		.cfi_endproc
 1398               	.LFE125:
 1400               		.section	.text.send_string_P,"ax",@progbits
 1401               	.global	send_string_P
 1403               	send_string_P:
 1404               	.LFB123:
 622:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1405               		.loc 1 622 0
 1406               		.cfi_startproc
 1407               	.LVL158:
 1408               	/* prologue: function */
 1409               	/* frame size = 0 */
 1410               	/* stack size = 0 */
 1411               	.L__stack_usage = 0
 623:quantum/quantum.c **** }
 1412               		.loc 1 623 0
 1413 0000 60E0      		ldi r22,0
 1414 0002 0C94 0000 		jmp send_string_with_delay_P
 1415               	.LVL159:
 1416               		.cfi_endproc
 1417               	.LFE123:
 1419               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1420               	.global	set_single_persistent_default_layer
 1422               	set_single_persistent_default_layer:
 1423               	.LFB127:
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1424               		.loc 1 692 0
 1425               		.cfi_startproc
 1426               	.LVL160:
 1427 0000 CF93      		push r28
 1428               	.LCFI24:
 1429               		.cfi_def_cfa_offset 3
 1430               		.cfi_offset 28, -2
 1431 0002 DF93      		push r29
 1432               	.LCFI25:
 1433               		.cfi_def_cfa_offset 4
 1434               		.cfi_offset 29, -3
 1435               	/* prologue: function */
 1436               	/* frame size = 0 */
 1437               	/* stack size = 2 */
 1438               	.L__stack_usage = 2
 693:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 694:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 695:quantum/quantum.c ****   #endif
 696:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1439               		.loc 1 696 0
 1440 0004 C1E0      		ldi r28,lo8(1)
 1441 0006 D0E0      		ldi r29,0
 1442 0008 00C0      		rjmp 2f
 1443               		1:
 1444 000a CC0F      		lsl r28
 1445 000c DD1F      		rol r29
 1446               		2:
 1447 000e 8A95      		dec r24
 1448 0010 02F4      		brpl 1b
 1449 0012 8C2F      		mov r24,r28
 1450               	.LVL161:
 1451 0014 0E94 0000 		call eeconfig_update_default_layer
 1452               	.LVL162:
 697:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1453               		.loc 1 697 0
 1454 0018 BE01      		movw r22,r28
 1455 001a 90E0      		ldi r25,0
 1456 001c 80E0      		ldi r24,0
 1457               	/* epilogue start */
 698:quantum/quantum.c **** }
 1458               		.loc 1 698 0
 1459 001e DF91      		pop r29
 1460 0020 CF91      		pop r28
 697:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1461               		.loc 1 697 0
 1462 0022 0C94 0000 		jmp default_layer_set
 1463               	.LVL163:
 1464               		.cfi_endproc
 1465               	.LFE127:
 1467               		.section	.text.update_tri_layer,"ax",@progbits
 1468               	.global	update_tri_layer
 1470               	update_tri_layer:
 1471               	.LFB128:
 699:quantum/quantum.c **** 
 700:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1472               		.loc 1 700 0
 1473               		.cfi_startproc
 1474               	.LVL164:
 1475 0000 8F92      		push r8
 1476               	.LCFI26:
 1477               		.cfi_def_cfa_offset 3
 1478               		.cfi_offset 8, -2
 1479 0002 9F92      		push r9
 1480               	.LCFI27:
 1481               		.cfi_def_cfa_offset 4
 1482               		.cfi_offset 9, -3
 1483 0004 AF92      		push r10
 1484               	.LCFI28:
 1485               		.cfi_def_cfa_offset 5
 1486               		.cfi_offset 10, -4
 1487 0006 BF92      		push r11
 1488               	.LCFI29:
 1489               		.cfi_def_cfa_offset 6
 1490               		.cfi_offset 11, -5
 1491 0008 CF92      		push r12
 1492               	.LCFI30:
 1493               		.cfi_def_cfa_offset 7
 1494               		.cfi_offset 12, -6
 1495 000a DF92      		push r13
 1496               	.LCFI31:
 1497               		.cfi_def_cfa_offset 8
 1498               		.cfi_offset 13, -7
 1499 000c EF92      		push r14
 1500               	.LCFI32:
 1501               		.cfi_def_cfa_offset 9
 1502               		.cfi_offset 14, -8
 1503 000e FF92      		push r15
 1504               	.LCFI33:
 1505               		.cfi_def_cfa_offset 10
 1506               		.cfi_offset 15, -9
 1507 0010 0F93      		push r16
 1508               	.LCFI34:
 1509               		.cfi_def_cfa_offset 11
 1510               		.cfi_offset 16, -10
 1511 0012 1F93      		push r17
 1512               	.LCFI35:
 1513               		.cfi_def_cfa_offset 12
 1514               		.cfi_offset 17, -11
 1515               	/* prologue: function */
 1516               	/* frame size = 0 */
 1517               	/* stack size = 10 */
 1518               	.L__stack_usage = 10
 1519 0014 C12C      		mov r12,__zero_reg__
 1520 0016 D12C      		mov r13,__zero_reg__
 1521 0018 7601      		movw r14,r12
 1522 001a C394      		inc r12
 1523 001c 9701      		movw r18,r14
 1524 001e 8601      		movw r16,r12
 1525 0020 00C0      		rjmp 2f
 1526               		1:
 1527 0022 000F      		lsl r16
 1528 0024 111F      		rol r17
 1529 0026 221F      		rol r18
 1530 0028 331F      		rol r19
 1531               		2:
 1532 002a 6A95      		dec r22
 1533 002c 02F4      		brpl 1b
 1534 002e 4601      		movw r8,r12
 1535 0030 5701      		movw r10,r14
 1536 0032 00C0      		rjmp 2f
 1537               		1:
 1538 0034 880C      		lsl r8
 1539 0036 991C      		rol r9
 1540 0038 AA1C      		rol r10
 1541 003a BB1C      		rol r11
 1542               		2:
 1543 003c 8A95      		dec r24
 1544 003e 02F4      		brpl 1b
 1545 0040 D501      		movw r26,r10
 1546 0042 C401      		movw r24,r8
 1547               	.LVL165:
 1548 0044 802B      		or r24,r16
 1549 0046 912B      		or r25,r17
 1550 0048 A22B      		or r26,r18
 1551 004a B32B      		or r27,r19
 701:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1552               		.loc 1 701 0
 1553 004c 0091 0000 		lds r16,layer_state
 1554 0050 1091 0000 		lds r17,layer_state+1
 1555 0054 2091 0000 		lds r18,layer_state+2
 1556 0058 3091 0000 		lds r19,layer_state+3
 1557 005c 0823      		and r16,r24
 1558 005e 1923      		and r17,r25
 1559 0060 2A23      		and r18,r26
 1560 0062 3B23      		and r19,r27
 1561 0064 8017      		cp r24,r16
 1562 0066 9107      		cpc r25,r17
 1563 0068 A207      		cpc r26,r18
 1564 006a B307      		cpc r27,r19
 1565 006c 01F4      		brne .L154
 702:quantum/quantum.c ****     layer_on(layer3);
 1566               		.loc 1 702 0
 1567 006e 842F      		mov r24,r20
 1568               	/* epilogue start */
 703:quantum/quantum.c ****   } else {
 704:quantum/quantum.c ****     layer_off(layer3);
 705:quantum/quantum.c ****   }
 706:quantum/quantum.c **** }
 1569               		.loc 1 706 0
 1570 0070 1F91      		pop r17
 1571 0072 0F91      		pop r16
 1572 0074 FF90      		pop r15
 1573 0076 EF90      		pop r14
 1574 0078 DF90      		pop r13
 1575 007a CF90      		pop r12
 1576 007c BF90      		pop r11
 1577 007e AF90      		pop r10
 1578 0080 9F90      		pop r9
 1579 0082 8F90      		pop r8
 702:quantum/quantum.c ****     layer_on(layer3);
 1580               		.loc 1 702 0
 1581 0084 0C94 0000 		jmp layer_on
 1582               	.LVL166:
 1583               	.L154:
 704:quantum/quantum.c ****   }
 1584               		.loc 1 704 0
 1585 0088 842F      		mov r24,r20
 1586               	/* epilogue start */
 1587               		.loc 1 706 0
 1588 008a 1F91      		pop r17
 1589 008c 0F91      		pop r16
 1590 008e FF90      		pop r15
 1591 0090 EF90      		pop r14
 1592 0092 DF90      		pop r13
 1593 0094 CF90      		pop r12
 1594 0096 BF90      		pop r11
 1595 0098 AF90      		pop r10
 1596 009a 9F90      		pop r9
 1597 009c 8F90      		pop r8
 704:quantum/quantum.c ****   }
 1598               		.loc 1 704 0
 1599 009e 0C94 0000 		jmp layer_off
 1600               	.LVL167:
 1601               		.cfi_endproc
 1602               	.LFE128:
 1604               		.section	.text.tap_random_base64,"ax",@progbits
 1605               	.global	tap_random_base64
 1607               	tap_random_base64:
 1608               	.LFB129:
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void tap_random_base64(void) {
 1609               		.loc 1 708 0
 1610               		.cfi_startproc
 1611 0000 CF93      		push r28
 1612               	.LCFI36:
 1613               		.cfi_def_cfa_offset 3
 1614               		.cfi_offset 28, -2
 1615 0002 DF93      		push r29
 1616               	.LCFI37:
 1617               		.cfi_def_cfa_offset 4
 1618               		.cfi_offset 29, -3
 1619               	/* prologue: function */
 1620               	/* frame size = 0 */
 1621               	/* stack size = 2 */
 1622               	.L__stack_usage = 2
 709:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 710:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1623               		.loc 1 710 0
 1624 0004 46B5      		in r20,0x26
 1625 0006 2091 8400 		lds r18,132
 1626 000a 3091 8500 		lds r19,132+1
 1627 000e C091 9400 		lds r28,148
 1628 0012 D091 9500 		lds r29,148+1
 1629 0016 8091 BE00 		lds r24,190
 1630 001a 9091 BF00 		lds r25,190+1
 1631 001e C20F      		add r28,r18
 1632 0020 C40F      		add r28,r20
 1633 0022 C80F      		add r28,r24
 1634 0024 CF73      		andi r28,lo8(63)
 1635               	.LVL168:
 711:quantum/quantum.c ****   #else
 712:quantum/quantum.c ****     uint8_t key = rand() % 64;
 713:quantum/quantum.c ****   #endif
 714:quantum/quantum.c ****   switch (key) {
 1636               		.loc 1 714 0
 1637 0026 CE33      		cpi r28,lo8(62)
 1638 0028 00F4      		brsh .L157
 1639 002a C533      		cpi r28,lo8(53)
 1640 002c 00F4      		brsh .L158
 1641 002e CA31      		cpi r28,lo8(26)
 1642 0030 00F0      		brlo .L156
 1643 0032 C433      		cpi r28,lo8(52)
 1644 0034 00F4      		brsh .L163
 715:quantum/quantum.c ****     case 0 ... 25:
 716:quantum/quantum.c ****       register_code(KC_LSFT);
 717:quantum/quantum.c ****       register_code(key + KC_A);
 718:quantum/quantum.c ****       unregister_code(key + KC_A);
 719:quantum/quantum.c ****       unregister_code(KC_LSFT);
 720:quantum/quantum.c ****       break;
 721:quantum/quantum.c ****     case 26 ... 51:
 722:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1645               		.loc 1 722 0
 1646 0036 C651      		subi r28,lo8(-(-22))
 1647               	.LVL169:
 1648               	.L166:
 723:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 724:quantum/quantum.c ****       break;
 725:quantum/quantum.c ****     case 52:
 726:quantum/quantum.c ****       register_code(KC_0);
 727:quantum/quantum.c ****       unregister_code(KC_0);
 728:quantum/quantum.c ****       break;
 729:quantum/quantum.c ****     case 53 ... 61:
 730:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1649               		.loc 1 730 0
 1650 0038 8C2F      		mov r24,r28
 1651 003a 0E94 0000 		call register_code
 1652               	.LVL170:
 731:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1653               		.loc 1 731 0
 1654 003e 8C2F      		mov r24,r28
 1655 0040 00C0      		rjmp .L164
 1656               	.LVL171:
 1657               	.L157:
 714:quantum/quantum.c ****     case 0 ... 25:
 1658               		.loc 1 714 0
 1659 0042 CE33      		cpi r28,lo8(62)
 1660 0044 01F0      		breq .L161
 1661 0046 CF33      		cpi r28,lo8(63)
 1662 0048 01F0      		breq .L162
 1663               	.L156:
 716:quantum/quantum.c ****       register_code(key + KC_A);
 1664               		.loc 1 716 0
 1665 004a 81EE      		ldi r24,lo8(-31)
 1666 004c 0E94 0000 		call register_code
 1667               	.LVL172:
 717:quantum/quantum.c ****       unregister_code(key + KC_A);
 1668               		.loc 1 717 0
 1669 0050 CC5F      		subi r28,lo8(-(4))
 1670               	.LVL173:
 1671 0052 8C2F      		mov r24,r28
 1672 0054 0E94 0000 		call register_code
 1673               	.LVL174:
 718:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1674               		.loc 1 718 0
 1675 0058 8C2F      		mov r24,r28
 1676               	.LVL175:
 1677               	.L165:
 732:quantum/quantum.c ****       break;
 733:quantum/quantum.c ****     case 62:
 734:quantum/quantum.c ****       register_code(KC_LSFT);
 735:quantum/quantum.c ****       register_code(KC_EQL);
 736:quantum/quantum.c ****       unregister_code(KC_EQL);
 1678               		.loc 1 736 0
 1679 005a 0E94 0000 		call unregister_code
 1680               	.LVL176:
 737:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1681               		.loc 1 737 0
 1682 005e 81EE      		ldi r24,lo8(-31)
 1683 0060 00C0      		rjmp .L164
 1684               	.LVL177:
 1685               	.L163:
 726:quantum/quantum.c ****       unregister_code(KC_0);
 1686               		.loc 1 726 0
 1687 0062 87E2      		ldi r24,lo8(39)
 1688 0064 0E94 0000 		call register_code
 1689               	.LVL178:
 727:quantum/quantum.c ****       break;
 1690               		.loc 1 727 0
 1691 0068 87E2      		ldi r24,lo8(39)
 1692               	.LVL179:
 1693               	.L164:
 1694               	/* epilogue start */
 738:quantum/quantum.c ****       break;
 739:quantum/quantum.c ****     case 63:
 740:quantum/quantum.c ****       register_code(KC_SLSH);
 741:quantum/quantum.c ****       unregister_code(KC_SLSH);
 742:quantum/quantum.c ****       break;
 743:quantum/quantum.c ****   }
 744:quantum/quantum.c **** }
 1695               		.loc 1 744 0
 1696 006a DF91      		pop r29
 1697 006c CF91      		pop r28
 741:quantum/quantum.c ****       break;
 1698               		.loc 1 741 0
 1699 006e 0C94 0000 		jmp unregister_code
 1700               	.LVL180:
 1701               	.L158:
 730:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1702               		.loc 1 730 0
 1703 0072 C751      		subi r28,lo8(-(-23))
 1704               	.LVL181:
 1705 0074 00C0      		rjmp .L166
 1706               	.LVL182:
 1707               	.L161:
 734:quantum/quantum.c ****       register_code(KC_EQL);
 1708               		.loc 1 734 0
 1709 0076 81EE      		ldi r24,lo8(-31)
 1710 0078 0E94 0000 		call register_code
 1711               	.LVL183:
 735:quantum/quantum.c ****       unregister_code(KC_EQL);
 1712               		.loc 1 735 0
 1713 007c 8EE2      		ldi r24,lo8(46)
 1714 007e 0E94 0000 		call register_code
 1715               	.LVL184:
 736:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1716               		.loc 1 736 0
 1717 0082 8EE2      		ldi r24,lo8(46)
 1718 0084 00C0      		rjmp .L165
 1719               	.L162:
 740:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1720               		.loc 1 740 0
 1721 0086 88E3      		ldi r24,lo8(56)
 1722 0088 0E94 0000 		call register_code
 1723               	.LVL185:
 741:quantum/quantum.c ****       break;
 1724               		.loc 1 741 0
 1725 008c 88E3      		ldi r24,lo8(56)
 1726 008e 00C0      		rjmp .L164
 1727               		.cfi_endproc
 1728               	.LFE129:
 1730               		.section	.text.matrix_init_quantum,"ax",@progbits
 1731               	.global	matrix_init_quantum
 1733               	matrix_init_quantum:
 1734               	.LFB130:
 745:quantum/quantum.c **** 
 746:quantum/quantum.c **** void matrix_init_quantum() {
 1735               		.loc 1 746 0
 1736               		.cfi_startproc
 1737               	/* prologue: function */
 1738               	/* frame size = 0 */
 1739               	/* stack size = 0 */
 1740               	.L__stack_usage = 0
 747:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 748:quantum/quantum.c ****     backlight_init_ports();
 749:quantum/quantum.c ****   #endif
 750:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 751:quantum/quantum.c ****     audio_init();
 752:quantum/quantum.c ****   #endif
 753:quantum/quantum.c ****   matrix_init_kb();
 1741               		.loc 1 753 0
 1742 0000 0C94 0000 		jmp matrix_init_kb
 1743               	.LVL186:
 1744               		.cfi_endproc
 1745               	.LFE130:
 1747               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1748               	.global	matrix_scan_quantum
 1750               	matrix_scan_quantum:
 1751               	.LFB131:
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void matrix_scan_quantum() {
 1752               		.loc 1 756 0
 1753               		.cfi_startproc
 1754               	/* prologue: function */
 1755               	/* frame size = 0 */
 1756               	/* stack size = 0 */
 1757               	.L__stack_usage = 0
 757:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 758:quantum/quantum.c ****     matrix_scan_music();
 759:quantum/quantum.c ****   #endif
 760:quantum/quantum.c **** 
 761:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 762:quantum/quantum.c ****     matrix_scan_tap_dance();
 1758               		.loc 1 762 0
 1759 0000 0E94 0000 		call matrix_scan_tap_dance
 1760               	.LVL187:
 763:quantum/quantum.c ****   #endif
 764:quantum/quantum.c **** 
 765:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 766:quantum/quantum.c ****     matrix_scan_combo();
 767:quantum/quantum.c ****   #endif
 768:quantum/quantum.c **** 
 769:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 770:quantum/quantum.c ****     backlight_task();
 771:quantum/quantum.c ****   #endif
 772:quantum/quantum.c **** 
 773:quantum/quantum.c ****   matrix_scan_kb();
 1761               		.loc 1 773 0
 1762 0004 0C94 0000 		jmp matrix_scan_kb
 1763               	.LVL188:
 1764               		.cfi_endproc
 1765               	.LFE131:
 1767               		.section	.text.backlight_init_ports,"ax",@progbits
 1768               		.weak	backlight_init_ports
 1770               	backlight_init_ports:
 1771               	.LFB151:
 1772               		.cfi_startproc
 1773               	/* prologue: function */
 1774               	/* frame size = 0 */
 1775               	/* stack size = 0 */
 1776               	.L__stack_usage = 0
 1777               	/* epilogue start */
 1778 0000 0895      		ret
 1779               		.cfi_endproc
 1780               	.LFE151:
 1782               		.section	.text.send_nibble,"ax",@progbits
 1783               	.global	send_nibble
 1785               	send_nibble:
 1786               	.LFB137:
 774:quantum/quantum.c **** }
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 777:quantum/quantum.c **** 
 778:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 781:quantum/quantum.c **** #  define COM1x1 COM1C1
 782:quantum/quantum.c **** #  define OCR1x  OCR1C
 783:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 784:quantum/quantum.c **** #  define COM1x1 COM1B1
 785:quantum/quantum.c **** #  define OCR1x  OCR1B
 786:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 787:quantum/quantum.c **** #  define COM1x1 COM1A1
 788:quantum/quantum.c **** #  define OCR1x  OCR1A
 789:quantum/quantum.c **** #else
 790:quantum/quantum.c **** #  define NO_BACKLIGHT_CLOCK
 791:quantum/quantum.c **** #endif
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 794:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 795:quantum/quantum.c **** #endif
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** __attribute__ ((weak))
 798:quantum/quantum.c **** void backlight_init_ports(void)
 799:quantum/quantum.c **** {
 800:quantum/quantum.c **** 
 801:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 802:quantum/quantum.c ****   // DDRx |= n
 803:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 804:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 805:quantum/quantum.c ****     // PORTx &= ~n
 806:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 807:quantum/quantum.c ****   #else
 808:quantum/quantum.c ****     // PORTx |= n
 809:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 810:quantum/quantum.c ****   #endif
 811:quantum/quantum.c **** 
 812:quantum/quantum.c ****   #ifndef NO_BACKLIGHT_CLOCK
 813:quantum/quantum.c ****     // Use full 16-bit resolution.
 814:quantum/quantum.c ****     ICR1 = 0xFFFF;
 815:quantum/quantum.c **** 
 816:quantum/quantum.c ****     // I could write a wall of text here to explain... but TL;DW
 817:quantum/quantum.c ****     // Go read the ATmega32u4 datasheet.
 818:quantum/quantum.c ****     // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolut
 819:quantum/quantum.c **** 
 820:quantum/quantum.c ****     // Pin PB7 = OCR1C (Timer 1, Channel C)
 821:quantum/quantum.c ****     // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 822:quantum/quantum.c ****     // (i.e. start high, go low when counter matches.)
 823:quantum/quantum.c ****     // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 824:quantum/quantum.c ****     // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 825:quantum/quantum.c **** 
 826:quantum/quantum.c ****     TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 827:quantum/quantum.c ****     TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 828:quantum/quantum.c ****   #endif
 829:quantum/quantum.c **** 
 830:quantum/quantum.c ****   backlight_init();
 831:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 832:quantum/quantum.c ****     breathing_defaults();
 833:quantum/quantum.c ****   #endif
 834:quantum/quantum.c **** }
 835:quantum/quantum.c **** 
 836:quantum/quantum.c **** __attribute__ ((weak))
 837:quantum/quantum.c **** void backlight_set(uint8_t level)
 838:quantum/quantum.c **** {
 839:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 840:quantum/quantum.c ****   // #if BACKLIGHT_ON_STATE == 0
 841:quantum/quantum.c ****   //   // PORTx &= ~n
 842:quantum/quantum.c ****   //   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 843:quantum/quantum.c ****   // #else
 844:quantum/quantum.c ****   //   // PORTx |= n
 845:quantum/quantum.c ****   //   _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 846:quantum/quantum.c ****   // #endif
 847:quantum/quantum.c **** 
 848:quantum/quantum.c ****   if ( level == 0 ) {
 849:quantum/quantum.c ****     #ifndef NO_BACKLIGHT_CLOCK
 850:quantum/quantum.c ****       // Turn off PWM control on backlight pin, revert to output low.
 851:quantum/quantum.c ****       TCCR1A &= ~(_BV(COM1x1));
 852:quantum/quantum.c ****       OCR1x = 0x0;
 853:quantum/quantum.c ****     #else
 854:quantum/quantum.c ****       // #if BACKLIGHT_ON_STATE == 0
 855:quantum/quantum.c ****       //   // PORTx |= n
 856:quantum/quantum.c ****       //   _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 857:quantum/quantum.c ****       // #else
 858:quantum/quantum.c ****       //   // PORTx &= ~n
 859:quantum/quantum.c ****       //   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 860:quantum/quantum.c ****       // #endif
 861:quantum/quantum.c ****     #endif
 862:quantum/quantum.c ****   }
 863:quantum/quantum.c ****   #ifndef NO_BACKLIGHT_CLOCK
 864:quantum/quantum.c ****     else if ( level == BACKLIGHT_LEVELS ) {
 865:quantum/quantum.c ****       // Turn on PWM control of backlight pin
 866:quantum/quantum.c ****       TCCR1A |= _BV(COM1x1);
 867:quantum/quantum.c ****       // Set the brightness
 868:quantum/quantum.c ****       OCR1x = 0xFFFF;
 869:quantum/quantum.c ****     }
 870:quantum/quantum.c ****     else {
 871:quantum/quantum.c ****       // Turn on PWM control of backlight pin
 872:quantum/quantum.c ****       TCCR1A |= _BV(COM1x1);
 873:quantum/quantum.c ****       // Set the brightness
 874:quantum/quantum.c ****       OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 875:quantum/quantum.c ****     }
 876:quantum/quantum.c ****   #endif
 877:quantum/quantum.c **** 
 878:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 879:quantum/quantum.c ****     breathing_intensity_default();
 880:quantum/quantum.c ****   #endif
 881:quantum/quantum.c **** }
 882:quantum/quantum.c **** 
 883:quantum/quantum.c **** uint8_t backlight_tick = 0;
 884:quantum/quantum.c **** 
 885:quantum/quantum.c **** void backlight_task(void) {
 886:quantum/quantum.c ****   #ifdef NO_BACKLIGHT_CLOCK
 887:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - backlight_config.level) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1
 888:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 889:quantum/quantum.c ****       // PORTx &= ~n
 890:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 891:quantum/quantum.c ****     #else
 892:quantum/quantum.c ****       // PORTx |= n
 893:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 894:quantum/quantum.c ****     #endif
 895:quantum/quantum.c ****   } else {
 896:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 897:quantum/quantum.c ****       // PORTx |= n
 898:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 899:quantum/quantum.c ****     #else
 900:quantum/quantum.c ****       // PORTx &= ~n
 901:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 902:quantum/quantum.c ****     #endif
 903:quantum/quantum.c ****   }
 904:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 905:quantum/quantum.c ****   #endif
 906:quantum/quantum.c **** }
 907:quantum/quantum.c **** 
 908:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 909:quantum/quantum.c **** 
 910:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 911:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 912:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 913:quantum/quantum.c **** 
 914:quantum/quantum.c **** static uint8_t breath_intensity;
 915:quantum/quantum.c **** static uint8_t breath_speed;
 916:quantum/quantum.c **** static uint16_t breathing_index;
 917:quantum/quantum.c **** static uint8_t breathing_halt;
 918:quantum/quantum.c **** 
 919:quantum/quantum.c **** void breathing_enable(void)
 920:quantum/quantum.c **** {
 921:quantum/quantum.c ****     if (get_backlight_level() == 0)
 922:quantum/quantum.c ****     {
 923:quantum/quantum.c ****         breathing_index = 0;
 924:quantum/quantum.c ****     }
 925:quantum/quantum.c ****     else
 926:quantum/quantum.c ****     {
 927:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 928:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 929:quantum/quantum.c ****     }
 930:quantum/quantum.c **** 
 931:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 932:quantum/quantum.c **** 
 933:quantum/quantum.c ****     // Enable breathing interrupt
 934:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 935:quantum/quantum.c **** }
 936:quantum/quantum.c **** 
 937:quantum/quantum.c **** void breathing_pulse(void)
 938:quantum/quantum.c **** {
 939:quantum/quantum.c ****     if (get_backlight_level() == 0)
 940:quantum/quantum.c ****     {
 941:quantum/quantum.c ****         breathing_index = 0;
 942:quantum/quantum.c ****     }
 943:quantum/quantum.c ****     else
 944:quantum/quantum.c ****     {
 945:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 946:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 947:quantum/quantum.c ****     }
 948:quantum/quantum.c **** 
 949:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 950:quantum/quantum.c **** 
 951:quantum/quantum.c ****     // Enable breathing interrupt
 952:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 953:quantum/quantum.c **** }
 954:quantum/quantum.c **** 
 955:quantum/quantum.c **** void breathing_disable(void)
 956:quantum/quantum.c **** {
 957:quantum/quantum.c ****     // Disable breathing interrupt
 958:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 959:quantum/quantum.c ****     backlight_set(get_backlight_level());
 960:quantum/quantum.c **** }
 961:quantum/quantum.c **** 
 962:quantum/quantum.c **** void breathing_self_disable(void)
 963:quantum/quantum.c **** {
 964:quantum/quantum.c ****     if (get_backlight_level() == 0)
 965:quantum/quantum.c ****     {
 966:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 967:quantum/quantum.c ****     }
 968:quantum/quantum.c ****     else
 969:quantum/quantum.c ****     {
 970:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 971:quantum/quantum.c ****     }
 972:quantum/quantum.c **** 
 973:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 974:quantum/quantum.c **** }
 975:quantum/quantum.c **** 
 976:quantum/quantum.c **** void breathing_toggle(void)
 977:quantum/quantum.c **** {
 978:quantum/quantum.c ****     if (!is_breathing())
 979:quantum/quantum.c ****     {
 980:quantum/quantum.c ****         if (get_backlight_level() == 0)
 981:quantum/quantum.c ****         {
 982:quantum/quantum.c ****             breathing_index = 0;
 983:quantum/quantum.c ****         }
 984:quantum/quantum.c ****         else
 985:quantum/quantum.c ****         {
 986:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 987:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 988:quantum/quantum.c ****         }
 989:quantum/quantum.c **** 
 990:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 991:quantum/quantum.c ****     }
 992:quantum/quantum.c **** 
 993:quantum/quantum.c ****     // Toggle breathing interrupt
 994:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 995:quantum/quantum.c **** 
 996:quantum/quantum.c ****     // Restore backlight level
 997:quantum/quantum.c ****     if (!is_breathing())
 998:quantum/quantum.c ****     {
 999:quantum/quantum.c ****         backlight_set(get_backlight_level());
1000:quantum/quantum.c ****     }
1001:quantum/quantum.c **** }
1002:quantum/quantum.c **** 
1003:quantum/quantum.c **** bool is_breathing(void)
1004:quantum/quantum.c **** {
1005:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
1006:quantum/quantum.c **** }
1007:quantum/quantum.c **** 
1008:quantum/quantum.c **** void breathing_intensity_default(void)
1009:quantum/quantum.c **** {
1010:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
1011:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
1012:quantum/quantum.c **** }
1013:quantum/quantum.c **** 
1014:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
1015:quantum/quantum.c **** {
1016:quantum/quantum.c ****     breath_intensity = value;
1017:quantum/quantum.c **** }
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** void breathing_speed_default(void)
1020:quantum/quantum.c **** {
1021:quantum/quantum.c ****     breath_speed = 4;
1022:quantum/quantum.c **** }
1023:quantum/quantum.c **** 
1024:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
1025:quantum/quantum.c **** {
1026:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
1027:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
1028:quantum/quantum.c **** 
1029:quantum/quantum.c ****     if (is_breathing_now)
1030:quantum/quantum.c ****     {
1031:quantum/quantum.c ****         // Disable breathing interrupt
1032:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
1033:quantum/quantum.c ****     }
1034:quantum/quantum.c **** 
1035:quantum/quantum.c ****     breath_speed = value;
1036:quantum/quantum.c **** 
1037:quantum/quantum.c ****     if (is_breathing_now)
1038:quantum/quantum.c ****     {
1039:quantum/quantum.c ****         // Adjust index to account for new speed
1040:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
1041:quantum/quantum.c **** 
1042:quantum/quantum.c ****         // Enable breathing interrupt
1043:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
1044:quantum/quantum.c ****     }
1045:quantum/quantum.c **** 
1046:quantum/quantum.c **** }
1047:quantum/quantum.c **** 
1048:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
1049:quantum/quantum.c **** {
1050:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
1051:quantum/quantum.c ****     {
1052:quantum/quantum.c ****         breathing_speed_set(0);
1053:quantum/quantum.c ****     }
1054:quantum/quantum.c ****     else
1055:quantum/quantum.c ****     {
1056:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
1057:quantum/quantum.c ****     }
1058:quantum/quantum.c **** }
1059:quantum/quantum.c **** 
1060:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
1061:quantum/quantum.c **** {
1062:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
1063:quantum/quantum.c ****     {
1064:quantum/quantum.c ****         breathing_speed_set(10);
1065:quantum/quantum.c ****     }
1066:quantum/quantum.c ****     else
1067:quantum/quantum.c ****     {
1068:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
1069:quantum/quantum.c ****     }
1070:quantum/quantum.c **** }
1071:quantum/quantum.c **** 
1072:quantum/quantum.c **** void breathing_defaults(void)
1073:quantum/quantum.c **** {
1074:quantum/quantum.c ****     breathing_intensity_default();
1075:quantum/quantum.c ****     breathing_speed_default();
1076:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
1077:quantum/quantum.c **** }
1078:quantum/quantum.c **** 
1079:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
1080:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
1081:quantum/quantum.c ****  *
1082:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
1083:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
1084:quantum/quantum.c ****  */
1085:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
1086:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
1087:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
1088:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
1089:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
1090:quantum/quantum.c **** };
1091:quantum/quantum.c **** 
1092:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
1093:quantum/quantum.c **** {
1094:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
1095:quantum/quantum.c **** 
1096:quantum/quantum.c **** 
1097:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
1098:quantum/quantum.c **** 
1099:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
1100:quantum/quantum.c ****     {
1101:quantum/quantum.c ****         // Disable breathing interrupt
1102:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
1103:quantum/quantum.c ****     }
1104:quantum/quantum.c **** 
1105:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
1106:quantum/quantum.c **** 
1107:quantum/quantum.c **** }
1108:quantum/quantum.c **** 
1109:quantum/quantum.c **** #endif // breathing
1110:quantum/quantum.c **** 
1111:quantum/quantum.c **** #else // backlight
1112:quantum/quantum.c **** 
1113:quantum/quantum.c **** __attribute__ ((weak))
1114:quantum/quantum.c **** void backlight_init_ports(void)
1115:quantum/quantum.c **** {
1116:quantum/quantum.c **** 
1117:quantum/quantum.c **** }
1118:quantum/quantum.c **** 
1119:quantum/quantum.c **** __attribute__ ((weak))
1120:quantum/quantum.c **** void backlight_set(uint8_t level)
1121:quantum/quantum.c **** {
1122:quantum/quantum.c **** 
1123:quantum/quantum.c **** }
1124:quantum/quantum.c **** 
1125:quantum/quantum.c **** #endif // backlight
1126:quantum/quantum.c **** 
1127:quantum/quantum.c **** 
1128:quantum/quantum.c **** // Functions for spitting out values
1129:quantum/quantum.c **** //
1130:quantum/quantum.c **** 
1131:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1132:quantum/quantum.c ****     uint16_t word = (number >> 16);
1133:quantum/quantum.c ****     send_word(word);
1134:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1135:quantum/quantum.c **** }
1136:quantum/quantum.c **** 
1137:quantum/quantum.c **** void send_word(uint16_t number) {
1138:quantum/quantum.c ****     uint8_t byte = number >> 8;
1139:quantum/quantum.c ****     send_byte(byte);
1140:quantum/quantum.c ****     send_byte(number & 0xFF);
1141:quantum/quantum.c **** }
1142:quantum/quantum.c **** 
1143:quantum/quantum.c **** void send_byte(uint8_t number) {
1144:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1145:quantum/quantum.c ****     send_nibble(nibble);
1146:quantum/quantum.c ****     send_nibble(number & 0xF);
1147:quantum/quantum.c **** }
1148:quantum/quantum.c **** 
1149:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1787               		.loc 1 1149 0
 1788               		.cfi_startproc
 1789               	.LVL189:
 1790               		.loc 1 1149 0
 1791 0000 CF93      		push r28
 1792               	.LCFI38:
 1793               		.cfi_def_cfa_offset 3
 1794               		.cfi_offset 28, -2
 1795               	/* prologue: function */
 1796               	/* frame size = 0 */
 1797               	/* stack size = 1 */
 1798               	.L__stack_usage = 1
1150:quantum/quantum.c ****     switch (number) {
 1799               		.loc 1 1150 0
 1800 0002 8A30      		cpi r24,lo8(10)
 1801 0004 00F4      		brsh .L172
 1802 0006 8130      		cpi r24,lo8(1)
 1803 0008 00F0      		brlo .L176
1151:quantum/quantum.c ****         case 0:
1152:quantum/quantum.c ****             register_code(KC_0);
1153:quantum/quantum.c ****             unregister_code(KC_0);
1154:quantum/quantum.c ****             break;
1155:quantum/quantum.c ****         case 1 ... 9:
1156:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1804               		.loc 1 1156 0
 1805 000a CDE1      		ldi r28,lo8(29)
 1806               	.L179:
1157:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1158:quantum/quantum.c ****             break;
1159:quantum/quantum.c ****         case 0xA ... 0xF:
1160:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1807               		.loc 1 1160 0
 1808 000c C80F      		add r28,r24
 1809 000e 8C2F      		mov r24,r28
 1810               	.LVL190:
 1811 0010 0E94 0000 		call register_code
 1812               	.LVL191:
1161:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1813               		.loc 1 1161 0
 1814 0014 8C2F      		mov r24,r28
 1815 0016 00C0      		rjmp .L178
 1816               	.LVL192:
 1817               	.L172:
1160:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1818               		.loc 1 1160 0
 1819 0018 CAEF      		ldi r28,lo8(-6)
1150:quantum/quantum.c ****         case 0:
 1820               		.loc 1 1150 0
 1821 001a 8031      		cpi r24,lo8(16)
 1822 001c 00F0      		brlo .L179
 1823               	/* epilogue start */
1162:quantum/quantum.c ****             break;
1163:quantum/quantum.c ****     }
1164:quantum/quantum.c **** }
 1824               		.loc 1 1164 0
 1825 001e CF91      		pop r28
 1826 0020 0895      		ret
 1827               	.L176:
1152:quantum/quantum.c ****             unregister_code(KC_0);
 1828               		.loc 1 1152 0
 1829 0022 87E2      		ldi r24,lo8(39)
 1830               	.LVL193:
 1831 0024 0E94 0000 		call register_code
 1832               	.LVL194:
1153:quantum/quantum.c ****             break;
 1833               		.loc 1 1153 0
 1834 0028 87E2      		ldi r24,lo8(39)
 1835               	.L178:
 1836               	/* epilogue start */
 1837               		.loc 1 1164 0
 1838 002a CF91      		pop r28
1161:quantum/quantum.c ****             break;
 1839               		.loc 1 1161 0
 1840 002c 0C94 0000 		jmp unregister_code
 1841               	.LVL195:
 1842               		.cfi_endproc
 1843               	.LFE137:
 1845               		.section	.text.send_byte,"ax",@progbits
 1846               	.global	send_byte
 1848               	send_byte:
 1849               	.LFB136:
1143:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1850               		.loc 1 1143 0
 1851               		.cfi_startproc
 1852               	.LVL196:
 1853 0000 CF93      		push r28
 1854               	.LCFI39:
 1855               		.cfi_def_cfa_offset 3
 1856               		.cfi_offset 28, -2
 1857               	/* prologue: function */
 1858               	/* frame size = 0 */
 1859               	/* stack size = 1 */
 1860               	.L__stack_usage = 1
 1861 0002 C82F      		mov r28,r24
 1862               	.LVL197:
1145:quantum/quantum.c ****     send_nibble(number & 0xF);
 1863               		.loc 1 1145 0
 1864 0004 8295      		swap r24
 1865               	.LVL198:
 1866 0006 8F70      		andi r24,lo8(15)
 1867 0008 0E94 0000 		call send_nibble
 1868               	.LVL199:
1146:quantum/quantum.c **** }
 1869               		.loc 1 1146 0
 1870 000c 8C2F      		mov r24,r28
 1871 000e 8F70      		andi r24,lo8(15)
 1872               	/* epilogue start */
1147:quantum/quantum.c **** 
 1873               		.loc 1 1147 0
 1874 0010 CF91      		pop r28
 1875               	.LVL200:
1146:quantum/quantum.c **** }
 1876               		.loc 1 1146 0
 1877 0012 0C94 0000 		jmp send_nibble
 1878               	.LVL201:
 1879               		.cfi_endproc
 1880               	.LFE136:
 1882               		.section	.text.send_word,"ax",@progbits
 1883               	.global	send_word
 1885               	send_word:
 1886               	.LFB135:
1137:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1887               		.loc 1 1137 0
 1888               		.cfi_startproc
 1889               	.LVL202:
 1890 0000 CF93      		push r28
 1891               	.LCFI40:
 1892               		.cfi_def_cfa_offset 3
 1893               		.cfi_offset 28, -2
 1894               	/* prologue: function */
 1895               	/* frame size = 0 */
 1896               	/* stack size = 1 */
 1897               	.L__stack_usage = 1
 1898 0002 C82F      		mov r28,r24
 1899               	.LVL203:
1139:quantum/quantum.c ****     send_byte(number & 0xFF);
 1900               		.loc 1 1139 0
 1901 0004 892F      		mov r24,r25
 1902               	.LVL204:
 1903 0006 0E94 0000 		call send_byte
 1904               	.LVL205:
1140:quantum/quantum.c **** }
 1905               		.loc 1 1140 0
 1906 000a 8C2F      		mov r24,r28
 1907               	/* epilogue start */
1141:quantum/quantum.c **** 
 1908               		.loc 1 1141 0
 1909 000c CF91      		pop r28
1140:quantum/quantum.c **** }
 1910               		.loc 1 1140 0
 1911 000e 0C94 0000 		jmp send_byte
 1912               	.LVL206:
 1913               		.cfi_endproc
 1914               	.LFE135:
 1916               		.section	.text.send_dword,"ax",@progbits
 1917               	.global	send_dword
 1919               	send_dword:
 1920               	.LFB134:
1131:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1921               		.loc 1 1131 0
 1922               		.cfi_startproc
 1923               	.LVL207:
 1924 0000 CF92      		push r12
 1925               	.LCFI41:
 1926               		.cfi_def_cfa_offset 3
 1927               		.cfi_offset 12, -2
 1928 0002 DF92      		push r13
 1929               	.LCFI42:
 1930               		.cfi_def_cfa_offset 4
 1931               		.cfi_offset 13, -3
 1932 0004 EF92      		push r14
 1933               	.LCFI43:
 1934               		.cfi_def_cfa_offset 5
 1935               		.cfi_offset 14, -4
 1936 0006 FF92      		push r15
 1937               	.LCFI44:
 1938               		.cfi_def_cfa_offset 6
 1939               		.cfi_offset 15, -5
 1940               	/* prologue: function */
 1941               	/* frame size = 0 */
 1942               	/* stack size = 4 */
 1943               	.L__stack_usage = 4
 1944 0008 6B01      		movw r12,r22
1133:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1945               		.loc 1 1133 0
 1946 000a 0E94 0000 		call send_word
 1947               	.LVL208:
1134:quantum/quantum.c **** }
 1948               		.loc 1 1134 0
 1949 000e C601      		movw r24,r12
 1950               	/* epilogue start */
1135:quantum/quantum.c **** 
 1951               		.loc 1 1135 0
 1952 0010 FF90      		pop r15
 1953 0012 EF90      		pop r14
 1954 0014 DF90      		pop r13
 1955 0016 CF90      		pop r12
1134:quantum/quantum.c **** }
 1956               		.loc 1 1134 0
 1957 0018 0C94 0000 		jmp send_word
 1958               	.LVL209:
 1959               		.cfi_endproc
 1960               	.LFE134:
 1962               		.section	.text.hex_to_keycode,"ax",@progbits
 1963               		.weak	hex_to_keycode
 1965               	hex_to_keycode:
 1966               	.LFB138:
1165:quantum/quantum.c **** 
1166:quantum/quantum.c **** 
1167:quantum/quantum.c **** __attribute__((weak))
1168:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1169:quantum/quantum.c **** {
 1967               		.loc 1 1169 0
 1968               		.cfi_startproc
 1969               	.LVL210:
 1970               	/* prologue: function */
 1971               	/* frame size = 0 */
 1972               	/* stack size = 0 */
 1973               	.L__stack_usage = 0
1170:quantum/quantum.c ****   hex = hex & 0xF;
 1974               		.loc 1 1170 0
 1975 0000 282F      		mov r18,r24
 1976 0002 2F70      		andi r18,lo8(15)
 1977               	.LVL211:
1171:quantum/quantum.c ****   if (hex == 0x0) {
 1978               		.loc 1 1171 0
 1979 0004 01F0      		breq .L186
 1980 0006 822F      		mov r24,r18
 1981 0008 90E0      		ldi r25,0
1172:quantum/quantum.c ****     return KC_0;
1173:quantum/quantum.c ****   } else if (hex < 0xA) {
 1982               		.loc 1 1173 0
 1983 000a 2A30      		cpi r18,lo8(10)
 1984 000c 00F4      		brsh .L185
1174:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 1985               		.loc 1 1174 0
 1986 000e 4D96      		adiw r24,29
 1987 0010 0895      		ret
 1988               	.L185:
1175:quantum/quantum.c ****   } else {
1176:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 1989               		.loc 1 1176 0
 1990 0012 0697      		sbiw r24,6
 1991 0014 0895      		ret
 1992               	.L186:
1172:quantum/quantum.c ****   } else if (hex < 0xA) {
 1993               		.loc 1 1172 0
 1994 0016 87E2      		ldi r24,lo8(39)
 1995 0018 90E0      		ldi r25,0
 1996               	/* epilogue start */
1177:quantum/quantum.c ****   }
1178:quantum/quantum.c **** }
 1997               		.loc 1 1178 0
 1998 001a 0895      		ret
 1999               		.cfi_endproc
 2000               	.LFE138:
 2002               		.section	.text.api_send_unicode,"ax",@progbits
 2003               	.global	api_send_unicode
 2005               	api_send_unicode:
 2006               	.LFB139:
1179:quantum/quantum.c **** 
1180:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2007               		.loc 1 1180 0
 2008               		.cfi_startproc
 2009               	.LVL212:
 2010               	/* prologue: function */
 2011               	/* frame size = 0 */
 2012               	/* stack size = 0 */
 2013               	.L__stack_usage = 0
 2014               	/* epilogue start */
1181:quantum/quantum.c **** #ifdef API_ENABLE
1182:quantum/quantum.c ****     uint8_t chunk[4];
1183:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1184:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1185:quantum/quantum.c **** #endif
1186:quantum/quantum.c **** }
 2015               		.loc 1 1186 0
 2016 0000 0895      		ret
 2017               		.cfi_endproc
 2018               	.LFE139:
 2020               		.section	.text.led_set_user,"ax",@progbits
 2021               		.weak	led_set_user
 2023               	led_set_user:
 2024               	.LFB140:
1187:quantum/quantum.c **** 
1188:quantum/quantum.c **** __attribute__ ((weak))
1189:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2025               		.loc 1 1189 0
 2026               		.cfi_startproc
 2027               	.LVL213:
 2028               	/* prologue: function */
 2029               	/* frame size = 0 */
 2030               	/* stack size = 0 */
 2031               	.L__stack_usage = 0
 2032               	/* epilogue start */
1190:quantum/quantum.c **** 
1191:quantum/quantum.c **** }
 2033               		.loc 1 1191 0
 2034 0000 0895      		ret
 2035               		.cfi_endproc
 2036               	.LFE140:
 2038               		.set	led_set_user.localalias.1,led_set_user
 2039               		.section	.text.backlight_set,"ax",@progbits
 2040               		.weak	backlight_set
 2042               	backlight_set:
 2043               	.LFB153:
 2044               		.cfi_startproc
 2045               	/* prologue: function */
 2046               	/* frame size = 0 */
 2047               	/* stack size = 0 */
 2048               	.L__stack_usage = 0
 2049               	/* epilogue start */
 2050 0000 0895      		ret
 2051               		.cfi_endproc
 2052               	.LFE153:
 2054               		.section	.text.led_set_kb,"ax",@progbits
 2055               		.weak	led_set_kb
 2057               	led_set_kb:
 2058               	.LFB141:
1192:quantum/quantum.c **** 
1193:quantum/quantum.c **** __attribute__ ((weak))
1194:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2059               		.loc 1 1194 0
 2060               		.cfi_startproc
 2061               	.LVL214:
 2062               	/* prologue: function */
 2063               	/* frame size = 0 */
 2064               	/* stack size = 0 */
 2065               	.L__stack_usage = 0
1195:quantum/quantum.c ****     led_set_user(usb_led);
 2066               		.loc 1 1195 0
 2067 0000 0C94 0000 		jmp led_set_user
 2068               	.LVL215:
 2069               		.cfi_endproc
 2070               	.LFE141:
 2072               		.section	.text.led_init_ports,"ax",@progbits
 2073               		.weak	led_init_ports
 2075               	led_init_ports:
 2076               	.LFB142:
1196:quantum/quantum.c **** }
1197:quantum/quantum.c **** 
1198:quantum/quantum.c **** __attribute__ ((weak))
1199:quantum/quantum.c **** void led_init_ports(void)
1200:quantum/quantum.c **** {
 2077               		.loc 1 1200 0
 2078               		.cfi_startproc
 2079               	/* prologue: function */
 2080               	/* frame size = 0 */
 2081               	/* stack size = 0 */
 2082               	.L__stack_usage = 0
 2083               	/* epilogue start */
1201:quantum/quantum.c **** 
1202:quantum/quantum.c **** }
 2084               		.loc 1 1202 0
 2085 0000 0895      		ret
 2086               		.cfi_endproc
 2087               	.LFE142:
 2089               		.section	.text.led_set,"ax",@progbits
 2090               		.weak	led_set
 2092               	led_set:
 2093               	.LFB143:
1203:quantum/quantum.c **** 
1204:quantum/quantum.c **** __attribute__ ((weak))
1205:quantum/quantum.c **** void led_set(uint8_t usb_led)
1206:quantum/quantum.c **** {
 2094               		.loc 1 1206 0
 2095               		.cfi_startproc
 2096               	.LVL216:
 2097               	/* prologue: function */
 2098               	/* frame size = 0 */
 2099               	/* stack size = 0 */
 2100               	.L__stack_usage = 0
1207:quantum/quantum.c **** 
1208:quantum/quantum.c ****   // Example LED Code
1209:quantum/quantum.c ****   //
1210:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1211:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1212:quantum/quantum.c ****     // {
1213:quantum/quantum.c ****     //     // Output high.
1214:quantum/quantum.c ****     //     DDRE |= (1<<6);
1215:quantum/quantum.c ****     //     PORTE |= (1<<6);
1216:quantum/quantum.c ****     // }
1217:quantum/quantum.c ****     // else
1218:quantum/quantum.c ****     // {
1219:quantum/quantum.c ****     //     // Output low.
1220:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1221:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1222:quantum/quantum.c ****     // }
1223:quantum/quantum.c **** 
1224:quantum/quantum.c ****   led_set_kb(usb_led);
 2101               		.loc 1 1224 0
 2102 0000 0C94 0000 		jmp led_set_kb
 2103               	.LVL217:
 2104               		.cfi_endproc
 2105               	.LFE143:
 2107               		.section	.text.startup_user,"ax",@progbits
 2108               		.weak	startup_user
 2110               	startup_user:
 2111               	.LFB147:
 2112               		.cfi_startproc
 2113               	/* prologue: function */
 2114               	/* frame size = 0 */
 2115               	/* stack size = 0 */
 2116               	.L__stack_usage = 0
 2117               	/* epilogue start */
 2118 0000 0895      		ret
 2119               		.cfi_endproc
 2120               	.LFE147:
 2122               		.section	.text.shutdown_user,"ax",@progbits
 2123               		.weak	shutdown_user
 2125               	shutdown_user:
 2126               	.LFB149:
 2127               		.cfi_startproc
 2128               	/* prologue: function */
 2129               	/* frame size = 0 */
 2130               	/* stack size = 0 */
 2131               	.L__stack_usage = 0
 2132               	/* epilogue start */
 2133 0000 0895      		ret
 2134               		.cfi_endproc
 2135               	.LFE149:
 2137               		.weak	ascii_to_keycode_lut
 2138               		.section	.progmem.data.ascii_to_keycode_lut,"a",@progbits
 2141               	ascii_to_keycode_lut:
 2142 0000 00        		.byte	0
 2143 0001 00        		.byte	0
 2144 0002 00        		.byte	0
 2145 0003 00        		.byte	0
 2146 0004 00        		.byte	0
 2147 0005 00        		.byte	0
 2148 0006 00        		.byte	0
 2149 0007 00        		.byte	0
 2150 0008 2A        		.byte	42
 2151 0009 2B        		.byte	43
 2152 000a 28        		.byte	40
 2153 000b 00        		.byte	0
 2154 000c 00        		.byte	0
 2155 000d 00        		.byte	0
 2156 000e 00        		.byte	0
 2157 000f 00        		.byte	0
 2158 0010 00        		.byte	0
 2159 0011 00        		.byte	0
 2160 0012 00        		.byte	0
 2161 0013 00        		.byte	0
 2162 0014 00        		.byte	0
 2163 0015 00        		.byte	0
 2164 0016 00        		.byte	0
 2165 0017 00        		.byte	0
 2166 0018 00        		.byte	0
 2167 0019 00        		.byte	0
 2168 001a 00        		.byte	0
 2169 001b 29        		.byte	41
 2170 001c 00        		.byte	0
 2171 001d 00        		.byte	0
 2172 001e 00        		.byte	0
 2173 001f 00        		.byte	0
 2174 0020 2C        		.byte	44
 2175 0021 1E        		.byte	30
 2176 0022 34        		.byte	52
 2177 0023 20        		.byte	32
 2178 0024 21        		.byte	33
 2179 0025 22        		.byte	34
 2180 0026 24        		.byte	36
 2181 0027 34        		.byte	52
 2182 0028 26        		.byte	38
 2183 0029 27        		.byte	39
 2184 002a 25        		.byte	37
 2185 002b 2E        		.byte	46
 2186 002c 36        		.byte	54
 2187 002d 2D        		.byte	45
 2188 002e 37        		.byte	55
 2189 002f 38        		.byte	56
 2190 0030 27        		.byte	39
 2191 0031 1E        		.byte	30
 2192 0032 1F        		.byte	31
 2193 0033 20        		.byte	32
 2194 0034 21        		.byte	33
 2195 0035 22        		.byte	34
 2196 0036 23        		.byte	35
 2197 0037 24        		.byte	36
 2198 0038 25        		.byte	37
 2199 0039 26        		.byte	38
 2200 003a 33        		.byte	51
 2201 003b 33        		.byte	51
 2202 003c 36        		.byte	54
 2203 003d 2E        		.byte	46
 2204 003e 37        		.byte	55
 2205 003f 38        		.byte	56
 2206 0040 1F        		.byte	31
 2207 0041 04        		.byte	4
 2208 0042 05        		.byte	5
 2209 0043 06        		.byte	6
 2210 0044 07        		.byte	7
 2211 0045 08        		.byte	8
 2212 0046 09        		.byte	9
 2213 0047 0A        		.byte	10
 2214 0048 0B        		.byte	11
 2215 0049 0C        		.byte	12
 2216 004a 0D        		.byte	13
 2217 004b 0E        		.byte	14
 2218 004c 0F        		.byte	15
 2219 004d 10        		.byte	16
 2220 004e 11        		.byte	17
 2221 004f 12        		.byte	18
 2222 0050 13        		.byte	19
 2223 0051 14        		.byte	20
 2224 0052 15        		.byte	21
 2225 0053 16        		.byte	22
 2226 0054 17        		.byte	23
 2227 0055 18        		.byte	24
 2228 0056 19        		.byte	25
 2229 0057 1A        		.byte	26
 2230 0058 1B        		.byte	27
 2231 0059 1C        		.byte	28
 2232 005a 1D        		.byte	29
 2233 005b 2F        		.byte	47
 2234 005c 31        		.byte	49
 2235 005d 30        		.byte	48
 2236 005e 23        		.byte	35
 2237 005f 2D        		.byte	45
 2238 0060 35        		.byte	53
 2239 0061 04        		.byte	4
 2240 0062 05        		.byte	5
 2241 0063 06        		.byte	6
 2242 0064 07        		.byte	7
 2243 0065 08        		.byte	8
 2244 0066 09        		.byte	9
 2245 0067 0A        		.byte	10
 2246 0068 0B        		.byte	11
 2247 0069 0C        		.byte	12
 2248 006a 0D        		.byte	13
 2249 006b 0E        		.byte	14
 2250 006c 0F        		.byte	15
 2251 006d 10        		.byte	16
 2252 006e 11        		.byte	17
 2253 006f 12        		.byte	18
 2254 0070 13        		.byte	19
 2255 0071 14        		.byte	20
 2256 0072 15        		.byte	21
 2257 0073 16        		.byte	22
 2258 0074 17        		.byte	23
 2259 0075 18        		.byte	24
 2260 0076 19        		.byte	25
 2261 0077 1A        		.byte	26
 2262 0078 1B        		.byte	27
 2263 0079 1C        		.byte	28
 2264 007a 1D        		.byte	29
 2265 007b 2F        		.byte	47
 2266 007c 31        		.byte	49
 2267 007d 30        		.byte	48
 2268 007e 35        		.byte	53
 2269 007f 4C        		.byte	76
 2270               		.weak	ascii_to_shift_lut
 2271               		.section	.progmem.data.ascii_to_shift_lut,"a",@progbits
 2274               	ascii_to_shift_lut:
 2275 0000 00        		.byte	0
 2276 0001 00        		.byte	0
 2277 0002 00        		.byte	0
 2278 0003 00        		.byte	0
 2279 0004 00        		.byte	0
 2280 0005 00        		.byte	0
 2281 0006 00        		.byte	0
 2282 0007 00        		.byte	0
 2283 0008 00        		.byte	0
 2284 0009 00        		.byte	0
 2285 000a 00        		.byte	0
 2286 000b 00        		.byte	0
 2287 000c 00        		.byte	0
 2288 000d 00        		.byte	0
 2289 000e 00        		.byte	0
 2290 000f 00        		.byte	0
 2291 0010 00        		.byte	0
 2292 0011 00        		.byte	0
 2293 0012 00        		.byte	0
 2294 0013 00        		.byte	0
 2295 0014 00        		.byte	0
 2296 0015 00        		.byte	0
 2297 0016 00        		.byte	0
 2298 0017 00        		.byte	0
 2299 0018 00        		.byte	0
 2300 0019 00        		.byte	0
 2301 001a 00        		.byte	0
 2302 001b 00        		.byte	0
 2303 001c 00        		.byte	0
 2304 001d 00        		.byte	0
 2305 001e 00        		.byte	0
 2306 001f 00        		.byte	0
 2307 0020 00        		.byte	0
 2308 0021 01        		.byte	1
 2309 0022 01        		.byte	1
 2310 0023 01        		.byte	1
 2311 0024 01        		.byte	1
 2312 0025 01        		.byte	1
 2313 0026 01        		.byte	1
 2314 0027 00        		.byte	0
 2315 0028 01        		.byte	1
 2316 0029 01        		.byte	1
 2317 002a 01        		.byte	1
 2318 002b 01        		.byte	1
 2319 002c 00        		.byte	0
 2320 002d 00        		.byte	0
 2321 002e 00        		.byte	0
 2322 002f 00        		.byte	0
 2323 0030 00        		.byte	0
 2324 0031 00        		.byte	0
 2325 0032 00        		.byte	0
 2326 0033 00        		.byte	0
 2327 0034 00        		.byte	0
 2328 0035 00        		.byte	0
 2329 0036 00        		.byte	0
 2330 0037 00        		.byte	0
 2331 0038 00        		.byte	0
 2332 0039 00        		.byte	0
 2333 003a 01        		.byte	1
 2334 003b 00        		.byte	0
 2335 003c 01        		.byte	1
 2336 003d 00        		.byte	0
 2337 003e 01        		.byte	1
 2338 003f 01        		.byte	1
 2339 0040 01        		.byte	1
 2340 0041 01        		.byte	1
 2341 0042 01        		.byte	1
 2342 0043 01        		.byte	1
 2343 0044 01        		.byte	1
 2344 0045 01        		.byte	1
 2345 0046 01        		.byte	1
 2346 0047 01        		.byte	1
 2347 0048 01        		.byte	1
 2348 0049 01        		.byte	1
 2349 004a 01        		.byte	1
 2350 004b 01        		.byte	1
 2351 004c 01        		.byte	1
 2352 004d 01        		.byte	1
 2353 004e 01        		.byte	1
 2354 004f 01        		.byte	1
 2355 0050 01        		.byte	1
 2356 0051 01        		.byte	1
 2357 0052 01        		.byte	1
 2358 0053 01        		.byte	1
 2359 0054 01        		.byte	1
 2360 0055 01        		.byte	1
 2361 0056 01        		.byte	1
 2362 0057 01        		.byte	1
 2363 0058 01        		.byte	1
 2364 0059 01        		.byte	1
 2365 005a 01        		.byte	1
 2366 005b 00        		.byte	0
 2367 005c 00        		.byte	0
 2368 005d 00        		.byte	0
 2369 005e 01        		.byte	1
 2370 005f 01        		.byte	1
 2371 0060 00        		.byte	0
 2372 0061 00        		.byte	0
 2373 0062 00        		.byte	0
 2374 0063 00        		.byte	0
 2375 0064 00        		.byte	0
 2376 0065 00        		.byte	0
 2377 0066 00        		.byte	0
 2378 0067 00        		.byte	0
 2379 0068 00        		.byte	0
 2380 0069 00        		.byte	0
 2381 006a 00        		.byte	0
 2382 006b 00        		.byte	0
 2383 006c 00        		.byte	0
 2384 006d 00        		.byte	0
 2385 006e 00        		.byte	0
 2386 006f 00        		.byte	0
 2387 0070 00        		.byte	0
 2388 0071 00        		.byte	0
 2389 0072 00        		.byte	0
 2390 0073 00        		.byte	0
 2391 0074 00        		.byte	0
 2392 0075 00        		.byte	0
 2393 0076 00        		.byte	0
 2394 0077 00        		.byte	0
 2395 0078 00        		.byte	0
 2396 0079 00        		.byte	0
 2397 007a 00        		.byte	0
 2398 007b 01        		.byte	1
 2399 007c 01        		.byte	1
 2400 007d 01        		.byte	1
 2401 007e 01        		.byte	1
 2402 007f 00        		.byte	0
 2403               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 2406               	grave_esc_was_shifted:
 2407 0000 00        		.zero	1
 2408               		.section	.bss.scs_timer,"aw",@nobits
 2411               	scs_timer:
 2412 0000 0000 0000 		.zero	4
 2413               		.section	.bss.shift_interrupted,"aw",@nobits
 2416               	shift_interrupted:
 2417 0000 0000      		.zero	2
 2418               		.text
 2419               	.Letext0:
 2420               		.file 3 "/usr/avr/include/stdint.h"
 2421               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 2422               		.file 5 "./tmk_core/common/keyboard.h"
 2423               		.file 6 "./tmk_core/common/action.h"
 2424               		.file 7 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2425               		.file 8 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2426               		.file 9 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 2427               		.file 10 "./lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2428               		.file 11 "/usr/avr/include/stdio.h"
 2429               		.file 12 "./tmk_core/common/report.h"
 2430               		.file 13 "./tmk_core/common/host.h"
 2431               		.file 14 "./tmk_core/common/debug.h"
 2432               		.file 15 "quantum/keycode_config.h"
 2433               		.file 16 "./tmk_core/common/keycode.h"
 2434               		.file 17 "quantum/quantum_keycodes.h"
 2435               		.file 18 "quantum/keymap.h"
 2436               		.file 19 "./tmk_core/common/action_layer.h"
 2437               		.file 20 "./tmk_core/common/timer.h"
 2438               		.file 21 "./tmk_core/common/action_util.h"
 2439               		.file 22 "/usr/avr/include/stdlib.h"
 2440               		.file 23 "./quantum/process_keycode/process_tap_dance.h"
 2441               		.file 24 "quantum/quantum.h"
 2442               		.file 25 "./tmk_core/protocol/lufa/outputselect.h"
 2443               		.file 26 "./tmk_core/common/backlight.h"
 2444               		.file 27 "./tmk_core/common/eeconfig.h"
 2445               		.file 28 "./quantum/process_keycode/process_steno.h"
 2446               		.file 29 "./quantum/process_keycode/process_leader.h"
 2447               		.file 30 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccR2Ux9K.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccR2Ux9K.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccR2Ux9K.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccR2Ux9K.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccR2Ux9K.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccR2Ux9K.s:12     .text.do_code16:0000000000000000 do_code16
     /tmp/ccR2Ux9K.s:132    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
     /tmp/ccR2Ux9K.s:162    .text.qk_register_mods:0000000000000000 qk_register_mods
     /tmp/ccR2Ux9K.s:175    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
     /tmp/ccR2Ux9K.s:205    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
     /tmp/ccR2Ux9K.s:219    .text.register_code16:0000000000000000 register_code16
     /tmp/ccR2Ux9K.s:275    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccR2Ux9K.s:329    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccR2Ux9K.s:349    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccR2Ux9K.s:369    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccR2Ux9K.s:387    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccR2Ux9K.s:423    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccR2Ux9K.s:2416   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccR2Ux9K.s:2411   .bss.scs_timer:0000000000000000 scs_timer
     /tmp/ccR2Ux9K.s:2406   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
     /tmp/ccR2Ux9K.s:977    .text.send_char:0000000000000000 send_char
     /tmp/ccR2Ux9K.s:2141   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
     /tmp/ccR2Ux9K.s:2274   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
     /tmp/ccR2Ux9K.s:1061   .text.send_string_with_delay:0000000000000000 send_string_with_delay
     /tmp/ccR2Ux9K.s:1206   .text.send_string:0000000000000000 send_string
     /tmp/ccR2Ux9K.s:1225   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
     /tmp/ccR2Ux9K.s:1403   .text.send_string_P:0000000000000000 send_string_P
     /tmp/ccR2Ux9K.s:1422   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
     /tmp/ccR2Ux9K.s:1470   .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccR2Ux9K.s:1607   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccR2Ux9K.s:1733   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccR2Ux9K.s:1750   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccR2Ux9K.s:1770   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccR2Ux9K.s:1785   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccR2Ux9K.s:1848   .text.send_byte:0000000000000000 send_byte
     /tmp/ccR2Ux9K.s:1885   .text.send_word:0000000000000000 send_word
     /tmp/ccR2Ux9K.s:1919   .text.send_dword:0000000000000000 send_dword
     /tmp/ccR2Ux9K.s:1965   .text.hex_to_keycode:0000000000000000 hex_to_keycode
     /tmp/ccR2Ux9K.s:2005   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccR2Ux9K.s:2023   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccR2Ux9K.s:2023   .text.led_set_user:0000000000000000 led_set_user.localalias.1
     /tmp/ccR2Ux9K.s:2042   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccR2Ux9K.s:2057   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccR2Ux9K.s:2075   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccR2Ux9K.s:2092   .text.led_set:0000000000000000 led_set
     /tmp/ccR2Ux9K.s:2110   .text.startup_user:0000000000000000 startup_user
     /tmp/ccR2Ux9K.s:2125   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
process_steno
process_tap_dance
process_leader
read_source_layers_cache
timer_read
register_mods
debug_config
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
timer_elapsed
unregister_mods
get_mods
add_key
del_key
eeconfig_update_default_layer
default_layer_set
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
