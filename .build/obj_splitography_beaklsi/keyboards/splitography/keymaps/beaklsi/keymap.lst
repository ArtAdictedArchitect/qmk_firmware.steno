   1               		.file	"keymap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.paste_reset,"ax",@progbits
  11               	.global	paste_reset
  13               	paste_reset:
  14               	.LFB144:
  15               		.file 1 "/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c
   1:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
   2:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #include "keycode_functions.h"
   3:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
   4:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t  i         = 0;              // inline for loop counter
   5:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint16_t key_timer = 0;              // global event timer
   6:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
   7:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // Keycodes
   8:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
   9:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  10:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ................................................................... Mod Masks
  11:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  12:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // tap dance persistant mods, see process_record_user()
  13:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // keyboard_report->mods (?) appears to be cleared by tap dance
  14:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t mods = 0;
  15:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  16:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tap_mods(keyrecord_t *record, uint16_t keycode)
  17:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  18:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) { mods |= MOD_BIT(keycode); }
  19:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                       { mods &= ~(MOD_BIT(keycode)); }
  20:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  21:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  22:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // (un)register modifiers
  23:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void modifier(void (*f)(uint8_t))
  24:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  25:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LCTL)) { f(KC_LCTL); }
  26:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LGUI)) { f(KC_LGUI); }
  27:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LALT)) { f(KC_LALT); }
  28:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LSFT)) { f(KC_LSFT); }
  29:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_RSFT)) { f(KC_RSFT); }  // note: qmk macros all use left modifiers
  30:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  31:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  32:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // base layer modifier and only shift modifier KC_LSFT or KC_RSFT
  33:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** bool on_shift(uint16_t shift_key)
  34:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  35:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   // return (mods && ((mods & MOD_BIT(shift_key)) == mods) && (biton32(layer_state) == _BASE || bit
  36:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   // return (mods && ((mods & MOD_BIT(shift_key)) == mods));
  37:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   return mods & MOD_BIT(shift_key);
  38:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  39:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  40:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // .................................................................. Key event
  41:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  42:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint16_t tt_keycode = 0;             // current TT keycode
  43:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  44:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // alternate escape for TT layers, see process_record_user()
  45:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tt_escape(keyrecord_t *record, uint16_t keycode)
  46:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  47:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (tt_keycode != keycode && tt_keycode) { base_layer(0); } // if different TT layer selected
  48:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed)               { key_timer = timer_read(); }
  49:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else {
  50:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { tt_keycode = keycode; }
  51:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
  52:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
  53:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  54:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  55:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // .......................................................... Keycode Primitives
  56:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  57:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // register shift keycode
  58:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void register_shift(uint16_t keycode)
  59:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  60:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code(KC_LSFT);
  61:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code(keycode);
  62:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  63:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  64:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // unregister shift keycode
  65:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void unregister_shift(uint16_t keycode)
  66:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  67:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(keycode);
  68:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_LSFT);
  69:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  70:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  71:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // register simple key press
  72:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tap_key(uint16_t keycode)
  73:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  74:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code  (keycode);
  75:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(keycode);
  76:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  77:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  78:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tap_shift(uint16_t keycode)
  79:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  80:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code  (KC_LSFT);
  81:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_key        (keycode);
  82:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_LSFT);
  83:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  84:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  85:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void double_tap(uint8_t count, uint8_t shift, uint16_t keycode)
  86:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  87:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   shift ? tap_shift(keycode) : tap_key(keycode);
  88:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (count > 1) { shift ? tap_shift(keycode) : tap_key(keycode); }
  89:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  90:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  91:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // key press for rolling_layer() and lt_shift() macros
  92:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void on_tap(uint8_t shift, uint16_t keycode)
  93:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  94:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (keycode && (timer_elapsed(key_timer) < TAPPING_TERM)) { tap_mod(shift, keycode); }
  95:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  96:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  97:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ............................................................ Keycode Modifier
  98:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
  99:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define SHIFT   1
 100:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define NOSHIFT 0
 101:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 102:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tap_mod(uint16_t modifier, uint16_t keycode)
 103:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 104:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   switch (modifier) {
 105:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   case NOSHIFT:
 106:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     tap_key(keycode);
 107:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     break;
 108:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   case SHIFT:
 109:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     tap_shift(keycode);
 110:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     break;
 111:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   default:
 112:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     register_code  (modifier);
 113:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     tap_key        (keycode);
 114:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     unregister_code(modifier);
 115:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 116:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 117:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 118:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ALT_T, CTL_T, GUI_T, SFT_T for shifted keycodes
 119:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void mt_shift(keyrecord_t *record, uint16_t modifier, uint16_t modifier2, uint16_t keycode)
 120:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 121:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) {
 122:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = timer_read();
 123:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (modifier2) { register_code(modifier2); }
 124:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     register_code(modifier);
 125:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 126:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else {
 127:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     unregister_code(modifier);
 128:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (modifier2)                               { unregister_code(modifier2); }
 129:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { tap_shift(keycode); }
 130:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
 131:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 132:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 133:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 134:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ................................................................. Map Keycode
 135:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 136:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // remap keycode via shift for base and caps layers, see process_record_user()
 137:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** bool map_shift(keyrecord_t *record, uint16_t shift_key, uint8_t shift, uint16_t keycode)
 138:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 139:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   // if modifier and only shift modifier and base layer..
 140:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (on_shift(shift_key)) {
 141:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (record->event.pressed) {
 142:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (!shift) { unregister_code(KC_LSFT); } // in event of unshifted keycode
 143:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       register_code(keycode);
 144:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 145:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else {
 146:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       unregister_code(keycode);
 147:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (!shift) { register_code(KC_LSFT); }   // restore SFT_T
 148:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 149:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     return true;                                // remap complete, see process_record_user()
 150:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 151:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   return false;
 152:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 153:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 154:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // Tap Dance
 155:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
 156:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 157:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // .......................................................... Tap Dance Keycodes
 158:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 159:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** qk_tap_dance_action_t tap_dance_actions[] = {
 160:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   [_ASTR]   = ACTION_TAP_DANCE_FN         (asterisk)
 161:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_BSPC]   = ACTION_TAP_DANCE_FN_ADVANCED(NULL, backspace, backspace_reset)
 162:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_EMOJ]   = ACTION_TAP_DANCE_FN_ADVANCED(NULL, emoji, emoji_reset)
 163:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_COMM]   = ACTION_TAP_DANCE_FN         (comma)
 164:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_DOT]    = ACTION_TAP_DANCE_FN         (dot)
 165:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_PASTE]  = ACTION_TAP_DANCE_FN_ADVANCED(NULL, paste, paste_reset)
 166:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_PERC]   = ACTION_TAP_DANCE_FN_ADVANCED(NULL, percent, percent_reset)
 167:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_PRIV]   = ACTION_TAP_DANCE_FN         (private)
 168:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_SEND]   = ACTION_TAP_DANCE_FN         (send)
 169:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_SPC]    = ACTION_TAP_DANCE_FN_ADVANCED(NULL, space, space_reset)
 170:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_TILD]   = ACTION_TAP_DANCE_FN_ADVANCED(NULL, tilde, tilde_reset)
 171:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_XPASTE] = ACTION_TAP_DANCE_FN_ADVANCED(NULL, xpaste, xpaste_reset)
 172:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef HASKELL
 173:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_COLN]   = ACTION_TAP_DANCE_FN_ADVANCED(NULL, colon, colon_reset)
 174:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_LT]     = ACTION_TAP_DANCE_FN_ADVANCED(NULL, lesser, lesser_reset)
 175:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****  ,[_GT]     = ACTION_TAP_DANCE_FN_ADVANCED(NULL, greater, greater_reset)
 176:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #endif
 177:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** };
 178:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 179:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ...................................................... Double Tap Shift/Layer
 180:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 181:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t dt_shift = 0;
 182:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 183:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void double_shift(uint16_t keycode, uint8_t layer)
 184:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 185:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_key (keycode);
 186:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (DT_SHIFT) {
 187:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     // set_oneshot_mods(MOD_LSFT);
 188:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     // layer_on(layer);
 189:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_on         (_SHIFT);
 190:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     set_oneshot_layer(_SHIFT, ONESHOT_START);
 191:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     dt_shift = 1;
 192:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 193:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else { layer_on(layer); }
 194:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 195:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 196:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t auto_cap = 0;                // down_punc chord, see process_record_user() TD_TILD, 
 197:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 198:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // tap dance LT (LAYER, KEY) emulation with <KEY><DOWN> -> <KEY><SHIFT> and auto-repeat extensions!
 199:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void cap_lt(qk_tap_dance_state_t *state, uint16_t keycode, uint8_t layer, uint8_t paragraph, uint16
 200:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 201:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (auto_cap) {                           // sentence/paragraph capitalization
 202:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                                    { return; }
 203:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if ((state->count > 1) && (state->count == paragraph)) { tap_key(leader); }
 204:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     double_shift(leader, layer);            // discard excess taps!
 205:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 206:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed)                { (state->count == 1) ? layer_on(layer) : register_code(k
 207:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 208:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 209:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 210:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tap_reset(uint16_t keycode, uint8_t layer)
 211:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 212:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(keycode);
 213:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   dt_shift ? clear_oneshot_layer_state(ONESHOT_PRESSED) : layer_off(layer);
 214:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   dt_shift = 0;
 215:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   auto_cap = 0;                             // clear retained down_rule, see process_record_user()
 216:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 217:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 218:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define SENTENCE  0                         // capitalization method
 219:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define PARAGRAPH 2
 220:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 221:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // augment pseudo LT (_RSHIFT, KC_ENT) handling below for rapid <ENTER><SHIFT> sequences
 222:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void backspace(qk_tap_dance_state_t *state, void *user_data)
 223:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 224:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   cap_lt(state, KC_BSPC, _EDIT, PARAGRAPH, KC_ENT); // double tap -> double enter + shift, down -> 
 225:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 226:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 227:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void backspace_reset(qk_tap_dance_state_t *state, void *user_data)
 228:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 229:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_reset(KC_BSPC, _EDIT);
 230:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 231:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 232:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // augment pseudo LT (_LSHIFT, KC_SPC) handling below for rapid <SPACE><SHIFT> sequences
 233:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void space(qk_tap_dance_state_t *state, void *user_data)
 234:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 235:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   cap_lt(state, KC_SPC, _GUIFN, SENTENCE, KC_SPC); // double tap down -> space...
 236:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 237:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 238:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void space_reset(qk_tap_dance_state_t *state, void *user_data)
 239:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 240:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_reset(KC_SPC, _GUIFN);
 241:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 242:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 243:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ........................................................... Triple Tap Insert
 244:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 245:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef HASKELL
 246:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void colon(qk_tap_dance_state_t *state, void *user_data)
 247:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 248:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 2) {
 249:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_SCLN); }
 250:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" :: "); }
 251:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_SCLN); }
 252:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 253:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else { state->pressed ? register_shift(KC_SCLN) : double_tap(state->count, SHIFT, KC_SCLN); }
 254:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 255:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 256:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 257:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void colon_reset(qk_tap_dance_state_t *state, void *user_data)
 258:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 259:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_SCLN);
 260:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 261:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 262:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void lesser(qk_tap_dance_state_t *state, void *user_data)
 263:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 264:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 2) {
 265:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_COMM); }
 266:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" <- "); }
 267:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_COMM); }
 268:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 269:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if ((state->count == 2) && state->pressed) { register_shift(KC_COMM); }
 270:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                            { state->pressed ? register_code(KC_LCTL) : doubl
 271:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 272:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 273:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 274:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void lesser_reset(qk_tap_dance_state_t *state, void *user_data)
 275:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 276:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_COMM);
 277:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_LCTL);
 278:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 279:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 280:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void greater(qk_tap_dance_state_t *state, void *user_data)
 281:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 282:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 2) {
 283:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_DOT); }
 284:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" -> "); }
 285:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_DOT); }
 286:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 287:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if ((state->count == 2) && state->pressed) { register_shift(KC_DOT); }
 288:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                            { state->pressed ? register_code(KC_LSFT) : doubl
 289:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 290:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 291:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 292:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void greater_reset(qk_tap_dance_state_t *state, void *user_data)
 293:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 294:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_DOT);
 295:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_LSFT);
 296:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 297:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #endif
 298:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 299:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tilde(qk_tap_dance_state_t *state, void *user_data)
 300:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 301:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (on_shift(KC_RSFT)) {                  // dot, shift -> tilde, see process_record_user() TD_TI
 302:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->count > 1) {
 303:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (state->pressed)                     { register_shift(KC_GRV); }
 304:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       else if (state->count == 2)             { send_string("~/"); } 
 305:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       else for (i = 0; i < state->count; i++) { tap_shift(KC_GRV); }
 306:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 307:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else { state->pressed ? register_shift(KC_GRV) : tap_shift(KC_GRV); }
 308:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 309:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else { state->pressed ? register_code(KC_DOT) : tap_key(KC_DOT); }
 310:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 311:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 312:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 313:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tilde_reset(qk_tap_dance_state_t *state, void *user_data)
 314:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 315:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_GRV);
 316:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_DOT);
 317:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (on_shift(KC_RSFT)) { register_code(KC_LSFT); } // restore HOME_T, see process_record_user() T
 318:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 319:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 320:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ........................................................... Double Tap Insert
 321:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 322:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void asterisk(qk_tap_dance_state_t *state, void *user_data)
 323:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 324:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_DOT); }
 325:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_shift(KC_8);
 326:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 327:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 328:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 329:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void comma(qk_tap_dance_state_t *state, void *user_data)
 330:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 331:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_key(KC_COMM);
 332:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_SPC); }
 333:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 334:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 335:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 336:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void dot(qk_tap_dance_state_t *state, void *user_data)
 337:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 338:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   state->count > 1 ? tap_shift(KC_COLN) : tap_key(KC_DOT);
 339:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 340:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 341:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 342:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void emoji(qk_tap_dance_state_t *state, void *user_data)
 343:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 344:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) {
 345:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_SCLN); }
 346:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 2)             { tap_shift(KC_SCLN); tap_key(KC_MINUS); }
 347:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_SCLN); }
 348:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 349:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else { state->pressed ? register_shift(KC_SCLN) : double_tap(state->count, SHIFT, KC_SCLN); }
 350:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 351:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 352:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 353:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void emoji_reset(qk_tap_dance_state_t *state, void *user_data)
 354:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 355:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_SCLN);
 356:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 357:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 358:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define IRC_ENTER _delay_ms(10); tap_key(KC_ENT);
 359:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 360:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void paste(qk_tap_dance_state_t *state, void *user_data)
 361:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 362:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1)    { tap_mod(KC_LCTL, KC_V); IRC_ENTER; }
 363:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_code(KC_V); }
 364:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                     { tap_mod(KC_LCTL, KC_V); }
 365:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 366:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 367:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 368:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void paste_reset(qk_tap_dance_state_t *state, void *user_data)
 369:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  16               		.loc 1 369 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 370:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_V);
  23               		.loc 1 370 0
  24 0000 89E1      		ldi r24,lo8(25)
  25               	.LVL1:
  26 0002 0E94 0000 		call unregister_code
  27               	.LVL2:
 371:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_LCTL);
  28               		.loc 1 371 0
  29 0006 80EE      		ldi r24,lo8(-32)
  30 0008 0C94 0000 		jmp unregister_code
  31               	.LVL3:
  32               		.cfi_endproc
  33               	.LFE144:
  35               		.section	.text.private,"ax",@progbits
  36               	.global	private
  38               	private:
  39               	.LFB149:
 372:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 373:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 374:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void percent(qk_tap_dance_state_t *state, void *user_data)
 375:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 376:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if ((state->count > 1) && state->pressed) { register_shift(KC_5); }
 377:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                      { state->pressed ? register_code(KC_LALT) : double_tap(
 378:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 379:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 380:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 381:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void percent_reset(qk_tap_dance_state_t *state, void *user_data)
 382:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 383:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_5);
 384:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_LALT);
 385:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 386:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 387:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define CTL_SFT_V register_code(KC_LCTL); tap_shift(KC_V); unregister_code(KC_LCTL) 
 388:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 389:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void xpaste(qk_tap_dance_state_t *state, void *user_data)
 390:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 391:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1)    { CTL_SFT_V; IRC_ENTER; }
 392:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_shift(KC_V); }
 393:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                     { CTL_SFT_V; }
 394:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 395:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 396:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 397:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void xpaste_reset(qk_tap_dance_state_t *state, void *user_data)
 398:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 399:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_V);
 400:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_LCTL);
 401:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 402:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 403:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // compile time macro string, see functions/hardware planck script
 404:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void private(qk_tap_dance_state_t *state, void *user_data)
 405:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  40               		.loc 1 405 0
  41               		.cfi_startproc
  42               	.LVL4:
  43 0000 CF93      		push r28
  44               	.LCFI0:
  45               		.cfi_def_cfa_offset 3
  46               		.cfi_offset 28, -2
  47 0002 DF93      		push r29
  48               	.LCFI1:
  49               		.cfi_def_cfa_offset 4
  50               		.cfi_offset 29, -3
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 2 */
  54               	.L__stack_usage = 2
  55 0004 EC01      		movw r28,r24
 406:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef PRIVATE_STRING
 407:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) {
  56               		.loc 1 407 0
  57 0006 8881      		ld r24,Y
  58               	.LVL5:
  59 0008 8230      		cpi r24,lo8(2)
  60 000a 00F0      		brlo .L3
  61               		.file 2 "keyboards/splitography/keymaps/beaklsi/private_string.h"
   1:keyboards/splitography/keymaps/beaklsi/private_string.h **** SEND_STRING("the keys of enoch");
  62               		.loc 2 1 0
  63 000c 80E0      		ldi r24,lo8(__c.5954)
  64 000e 90E0      		ldi r25,hi8(__c.5954)
  65 0010 0E94 0000 		call send_string_P
  66               	.LVL6:
  67               	.L3:
 408:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #include "private_string.h"
 409:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 410:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #endif
 411:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
  68               		.loc 1 411 0
  69 0014 CE01      		movw r24,r28
  70               	/* epilogue start */
 412:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  71               		.loc 1 412 0
  72 0016 DF91      		pop r29
  73 0018 CF91      		pop r28
  74               	.LVL7:
 411:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
  75               		.loc 1 411 0
  76 001a 0C94 0000 		jmp reset_tap_dance
  77               	.LVL8:
  78               		.cfi_endproc
  79               	.LFE149:
  81               		.section	.text.send,"ax",@progbits
  82               	.global	send
  84               	send:
  85               	.LFB150:
 413:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 414:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // config.h defined string
 415:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void send(qk_tap_dance_state_t *state, void *user_data)
 416:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
  86               		.loc 1 416 0
  87               		.cfi_startproc
  88               	.LVL9:
  89 0000 CF93      		push r28
  90               	.LCFI2:
  91               		.cfi_def_cfa_offset 3
  92               		.cfi_offset 28, -2
  93 0002 DF93      		push r29
  94               	.LCFI3:
  95               		.cfi_def_cfa_offset 4
  96               		.cfi_offset 29, -3
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 2 */
 100               	.L__stack_usage = 2
 101 0004 EC01      		movw r28,r24
 417:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) { SEND_STRING(PUBLIC_STRING); }
 102               		.loc 1 417 0
 103 0006 8881      		ld r24,Y
 104               	.LVL10:
 105 0008 8230      		cpi r24,lo8(2)
 106 000a 00F0      		brlo .L5
 107               		.loc 1 417 0 is_stmt 0 discriminator 1
 108 000c 80E0      		ldi r24,lo8(__c.5960)
 109 000e 90E0      		ldi r25,hi8(__c.5960)
 110 0010 0E94 0000 		call send_string_P
 111               	.LVL11:
 112               	.L5:
 418:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 113               		.loc 1 418 0 is_stmt 1
 114 0014 CE01      		movw r24,r28
 115               	/* epilogue start */
 419:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 116               		.loc 1 419 0
 117 0016 DF91      		pop r29
 118 0018 CF91      		pop r28
 119               	.LVL12:
 418:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 120               		.loc 1 418 0
 121 001a 0C94 0000 		jmp reset_tap_dance
 122               	.LVL13:
 123               		.cfi_endproc
 124               	.LFE150:
 126               		.section	.text.tap_mods,"ax",@progbits
 127               	.global	tap_mods
 129               	tap_mods:
 130               	.LFB110:
  17:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) { mods |= MOD_BIT(keycode); }
 131               		.loc 1 17 0
 132               		.cfi_startproc
 133               	.LVL14:
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
 138 0000 6770      		andi r22,7
 139 0002 7727      		clr r23
 140               	.LVL15:
 141 0004 21E0      		ldi r18,lo8(1)
 142 0006 30E0      		ldi r19,0
 143 0008 00C0      		rjmp 2f
 144               		1:
 145 000a 220F      		lsl r18
 146               		2:
 147 000c 6A95      		dec r22
 148 000e 02F4      		brpl 1b
 149 0010 4091 0000 		lds r20,mods
  18:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                       { mods &= ~(MOD_BIT(keycode)); }
 150               		.loc 1 18 0
 151 0014 FC01      		movw r30,r24
 152 0016 8281      		ldd r24,Z+2
 153               	.LVL16:
 154 0018 8823      		tst r24
 155 001a 01F0      		breq .L7
  18:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                       { mods &= ~(MOD_BIT(keycode)); }
 156               		.loc 1 18 0 is_stmt 0 discriminator 1
 157 001c 242B      		or r18,r20
 158               	.L9:
  19:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 159               		.loc 1 19 0 is_stmt 1
 160 001e 2093 0000 		sts mods,r18
 161               	/* epilogue start */
  20:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 162               		.loc 1 20 0
 163 0022 0895      		ret
 164               	.L7:
  19:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 165               		.loc 1 19 0
 166 0024 2095      		com r18
 167 0026 2423      		and r18,r20
 168 0028 00C0      		rjmp .L9
 169               		.cfi_endproc
 170               	.LFE110:
 172               		.section	.text.modifier,"ax",@progbits
 173               	.global	modifier
 175               	modifier:
 176               	.LFB111:
  24:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LCTL)) { f(KC_LCTL); }
 177               		.loc 1 24 0
 178               		.cfi_startproc
 179               	.LVL17:
 180 0000 CF93      		push r28
 181               	.LCFI4:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 28, -2
 184 0002 DF93      		push r29
 185               	.LCFI5:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 29, -3
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 2 */
 191               	.L__stack_usage = 2
 192 0004 EC01      		movw r28,r24
  25:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LGUI)) { f(KC_LGUI); }
 193               		.loc 1 25 0
 194 0006 8091 0000 		lds r24,mods
 195               	.LVL18:
 196 000a 80FF      		sbrs r24,0
 197 000c 00C0      		rjmp .L11
  25:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LGUI)) { f(KC_LGUI); }
 198               		.loc 1 25 0 is_stmt 0 discriminator 1
 199 000e 80EE      		ldi r24,lo8(-32)
 200 0010 FE01      		movw r30,r28
 201 0012 0995      		icall
 202               	.LVL19:
 203               	.L11:
  26:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LALT)) { f(KC_LALT); }
 204               		.loc 1 26 0 is_stmt 1
 205 0014 8091 0000 		lds r24,mods
 206 0018 83FF      		sbrs r24,3
 207 001a 00C0      		rjmp .L12
  26:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LALT)) { f(KC_LALT); }
 208               		.loc 1 26 0 is_stmt 0 discriminator 1
 209 001c 83EE      		ldi r24,lo8(-29)
 210 001e FE01      		movw r30,r28
 211 0020 0995      		icall
 212               	.LVL20:
 213               	.L12:
  27:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LSFT)) { f(KC_LSFT); }
 214               		.loc 1 27 0 is_stmt 1
 215 0022 8091 0000 		lds r24,mods
 216 0026 82FF      		sbrs r24,2
 217 0028 00C0      		rjmp .L13
  27:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LSFT)) { f(KC_LSFT); }
 218               		.loc 1 27 0 is_stmt 0 discriminator 1
 219 002a 82EE      		ldi r24,lo8(-30)
 220 002c FE01      		movw r30,r28
 221 002e 0995      		icall
 222               	.LVL21:
 223               	.L13:
  28:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_RSFT)) { f(KC_RSFT); }  // note: qmk macros all use left modifiers
 224               		.loc 1 28 0 is_stmt 1
 225 0030 8091 0000 		lds r24,mods
 226 0034 81FF      		sbrs r24,1
 227 0036 00C0      		rjmp .L14
  28:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_RSFT)) { f(KC_RSFT); }  // note: qmk macros all use left modifiers
 228               		.loc 1 28 0 is_stmt 0 discriminator 1
 229 0038 81EE      		ldi r24,lo8(-31)
 230 003a FE01      		movw r30,r28
 231 003c 0995      		icall
 232               	.LVL22:
 233               	.L14:
  29:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 234               		.loc 1 29 0 is_stmt 1
 235 003e 8091 0000 		lds r24,mods
 236 0042 85FF      		sbrs r24,5
 237 0044 00C0      		rjmp .L10
  29:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 238               		.loc 1 29 0 is_stmt 0 discriminator 1
 239 0046 85EE      		ldi r24,lo8(-27)
 240 0048 FE01      		movw r30,r28
 241               	/* epilogue start */
  30:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 242               		.loc 1 30 0 is_stmt 1 discriminator 1
 243 004a DF91      		pop r29
 244 004c CF91      		pop r28
 245               	.LVL23:
  29:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 246               		.loc 1 29 0 discriminator 1
 247 004e 0994      		ijmp
 248               	.LVL24:
 249               	.L10:
 250               	/* epilogue start */
  30:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 251               		.loc 1 30 0
 252 0050 DF91      		pop r29
 253 0052 CF91      		pop r28
 254               	.LVL25:
 255 0054 0895      		ret
 256               		.cfi_endproc
 257               	.LFE111:
 259               		.section	.text.on_shift,"ax",@progbits
 260               	.global	on_shift
 262               	on_shift:
 263               	.LFB112:
  34:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   // return (mods && ((mods & MOD_BIT(shift_key)) == mods) && (biton32(layer_state) == _BASE || bit
 264               		.loc 1 34 0
 265               		.cfi_startproc
 266               	.LVL26:
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 0 */
 270               	.L__stack_usage = 0
  37:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 271               		.loc 1 37 0
 272 0000 8770      		andi r24,7
 273 0002 9927      		clr r25
 274               	.LVL27:
 275 0004 21E0      		ldi r18,lo8(1)
 276 0006 30E0      		ldi r19,0
 277 0008 00C0      		rjmp 2f
 278               		1:
 279 000a 220F      		lsl r18
 280 000c 331F      		rol r19
 281               		2:
 282 000e 8A95      		dec r24
 283 0010 02F4      		brpl 1b
 284 0012 8091 0000 		lds r24,mods
 285 0016 90E0      		ldi r25,0
 286 0018 2823      		and r18,r24
 287 001a 3923      		and r19,r25
 288 001c 81E0      		ldi r24,lo8(1)
 289 001e 232B      		or r18,r19
 290 0020 01F4      		brne .L29
 291 0022 80E0      		ldi r24,0
 292               	.L29:
 293               	/* epilogue start */
  38:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 294               		.loc 1 38 0
 295 0024 0895      		ret
 296               		.cfi_endproc
 297               	.LFE112:
 299               		.section	.text.register_shift,"ax",@progbits
 300               	.global	register_shift
 302               	register_shift:
 303               	.LFB114:
  59:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code(KC_LSFT);
 304               		.loc 1 59 0
 305               		.cfi_startproc
 306               	.LVL28:
 307 0000 CF93      		push r28
 308               	.LCFI6:
 309               		.cfi_def_cfa_offset 3
 310               		.cfi_offset 28, -2
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 1 */
 314               	.L__stack_usage = 1
 315 0002 C82F      		mov r28,r24
  60:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code(keycode);
 316               		.loc 1 60 0
 317 0004 81EE      		ldi r24,lo8(-31)
 318               	.LVL29:
 319 0006 0E94 0000 		call register_code
 320               	.LVL30:
  61:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 321               		.loc 1 61 0
 322 000a 8C2F      		mov r24,r28
 323               	/* epilogue start */
  62:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 324               		.loc 1 62 0
 325 000c CF91      		pop r28
  61:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 326               		.loc 1 61 0
 327 000e 0C94 0000 		jmp register_code
 328               	.LVL31:
 329               		.cfi_endproc
 330               	.LFE114:
 332               		.section	.text.unregister_shift,"ax",@progbits
 333               	.global	unregister_shift
 335               	unregister_shift:
 336               	.LFB115:
  66:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(keycode);
 337               		.loc 1 66 0
 338               		.cfi_startproc
 339               	.LVL32:
 340               	/* prologue: function */
 341               	/* frame size = 0 */
 342               	/* stack size = 0 */
 343               	.L__stack_usage = 0
  67:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_LSFT);
 344               		.loc 1 67 0
 345 0000 0E94 0000 		call unregister_code
 346               	.LVL33:
  68:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 347               		.loc 1 68 0
 348 0004 81EE      		ldi r24,lo8(-31)
 349 0006 0C94 0000 		jmp unregister_code
 350               	.LVL34:
 351               		.cfi_endproc
 352               	.LFE115:
 354               		.section	.text.colon_reset,"ax",@progbits
 355               	.global	colon_reset
 357               	colon_reset:
 358               	.LFB131:
 258:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_SCLN);
 359               		.loc 1 258 0
 360               		.cfi_startproc
 361               	.LVL35:
 362               	/* prologue: function */
 363               	/* frame size = 0 */
 364               	/* stack size = 0 */
 365               	.L__stack_usage = 0
 259:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 366               		.loc 1 259 0
 367 0000 83E3      		ldi r24,lo8(51)
 368 0002 90E0      		ldi r25,0
 369               	.LVL36:
 370 0004 0C94 0000 		jmp unregister_shift
 371               	.LVL37:
 372               		.cfi_endproc
 373               	.LFE131:
 375               		.section	.text.lesser_reset,"ax",@progbits
 376               	.global	lesser_reset
 378               	lesser_reset:
 379               	.LFB133:
 275:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_COMM);
 380               		.loc 1 275 0
 381               		.cfi_startproc
 382               	.LVL38:
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 0 */
 386               	.L__stack_usage = 0
 276:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_LCTL);
 387               		.loc 1 276 0
 388 0000 86E3      		ldi r24,lo8(54)
 389 0002 90E0      		ldi r25,0
 390               	.LVL39:
 391 0004 0E94 0000 		call unregister_shift
 392               	.LVL40:
 277:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 393               		.loc 1 277 0
 394 0008 80EE      		ldi r24,lo8(-32)
 395 000a 0C94 0000 		jmp unregister_code
 396               	.LVL41:
 397               		.cfi_endproc
 398               	.LFE133:
 400               		.section	.text.greater_reset,"ax",@progbits
 401               	.global	greater_reset
 403               	greater_reset:
 404               	.LFB135:
 293:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_DOT);
 405               		.loc 1 293 0
 406               		.cfi_startproc
 407               	.LVL42:
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
 294:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_LSFT);
 412               		.loc 1 294 0
 413 0000 87E3      		ldi r24,lo8(55)
 414 0002 90E0      		ldi r25,0
 415               	.LVL43:
 416 0004 0E94 0000 		call unregister_shift
 417               	.LVL44:
 295:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 418               		.loc 1 295 0
 419 0008 81EE      		ldi r24,lo8(-31)
 420 000a 0C94 0000 		jmp unregister_code
 421               	.LVL45:
 422               		.cfi_endproc
 423               	.LFE135:
 425               		.section	.text.tilde_reset,"ax",@progbits
 426               	.global	tilde_reset
 428               	tilde_reset:
 429               	.LFB137:
 314:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_GRV);
 430               		.loc 1 314 0
 431               		.cfi_startproc
 432               	.LVL46:
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 0 */
 436               	.L__stack_usage = 0
 315:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_DOT);
 437               		.loc 1 315 0
 438 0000 85E3      		ldi r24,lo8(53)
 439 0002 90E0      		ldi r25,0
 440               	.LVL47:
 441 0004 0E94 0000 		call unregister_shift
 442               	.LVL48:
 316:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (on_shift(KC_RSFT)) { register_code(KC_LSFT); } // restore HOME_T, see process_record_user() T
 443               		.loc 1 316 0
 444 0008 87E3      		ldi r24,lo8(55)
 445 000a 0E94 0000 		call unregister_code
 446               	.LVL49:
 317:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 447               		.loc 1 317 0
 448 000e 85EE      		ldi r24,lo8(-27)
 449 0010 90E0      		ldi r25,0
 450 0012 0E94 0000 		call on_shift
 451               	.LVL50:
 452 0016 8823      		tst r24
 453 0018 01F0      		breq .L35
 317:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 454               		.loc 1 317 0 is_stmt 0 discriminator 1
 455 001a 81EE      		ldi r24,lo8(-31)
 456 001c 0C94 0000 		jmp register_code
 457               	.LVL51:
 458               	.L35:
 459               	/* epilogue start */
 318:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 460               		.loc 1 318 0 is_stmt 1
 461 0020 0895      		ret
 462               		.cfi_endproc
 463               	.LFE137:
 465               		.section	.text.percent_reset,"ax",@progbits
 466               	.global	percent_reset
 468               	percent_reset:
 469               	.LFB146:
 382:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_5);
 470               		.loc 1 382 0
 471               		.cfi_startproc
 472               	.LVL52:
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 0 */
 476               	.L__stack_usage = 0
 383:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_LALT);
 477               		.loc 1 383 0
 478 0000 82E2      		ldi r24,lo8(34)
 479 0002 90E0      		ldi r25,0
 480               	.LVL53:
 481 0004 0E94 0000 		call unregister_shift
 482               	.LVL54:
 384:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 483               		.loc 1 384 0
 484 0008 82EE      		ldi r24,lo8(-30)
 485 000a 0C94 0000 		jmp unregister_code
 486               	.LVL55:
 487               		.cfi_endproc
 488               	.LFE146:
 490               		.section	.text.xpaste_reset,"ax",@progbits
 491               	.global	xpaste_reset
 493               	xpaste_reset:
 494               	.LFB148:
 398:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_shift(KC_V);
 495               		.loc 1 398 0
 496               		.cfi_startproc
 497               	.LVL56:
 498               	/* prologue: function */
 499               	/* frame size = 0 */
 500               	/* stack size = 0 */
 501               	.L__stack_usage = 0
 399:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code (KC_LCTL);
 502               		.loc 1 399 0
 503 0000 89E1      		ldi r24,lo8(25)
 504 0002 90E0      		ldi r25,0
 505               	.LVL57:
 506 0004 0E94 0000 		call unregister_shift
 507               	.LVL58:
 400:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 508               		.loc 1 400 0
 509 0008 80EE      		ldi r24,lo8(-32)
 510 000a 0C94 0000 		jmp unregister_code
 511               	.LVL59:
 512               		.cfi_endproc
 513               	.LFE148:
 515               		.section	.text.emoji_reset,"ax",@progbits
 516               	.global	emoji_reset
 518               	emoji_reset:
 519               	.LFB162:
 520               		.cfi_startproc
 521               	/* prologue: function */
 522               	/* frame size = 0 */
 523               	/* stack size = 0 */
 524               	.L__stack_usage = 0
 525 0000 83E3      		ldi r24,lo8(51)
 526 0002 90E0      		ldi r25,0
 527 0004 0C94 0000 		jmp unregister_shift
 528               		.cfi_endproc
 529               	.LFE162:
 531               		.section	.text.tap_key,"ax",@progbits
 532               	.global	tap_key
 534               	tap_key:
 535               	.LFB116:
  73:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code  (keycode);
 536               		.loc 1 73 0
 537               		.cfi_startproc
 538               	.LVL60:
  73:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code  (keycode);
 539               		.loc 1 73 0
 540 0000 CF93      		push r28
 541               	.LCFI7:
 542               		.cfi_def_cfa_offset 3
 543               		.cfi_offset 28, -2
 544               	/* prologue: function */
 545               	/* frame size = 0 */
 546               	/* stack size = 1 */
 547               	.L__stack_usage = 1
 548 0002 C82F      		mov r28,r24
  74:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(keycode);
 549               		.loc 1 74 0
 550 0004 0E94 0000 		call register_code
 551               	.LVL61:
  75:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 552               		.loc 1 75 0
 553 0008 8C2F      		mov r24,r28
 554               	/* epilogue start */
  76:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 555               		.loc 1 76 0
 556 000a CF91      		pop r28
  75:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 557               		.loc 1 75 0
 558 000c 0C94 0000 		jmp unregister_code
 559               	.LVL62:
 560               		.cfi_endproc
 561               	.LFE116:
 563               		.section	.text.comma,"ax",@progbits
 564               	.global	comma
 566               	comma:
 567               	.LFB139:
 330:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_key(KC_COMM);
 568               		.loc 1 330 0
 569               		.cfi_startproc
 570               	.LVL63:
 571 0000 CF93      		push r28
 572               	.LCFI8:
 573               		.cfi_def_cfa_offset 3
 574               		.cfi_offset 28, -2
 575 0002 DF93      		push r29
 576               	.LCFI9:
 577               		.cfi_def_cfa_offset 4
 578               		.cfi_offset 29, -3
 579               	/* prologue: function */
 580               	/* frame size = 0 */
 581               	/* stack size = 2 */
 582               	.L__stack_usage = 2
 583 0004 EC01      		movw r28,r24
 331:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_SPC); }
 584               		.loc 1 331 0
 585 0006 86E3      		ldi r24,lo8(54)
 586 0008 90E0      		ldi r25,0
 587               	.LVL64:
 588 000a 0E94 0000 		call tap_key
 589               	.LVL65:
 332:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 590               		.loc 1 332 0
 591 000e 8881      		ld r24,Y
 592 0010 8230      		cpi r24,lo8(2)
 593 0012 00F0      		brlo .L42
 332:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 594               		.loc 1 332 0 is_stmt 0 discriminator 1
 595 0014 8CE2      		ldi r24,lo8(44)
 596 0016 90E0      		ldi r25,0
 597 0018 0E94 0000 		call tap_key
 598               	.LVL66:
 599               	.L42:
 333:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 600               		.loc 1 333 0 is_stmt 1
 601 001c CE01      		movw r24,r28
 602               	/* epilogue start */
 334:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 603               		.loc 1 334 0
 604 001e DF91      		pop r29
 605 0020 CF91      		pop r28
 606               	.LVL67:
 333:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 607               		.loc 1 333 0
 608 0022 0C94 0000 		jmp reset_tap_dance
 609               	.LVL68:
 610               		.cfi_endproc
 611               	.LFE139:
 613               		.section	.text.tap_shift,"ax",@progbits
 614               	.global	tap_shift
 616               	tap_shift:
 617               	.LFB117:
  79:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   register_code  (KC_LSFT);
 618               		.loc 1 79 0
 619               		.cfi_startproc
 620               	.LVL69:
 621 0000 CF93      		push r28
 622               	.LCFI10:
 623               		.cfi_def_cfa_offset 3
 624               		.cfi_offset 28, -2
 625 0002 DF93      		push r29
 626               	.LCFI11:
 627               		.cfi_def_cfa_offset 4
 628               		.cfi_offset 29, -3
 629               	/* prologue: function */
 630               	/* frame size = 0 */
 631               	/* stack size = 2 */
 632               	.L__stack_usage = 2
 633 0004 EC01      		movw r28,r24
  80:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_key        (keycode);
 634               		.loc 1 80 0
 635 0006 81EE      		ldi r24,lo8(-31)
 636               	.LVL70:
 637 0008 0E94 0000 		call register_code
 638               	.LVL71:
  81:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(KC_LSFT);
 639               		.loc 1 81 0
 640 000c CE01      		movw r24,r28
 641 000e 0E94 0000 		call tap_key
 642               	.LVL72:
  82:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 643               		.loc 1 82 0
 644 0012 81EE      		ldi r24,lo8(-31)
 645               	/* epilogue start */
  83:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 646               		.loc 1 83 0
 647 0014 DF91      		pop r29
 648 0016 CF91      		pop r28
 649               	.LVL73:
  82:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 650               		.loc 1 82 0
 651 0018 0C94 0000 		jmp unregister_code
 652               	.LVL74:
 653               		.cfi_endproc
 654               	.LFE117:
 656               		.section	.rodata.tilde.str1.1,"aMS",@progbits,1
 657               	.LC0:
 658 0000 7E2F 00   		.string	"~/"
 659               		.section	.text.tilde,"ax",@progbits
 660               	.global	tilde
 662               	tilde:
 663               	.LFB136:
 300:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (on_shift(KC_RSFT)) {                  // dot, shift -> tilde, see process_record_user() TD_TI
 664               		.loc 1 300 0
 665               		.cfi_startproc
 666               	.LVL75:
 667 0000 CF93      		push r28
 668               	.LCFI12:
 669               		.cfi_def_cfa_offset 3
 670               		.cfi_offset 28, -2
 671 0002 DF93      		push r29
 672               	.LCFI13:
 673               		.cfi_def_cfa_offset 4
 674               		.cfi_offset 29, -3
 675               	/* prologue: function */
 676               	/* frame size = 0 */
 677               	/* stack size = 2 */
 678               	.L__stack_usage = 2
 679 0004 EC01      		movw r28,r24
 301:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->count > 1) {
 680               		.loc 1 301 0
 681 0006 85EE      		ldi r24,lo8(-27)
 682 0008 90E0      		ldi r25,0
 683               	.LVL76:
 684 000a 0E94 0000 		call on_shift
 685               	.LVL77:
 686 000e 9F81      		ldd r25,Y+7
 687 0010 8823      		tst r24
 688 0012 01F0      		breq .L45
 302:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (state->pressed)                     { register_shift(KC_GRV); }
 689               		.loc 1 302 0
 690 0014 8881      		ld r24,Y
 691 0016 8230      		cpi r24,lo8(2)
 692 0018 00F0      		brlo .L46
 303:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       else if (state->count == 2)             { send_string("~/"); } 
 693               		.loc 1 303 0
 694 001a 9923      		tst r25
 695 001c 01F0      		breq .L47
 696               	.L52:
 303:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       else if (state->count == 2)             { send_string("~/"); } 
 697               		.loc 1 303 0 is_stmt 0 discriminator 1
 698 001e 85E3      		ldi r24,lo8(53)
 699 0020 90E0      		ldi r25,0
 700 0022 0E94 0000 		call register_shift
 701               	.LVL78:
 702               	.L48:
 310:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 703               		.loc 1 310 0 is_stmt 1
 704 0026 CE01      		movw r24,r28
 705               	/* epilogue start */
 311:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 706               		.loc 1 311 0
 707 0028 DF91      		pop r29
 708 002a CF91      		pop r28
 709               	.LVL79:
 310:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 710               		.loc 1 310 0
 711 002c 0C94 0000 		jmp reset_tap_dance
 712               	.LVL80:
 713               	.L47:
 304:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       else for (i = 0; i < state->count; i++) { tap_shift(KC_GRV); }
 714               		.loc 1 304 0
 715 0030 8230      		cpi r24,lo8(2)
 716 0032 01F4      		brne .L49
 304:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       else for (i = 0; i < state->count; i++) { tap_shift(KC_GRV); }
 717               		.loc 1 304 0 is_stmt 0 discriminator 1
 718 0034 80E0      		ldi r24,lo8(.LC0)
 719 0036 90E0      		ldi r25,hi8(.LC0)
 720 0038 0E94 0000 		call send_string
 721               	.LVL81:
 722 003c 00C0      		rjmp .L48
 723               	.L49:
 305:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 724               		.loc 1 305 0 is_stmt 1
 725 003e 1092 0000 		sts i,__zero_reg__
 726               	.L50:
 305:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 727               		.loc 1 305 0 is_stmt 0 discriminator 1
 728 0042 9881      		ld r25,Y
 729 0044 8091 0000 		lds r24,i
 730 0048 8917      		cp r24,r25
 731 004a 00F4      		brsh .L48
 305:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 732               		.loc 1 305 0 discriminator 3
 733 004c 85E3      		ldi r24,lo8(53)
 734 004e 90E0      		ldi r25,0
 735 0050 0E94 0000 		call tap_shift
 736               	.LVL82:
 737 0054 8091 0000 		lds r24,i
 738 0058 8F5F      		subi r24,lo8(-(1))
 739 005a 8093 0000 		sts i,r24
 740 005e 00C0      		rjmp .L50
 741               	.L46:
 307:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 742               		.loc 1 307 0 is_stmt 1
 743 0060 9111      		cpse r25,__zero_reg__
 744 0062 00C0      		rjmp .L52
 307:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 745               		.loc 1 307 0 is_stmt 0 discriminator 2
 746 0064 85E3      		ldi r24,lo8(53)
 747 0066 90E0      		ldi r25,0
 748 0068 0E94 0000 		call tap_shift
 749               	.LVL83:
 750 006c 00C0      		rjmp .L48
 751               	.L45:
 309:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 752               		.loc 1 309 0 is_stmt 1
 753 006e 9923      		tst r25
 754 0070 01F0      		breq .L53
 309:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 755               		.loc 1 309 0 is_stmt 0 discriminator 1
 756 0072 87E3      		ldi r24,lo8(55)
 757 0074 0E94 0000 		call register_code
 758               	.LVL84:
 759 0078 00C0      		rjmp .L48
 760               	.L53:
 309:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 761               		.loc 1 309 0 discriminator 2
 762 007a 87E3      		ldi r24,lo8(55)
 763 007c 90E0      		ldi r25,0
 764 007e 0E94 0000 		call tap_key
 765               	.LVL85:
 766 0082 00C0      		rjmp .L48
 767               		.cfi_endproc
 768               	.LFE136:
 770               		.section	.text.asterisk,"ax",@progbits
 771               	.global	asterisk
 773               	asterisk:
 774               	.LFB138:
 323:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_DOT); }
 775               		.loc 1 323 0 is_stmt 1
 776               		.cfi_startproc
 777               	.LVL86:
 778 0000 CF93      		push r28
 779               	.LCFI14:
 780               		.cfi_def_cfa_offset 3
 781               		.cfi_offset 28, -2
 782 0002 DF93      		push r29
 783               	.LCFI15:
 784               		.cfi_def_cfa_offset 4
 785               		.cfi_offset 29, -3
 786               	/* prologue: function */
 787               	/* frame size = 0 */
 788               	/* stack size = 2 */
 789               	.L__stack_usage = 2
 790 0004 EC01      		movw r28,r24
 324:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_shift(KC_8);
 791               		.loc 1 324 0
 792 0006 8881      		ld r24,Y
 793               	.LVL87:
 794 0008 8230      		cpi r24,lo8(2)
 795 000a 00F0      		brlo .L55
 324:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_shift(KC_8);
 796               		.loc 1 324 0 is_stmt 0 discriminator 1
 797 000c 87E3      		ldi r24,lo8(55)
 798 000e 90E0      		ldi r25,0
 799 0010 0E94 0000 		call tap_key
 800               	.LVL88:
 801               	.L55:
 325:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 802               		.loc 1 325 0 is_stmt 1
 803 0014 85E2      		ldi r24,lo8(37)
 804 0016 90E0      		ldi r25,0
 805 0018 0E94 0000 		call tap_shift
 806               	.LVL89:
 326:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 807               		.loc 1 326 0
 808 001c CE01      		movw r24,r28
 809               	/* epilogue start */
 327:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 810               		.loc 1 327 0
 811 001e DF91      		pop r29
 812 0020 CF91      		pop r28
 813               	.LVL90:
 326:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 814               		.loc 1 326 0
 815 0022 0C94 0000 		jmp reset_tap_dance
 816               	.LVL91:
 817               		.cfi_endproc
 818               	.LFE138:
 820               		.section	.text.dot,"ax",@progbits
 821               	.global	dot
 823               	dot:
 824               	.LFB140:
 337:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   state->count > 1 ? tap_shift(KC_COLN) : tap_key(KC_DOT);
 825               		.loc 1 337 0
 826               		.cfi_startproc
 827               	.LVL92:
 828 0000 CF93      		push r28
 829               	.LCFI16:
 830               		.cfi_def_cfa_offset 3
 831               		.cfi_offset 28, -2
 832 0002 DF93      		push r29
 833               	.LCFI17:
 834               		.cfi_def_cfa_offset 4
 835               		.cfi_offset 29, -3
 836               	/* prologue: function */
 837               	/* frame size = 0 */
 838               	/* stack size = 2 */
 839               	.L__stack_usage = 2
 840 0004 EC01      		movw r28,r24
 338:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 841               		.loc 1 338 0
 842 0006 8881      		ld r24,Y
 843               	.LVL93:
 844 0008 8230      		cpi r24,lo8(2)
 845 000a 00F0      		brlo .L57
 338:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 846               		.loc 1 338 0 is_stmt 0 discriminator 1
 847 000c 83E3      		ldi r24,lo8(51)
 848 000e 92E0      		ldi r25,lo8(2)
 849 0010 0E94 0000 		call tap_shift
 850               	.LVL94:
 851               	.L58:
 339:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 852               		.loc 1 339 0 is_stmt 1
 853 0014 CE01      		movw r24,r28
 854               	/* epilogue start */
 340:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 855               		.loc 1 340 0
 856 0016 DF91      		pop r29
 857 0018 CF91      		pop r28
 858               	.LVL95:
 339:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 859               		.loc 1 339 0
 860 001a 0C94 0000 		jmp reset_tap_dance
 861               	.LVL96:
 862               	.L57:
 338:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 863               		.loc 1 338 0 discriminator 2
 864 001e 87E3      		ldi r24,lo8(55)
 865 0020 90E0      		ldi r25,0
 866 0022 0E94 0000 		call tap_key
 867               	.LVL97:
 868 0026 00C0      		rjmp .L58
 869               		.cfi_endproc
 870               	.LFE140:
 872               		.section	.text.xpaste,"ax",@progbits
 873               	.global	xpaste
 875               	xpaste:
 876               	.LFB147:
 390:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1)    { CTL_SFT_V; IRC_ENTER; }
 877               		.loc 1 390 0
 878               		.cfi_startproc
 879               	.LVL98:
 880 0000 CF93      		push r28
 881               	.LCFI18:
 882               		.cfi_def_cfa_offset 3
 883               		.cfi_offset 28, -2
 884 0002 DF93      		push r29
 885               	.LCFI19:
 886               		.cfi_def_cfa_offset 4
 887               		.cfi_offset 29, -3
 888               	/* prologue: function */
 889               	/* frame size = 0 */
 890               	/* stack size = 2 */
 891               	.L__stack_usage = 2
 892 0004 EC01      		movw r28,r24
 391:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_shift(KC_V); }
 893               		.loc 1 391 0
 894 0006 8881      		ld r24,Y
 895               	.LVL99:
 896 0008 8230      		cpi r24,lo8(2)
 897 000a 00F0      		brlo .L60
 391:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_shift(KC_V); }
 898               		.loc 1 391 0 is_stmt 0 discriminator 1
 899 000c 80EE      		ldi r24,lo8(-32)
 900 000e 0E94 0000 		call register_code
 901               	.LVL100:
 902 0012 89E1      		ldi r24,lo8(25)
 903 0014 90E0      		ldi r25,0
 904 0016 0E94 0000 		call tap_shift
 905               	.LVL101:
 906 001a 80EE      		ldi r24,lo8(-32)
 907 001c 0E94 0000 		call unregister_code
 908               	.LVL102:
 909               	.LBB6:
 910               	.LBB7:
 911               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 912               		.loc 3 187 0 is_stmt 1 discriminator 1
 913 0020 8FE3      		ldi r24,lo8(-25537)
 914 0022 9CE9      		ldi r25,hi8(-25537)
 915 0024 0197      	1:	sbiw r24,1
 916 0026 01F4      		brne 1b
 917 0028 00C0      		rjmp .
 918 002a 0000      		nop
 919               	.LVL103:
 920               	.LBE7:
 921               	.LBE6:
 391:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_shift(KC_V); }
 922               		.loc 1 391 0 discriminator 1
 923 002c 88E2      		ldi r24,lo8(40)
 924 002e 90E0      		ldi r25,0
 925 0030 0E94 0000 		call tap_key
 926               	.LVL104:
 927               	.L61:
 394:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 928               		.loc 1 394 0
 929 0034 CE01      		movw r24,r28
 930               	/* epilogue start */
 395:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 931               		.loc 1 395 0
 932 0036 DF91      		pop r29
 933 0038 CF91      		pop r28
 934               	.LVL105:
 394:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 935               		.loc 1 394 0
 936 003a 0C94 0000 		jmp reset_tap_dance
 937               	.LVL106:
 938               	.L60:
 392:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                     { CTL_SFT_V; }
 939               		.loc 1 392 0
 940 003e 8F81      		ldd r24,Y+7
 941 0040 8823      		tst r24
 942 0042 01F0      		breq .L62
 392:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                     { CTL_SFT_V; }
 943               		.loc 1 392 0 is_stmt 0 discriminator 1
 944 0044 80EE      		ldi r24,lo8(-32)
 945 0046 0E94 0000 		call register_code
 946               	.LVL107:
 947 004a 89E1      		ldi r24,lo8(25)
 948 004c 90E0      		ldi r25,0
 949 004e 0E94 0000 		call register_shift
 950               	.LVL108:
 951 0052 00C0      		rjmp .L61
 952               	.LVL109:
 953               	.L62:
 393:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 954               		.loc 1 393 0 is_stmt 1
 955 0054 80EE      		ldi r24,lo8(-32)
 956 0056 0E94 0000 		call register_code
 957               	.LVL110:
 958 005a 89E1      		ldi r24,lo8(25)
 959 005c 90E0      		ldi r25,0
 960 005e 0E94 0000 		call tap_shift
 961               	.LVL111:
 962 0062 80EE      		ldi r24,lo8(-32)
 963 0064 0E94 0000 		call unregister_code
 964               	.LVL112:
 965 0068 00C0      		rjmp .L61
 966               		.cfi_endproc
 967               	.LFE147:
 969               		.section	.text.double_tap,"ax",@progbits
 970               	.global	double_tap
 972               	double_tap:
 973               	.LFB118:
  86:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   shift ? tap_shift(keycode) : tap_key(keycode);
 974               		.loc 1 86 0
 975               		.cfi_startproc
 976               	.LVL113:
 977 0000 1F93      		push r17
 978               	.LCFI20:
 979               		.cfi_def_cfa_offset 3
 980               		.cfi_offset 17, -2
 981 0002 CF93      		push r28
 982               	.LCFI21:
 983               		.cfi_def_cfa_offset 4
 984               		.cfi_offset 28, -3
 985 0004 DF93      		push r29
 986               	.LCFI22:
 987               		.cfi_def_cfa_offset 5
 988               		.cfi_offset 29, -4
 989               	/* prologue: function */
 990               	/* frame size = 0 */
 991               	/* stack size = 3 */
 992               	.L__stack_usage = 3
 993 0006 182F      		mov r17,r24
 994 0008 EA01      		movw r28,r20
  87:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (count > 1) { shift ? tap_shift(keycode) : tap_key(keycode); }
 995               		.loc 1 87 0
 996 000a CA01      		movw r24,r20
 997               	.LVL114:
 998 000c 6623      		tst r22
 999 000e 01F0      		breq .L64
  87:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (count > 1) { shift ? tap_shift(keycode) : tap_key(keycode); }
 1000               		.loc 1 87 0 is_stmt 0 discriminator 1
 1001 0010 0E94 0000 		call tap_shift
 1002               	.LVL115:
  88:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1003               		.loc 1 88 0 is_stmt 1 discriminator 1
 1004 0014 1230      		cpi r17,lo8(2)
 1005 0016 00F4      		brsh .L65
 1006               	.L63:
 1007               	/* epilogue start */
  89:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1008               		.loc 1 89 0
 1009 0018 DF91      		pop r29
 1010 001a CF91      		pop r28
 1011               	.LVL116:
 1012 001c 1F91      		pop r17
 1013               	.LVL117:
 1014 001e 0895      		ret
 1015               	.LVL118:
 1016               	.L64:
  87:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (count > 1) { shift ? tap_shift(keycode) : tap_key(keycode); }
 1017               		.loc 1 87 0 discriminator 2
 1018 0020 0E94 0000 		call tap_key
 1019               	.LVL119:
  88:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1020               		.loc 1 88 0 discriminator 2
 1021 0024 1230      		cpi r17,lo8(2)
 1022 0026 00F0      		brlo .L63
  88:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1023               		.loc 1 88 0 is_stmt 0 discriminator 3
 1024 0028 CE01      		movw r24,r28
 1025               	/* epilogue start */
  89:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1026               		.loc 1 89 0 is_stmt 1 discriminator 3
 1027 002a DF91      		pop r29
 1028 002c CF91      		pop r28
 1029               	.LVL120:
 1030 002e 1F91      		pop r17
 1031               	.LVL121:
  88:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1032               		.loc 1 88 0 discriminator 3
 1033 0030 0C94 0000 		jmp tap_key
 1034               	.LVL122:
 1035               	.L65:
  88:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1036               		.loc 1 88 0 is_stmt 0 discriminator 2
 1037 0034 CE01      		movw r24,r28
 1038               	/* epilogue start */
  89:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1039               		.loc 1 89 0 is_stmt 1 discriminator 2
 1040 0036 DF91      		pop r29
 1041 0038 CF91      		pop r28
 1042               	.LVL123:
 1043 003a 1F91      		pop r17
 1044               	.LVL124:
  88:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1045               		.loc 1 88 0 discriminator 2
 1046 003c 0C94 0000 		jmp tap_shift
 1047               	.LVL125:
 1048               		.cfi_endproc
 1049               	.LFE118:
 1051               		.section	.rodata.colon.str1.1,"aMS",@progbits,1
 1052               	.LC1:
 1053 0000 203A 3A20 		.string	" :: "
 1053      00
 1054               		.section	.text.colon,"ax",@progbits
 1055               	.global	colon
 1057               	colon:
 1058               	.LFB130:
 247:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 2) {
 1059               		.loc 1 247 0
 1060               		.cfi_startproc
 1061               	.LVL126:
 1062 0000 CF93      		push r28
 1063               	.LCFI23:
 1064               		.cfi_def_cfa_offset 3
 1065               		.cfi_offset 28, -2
 1066 0002 DF93      		push r29
 1067               	.LCFI24:
 1068               		.cfi_def_cfa_offset 4
 1069               		.cfi_offset 29, -3
 1070               	/* prologue: function */
 1071               	/* frame size = 0 */
 1072               	/* stack size = 2 */
 1073               	.L__stack_usage = 2
 1074 0004 EC01      		movw r28,r24
 248:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_SCLN); }
 1075               		.loc 1 248 0
 1076 0006 8881      		ld r24,Y
 1077               	.LVL127:
 1078 0008 9F81      		ldd r25,Y+7
 1079 000a 8330      		cpi r24,lo8(3)
 1080 000c 00F0      		brlo .L70
 249:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" :: "); }
 1081               		.loc 1 249 0
 1082 000e 9923      		tst r25
 1083 0010 01F0      		breq .L71
 1084               	.L76:
 249:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" :: "); }
 1085               		.loc 1 249 0 is_stmt 0 discriminator 1
 1086 0012 83E3      		ldi r24,lo8(51)
 1087 0014 90E0      		ldi r25,0
 1088 0016 0E94 0000 		call register_shift
 1089               	.LVL128:
 1090               	.L72:
 254:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1091               		.loc 1 254 0 is_stmt 1
 1092 001a CE01      		movw r24,r28
 1093               	/* epilogue start */
 255:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1094               		.loc 1 255 0
 1095 001c DF91      		pop r29
 1096 001e CF91      		pop r28
 1097               	.LVL129:
 254:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1098               		.loc 1 254 0
 1099 0020 0C94 0000 		jmp reset_tap_dance
 1100               	.LVL130:
 1101               	.L71:
 250:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_SCLN); }
 1102               		.loc 1 250 0
 1103 0024 8330      		cpi r24,lo8(3)
 1104 0026 01F4      		brne .L73
 250:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_SCLN); }
 1105               		.loc 1 250 0 is_stmt 0 discriminator 1
 1106 0028 80E0      		ldi r24,lo8(.LC1)
 1107 002a 90E0      		ldi r25,hi8(.LC1)
 1108 002c 0E94 0000 		call send_string
 1109               	.LVL131:
 1110 0030 00C0      		rjmp .L72
 1111               	.LVL132:
 1112               	.L73:
 251:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1113               		.loc 1 251 0 is_stmt 1
 1114 0032 1092 0000 		sts i,__zero_reg__
 1115               	.LVL133:
 1116               	.L74:
 251:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1117               		.loc 1 251 0 is_stmt 0 discriminator 1
 1118 0036 9881      		ld r25,Y
 1119 0038 8091 0000 		lds r24,i
 1120 003c 8917      		cp r24,r25
 1121 003e 00F4      		brsh .L72
 251:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1122               		.loc 1 251 0 discriminator 3
 1123 0040 83E3      		ldi r24,lo8(51)
 1124 0042 90E0      		ldi r25,0
 1125 0044 0E94 0000 		call tap_shift
 1126               	.LVL134:
 1127 0048 8091 0000 		lds r24,i
 1128 004c 8F5F      		subi r24,lo8(-(1))
 1129 004e 8093 0000 		sts i,r24
 1130 0052 00C0      		rjmp .L74
 1131               	.LVL135:
 1132               	.L70:
 253:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1133               		.loc 1 253 0 is_stmt 1
 1134 0054 9111      		cpse r25,__zero_reg__
 1135 0056 00C0      		rjmp .L76
 253:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1136               		.loc 1 253 0 is_stmt 0 discriminator 2
 1137 0058 43E3      		ldi r20,lo8(51)
 1138 005a 50E0      		ldi r21,0
 1139 005c 61E0      		ldi r22,lo8(1)
 1140               	.LVL136:
 1141 005e 0E94 0000 		call double_tap
 1142               	.LVL137:
 1143 0062 00C0      		rjmp .L72
 1144               		.cfi_endproc
 1145               	.LFE130:
 1147               		.section	.rodata.lesser.str1.1,"aMS",@progbits,1
 1148               	.LC2:
 1149 0000 203C 2D20 		.string	" <- "
 1149      00
 1150               		.section	.text.lesser,"ax",@progbits
 1151               	.global	lesser
 1153               	lesser:
 1154               	.LFB132:
 263:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 2) {
 1155               		.loc 1 263 0 is_stmt 1
 1156               		.cfi_startproc
 1157               	.LVL138:
 1158 0000 CF93      		push r28
 1159               	.LCFI25:
 1160               		.cfi_def_cfa_offset 3
 1161               		.cfi_offset 28, -2
 1162 0002 DF93      		push r29
 1163               	.LCFI26:
 1164               		.cfi_def_cfa_offset 4
 1165               		.cfi_offset 29, -3
 1166               	/* prologue: function */
 1167               	/* frame size = 0 */
 1168               	/* stack size = 2 */
 1169               	.L__stack_usage = 2
 1170 0004 EC01      		movw r28,r24
 264:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_COMM); }
 1171               		.loc 1 264 0
 1172 0006 8881      		ld r24,Y
 1173               	.LVL139:
 1174 0008 9F81      		ldd r25,Y+7
 1175 000a 8330      		cpi r24,lo8(3)
 1176 000c 00F0      		brlo .L78
 265:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" <- "); }
 1177               		.loc 1 265 0
 1178 000e 9923      		tst r25
 1179 0010 01F0      		breq .L79
 1180               	.L85:
 265:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" <- "); }
 1181               		.loc 1 265 0 is_stmt 0 discriminator 1
 1182 0012 86E3      		ldi r24,lo8(54)
 1183 0014 90E0      		ldi r25,0
 1184 0016 0E94 0000 		call register_shift
 1185               	.LVL140:
 1186               	.L80:
 271:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1187               		.loc 1 271 0 is_stmt 1
 1188 001a CE01      		movw r24,r28
 1189               	/* epilogue start */
 272:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1190               		.loc 1 272 0
 1191 001c DF91      		pop r29
 1192 001e CF91      		pop r28
 1193               	.LVL141:
 271:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1194               		.loc 1 271 0
 1195 0020 0C94 0000 		jmp reset_tap_dance
 1196               	.LVL142:
 1197               	.L79:
 266:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_COMM); }
 1198               		.loc 1 266 0
 1199 0024 8330      		cpi r24,lo8(3)
 1200 0026 01F4      		brne .L81
 266:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_COMM); }
 1201               		.loc 1 266 0 is_stmt 0 discriminator 1
 1202 0028 80E0      		ldi r24,lo8(.LC2)
 1203 002a 90E0      		ldi r25,hi8(.LC2)
 1204 002c 0E94 0000 		call send_string
 1205               	.LVL143:
 1206 0030 00C0      		rjmp .L80
 1207               	.LVL144:
 1208               	.L81:
 267:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1209               		.loc 1 267 0 is_stmt 1
 1210 0032 1092 0000 		sts i,__zero_reg__
 1211               	.LVL145:
 1212               	.L82:
 267:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1213               		.loc 1 267 0 is_stmt 0 discriminator 1
 1214 0036 9881      		ld r25,Y
 1215 0038 8091 0000 		lds r24,i
 1216 003c 8917      		cp r24,r25
 1217 003e 00F4      		brsh .L80
 267:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1218               		.loc 1 267 0 discriminator 3
 1219 0040 86E3      		ldi r24,lo8(54)
 1220 0042 90E0      		ldi r25,0
 1221 0044 0E94 0000 		call tap_shift
 1222               	.LVL146:
 1223 0048 8091 0000 		lds r24,i
 1224 004c 8F5F      		subi r24,lo8(-(1))
 1225 004e 8093 0000 		sts i,r24
 1226 0052 00C0      		rjmp .L82
 1227               	.LVL147:
 1228               	.L78:
 269:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                            { state->pressed ? register_code(KC_LCTL) : doubl
 1229               		.loc 1 269 0 is_stmt 1
 1230 0054 8230      		cpi r24,lo8(2)
 1231 0056 01F4      		brne .L84
 269:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                            { state->pressed ? register_code(KC_LCTL) : doubl
 1232               		.loc 1 269 0 is_stmt 0 discriminator 1
 1233 0058 9111      		cpse r25,__zero_reg__
 1234 005a 00C0      		rjmp .L85
 1235               	.L86:
 270:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1236               		.loc 1 270 0 is_stmt 1 discriminator 2
 1237 005c 46E3      		ldi r20,lo8(54)
 1238 005e 50E0      		ldi r21,0
 1239 0060 61E0      		ldi r22,lo8(1)
 1240               	.LVL148:
 1241 0062 0E94 0000 		call double_tap
 1242               	.LVL149:
 1243 0066 00C0      		rjmp .L80
 1244               	.LVL150:
 1245               	.L84:
 270:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1246               		.loc 1 270 0 is_stmt 0
 1247 0068 9923      		tst r25
 1248 006a 01F0      		breq .L86
 270:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1249               		.loc 1 270 0 discriminator 1
 1250 006c 80EE      		ldi r24,lo8(-32)
 1251 006e 0E94 0000 		call register_code
 1252               	.LVL151:
 1253 0072 00C0      		rjmp .L80
 1254               		.cfi_endproc
 1255               	.LFE132:
 1257               		.section	.rodata.greater.str1.1,"aMS",@progbits,1
 1258               	.LC3:
 1259 0000 202D 3E20 		.string	" -> "
 1259      00
 1260               		.section	.text.greater,"ax",@progbits
 1261               	.global	greater
 1263               	greater:
 1264               	.LFB134:
 281:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 2) {
 1265               		.loc 1 281 0 is_stmt 1
 1266               		.cfi_startproc
 1267               	.LVL152:
 1268 0000 CF93      		push r28
 1269               	.LCFI27:
 1270               		.cfi_def_cfa_offset 3
 1271               		.cfi_offset 28, -2
 1272 0002 DF93      		push r29
 1273               	.LCFI28:
 1274               		.cfi_def_cfa_offset 4
 1275               		.cfi_offset 29, -3
 1276               	/* prologue: function */
 1277               	/* frame size = 0 */
 1278               	/* stack size = 2 */
 1279               	.L__stack_usage = 2
 1280 0004 EC01      		movw r28,r24
 282:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_DOT); }
 1281               		.loc 1 282 0
 1282 0006 8881      		ld r24,Y
 1283               	.LVL153:
 1284 0008 9F81      		ldd r25,Y+7
 1285 000a 8330      		cpi r24,lo8(3)
 1286 000c 00F0      		brlo .L91
 283:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" -> "); }
 1287               		.loc 1 283 0
 1288 000e 9923      		tst r25
 1289 0010 01F0      		breq .L92
 1290               	.L98:
 283:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 3)             { send_string(" -> "); }
 1291               		.loc 1 283 0 is_stmt 0 discriminator 1
 1292 0012 87E3      		ldi r24,lo8(55)
 1293 0014 90E0      		ldi r25,0
 1294 0016 0E94 0000 		call register_shift
 1295               	.LVL154:
 1296               	.L93:
 289:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1297               		.loc 1 289 0 is_stmt 1
 1298 001a CE01      		movw r24,r28
 1299               	/* epilogue start */
 290:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1300               		.loc 1 290 0
 1301 001c DF91      		pop r29
 1302 001e CF91      		pop r28
 1303               	.LVL155:
 289:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1304               		.loc 1 289 0
 1305 0020 0C94 0000 		jmp reset_tap_dance
 1306               	.LVL156:
 1307               	.L92:
 284:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_DOT); }
 1308               		.loc 1 284 0
 1309 0024 8330      		cpi r24,lo8(3)
 1310 0026 01F4      		brne .L94
 284:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_DOT); }
 1311               		.loc 1 284 0 is_stmt 0 discriminator 1
 1312 0028 80E0      		ldi r24,lo8(.LC3)
 1313 002a 90E0      		ldi r25,hi8(.LC3)
 1314 002c 0E94 0000 		call send_string
 1315               	.LVL157:
 1316 0030 00C0      		rjmp .L93
 1317               	.LVL158:
 1318               	.L94:
 285:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1319               		.loc 1 285 0 is_stmt 1
 1320 0032 1092 0000 		sts i,__zero_reg__
 1321               	.LVL159:
 1322               	.L95:
 285:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1323               		.loc 1 285 0 is_stmt 0 discriminator 1
 1324 0036 9881      		ld r25,Y
 1325 0038 8091 0000 		lds r24,i
 1326 003c 8917      		cp r24,r25
 1327 003e 00F4      		brsh .L93
 285:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1328               		.loc 1 285 0 discriminator 3
 1329 0040 87E3      		ldi r24,lo8(55)
 1330 0042 90E0      		ldi r25,0
 1331 0044 0E94 0000 		call tap_shift
 1332               	.LVL160:
 1333 0048 8091 0000 		lds r24,i
 1334 004c 8F5F      		subi r24,lo8(-(1))
 1335 004e 8093 0000 		sts i,r24
 1336 0052 00C0      		rjmp .L95
 1337               	.LVL161:
 1338               	.L91:
 287:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                            { state->pressed ? register_code(KC_LSFT) : doubl
 1339               		.loc 1 287 0 is_stmt 1
 1340 0054 8230      		cpi r24,lo8(2)
 1341 0056 01F4      		brne .L97
 287:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                            { state->pressed ? register_code(KC_LSFT) : doubl
 1342               		.loc 1 287 0 is_stmt 0 discriminator 1
 1343 0058 9111      		cpse r25,__zero_reg__
 1344 005a 00C0      		rjmp .L98
 1345               	.L99:
 288:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1346               		.loc 1 288 0 is_stmt 1 discriminator 2
 1347 005c 47E3      		ldi r20,lo8(55)
 1348 005e 50E0      		ldi r21,0
 1349 0060 61E0      		ldi r22,lo8(1)
 1350               	.LVL162:
 1351 0062 0E94 0000 		call double_tap
 1352               	.LVL163:
 1353 0066 00C0      		rjmp .L93
 1354               	.LVL164:
 1355               	.L97:
 288:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1356               		.loc 1 288 0 is_stmt 0
 1357 0068 9923      		tst r25
 1358 006a 01F0      		breq .L99
 288:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1359               		.loc 1 288 0 discriminator 1
 1360 006c 81EE      		ldi r24,lo8(-31)
 1361 006e 0E94 0000 		call register_code
 1362               	.LVL165:
 1363 0072 00C0      		rjmp .L93
 1364               		.cfi_endproc
 1365               	.LFE134:
 1367               		.section	.text.emoji,"ax",@progbits
 1368               	.global	emoji
 1370               	emoji:
 1371               	.LFB141:
 343:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1) {
 1372               		.loc 1 343 0 is_stmt 1
 1373               		.cfi_startproc
 1374               	.LVL166:
 1375 0000 CF93      		push r28
 1376               	.LCFI29:
 1377               		.cfi_def_cfa_offset 3
 1378               		.cfi_offset 28, -2
 1379 0002 DF93      		push r29
 1380               	.LCFI30:
 1381               		.cfi_def_cfa_offset 4
 1382               		.cfi_offset 29, -3
 1383               	/* prologue: function */
 1384               	/* frame size = 0 */
 1385               	/* stack size = 2 */
 1386               	.L__stack_usage = 2
 1387 0004 EC01      		movw r28,r24
 344:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                     { register_shift(KC_SCLN); }
 1388               		.loc 1 344 0
 1389 0006 8881      		ld r24,Y
 1390               	.LVL167:
 1391 0008 9F81      		ldd r25,Y+7
 1392 000a 8230      		cpi r24,lo8(2)
 1393 000c 00F0      		brlo .L104
 345:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 2)             { tap_shift(KC_SCLN); tap_key(KC_MINUS); }
 1394               		.loc 1 345 0
 1395 000e 9923      		tst r25
 1396 0010 01F0      		breq .L105
 1397               	.L110:
 345:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else if (state->count == 2)             { tap_shift(KC_SCLN); tap_key(KC_MINUS); }
 1398               		.loc 1 345 0 is_stmt 0 discriminator 1
 1399 0012 83E3      		ldi r24,lo8(51)
 1400 0014 90E0      		ldi r25,0
 1401 0016 0E94 0000 		call register_shift
 1402               	.LVL168:
 1403               	.L106:
 350:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1404               		.loc 1 350 0 is_stmt 1
 1405 001a CE01      		movw r24,r28
 1406               	/* epilogue start */
 351:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1407               		.loc 1 351 0
 1408 001c DF91      		pop r29
 1409 001e CF91      		pop r28
 1410               	.LVL169:
 350:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1411               		.loc 1 350 0
 1412 0020 0C94 0000 		jmp reset_tap_dance
 1413               	.LVL170:
 1414               	.L105:
 346:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_SCLN); }
 1415               		.loc 1 346 0
 1416 0024 8230      		cpi r24,lo8(2)
 1417 0026 01F4      		brne .L107
 346:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_shift(KC_SCLN); }
 1418               		.loc 1 346 0 is_stmt 0 discriminator 1
 1419 0028 83E3      		ldi r24,lo8(51)
 1420 002a 90E0      		ldi r25,0
 1421 002c 0E94 0000 		call tap_shift
 1422               	.LVL171:
 1423 0030 8DE2      		ldi r24,lo8(45)
 1424 0032 90E0      		ldi r25,0
 1425 0034 0E94 0000 		call tap_key
 1426               	.LVL172:
 1427 0038 00C0      		rjmp .L106
 1428               	.LVL173:
 1429               	.L107:
 347:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1430               		.loc 1 347 0 is_stmt 1
 1431 003a 1092 0000 		sts i,__zero_reg__
 1432               	.LVL174:
 1433               	.L108:
 347:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1434               		.loc 1 347 0 is_stmt 0 discriminator 1
 1435 003e 9881      		ld r25,Y
 1436 0040 8091 0000 		lds r24,i
 1437 0044 8917      		cp r24,r25
 1438 0046 00F4      		brsh .L106
 347:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1439               		.loc 1 347 0 discriminator 3
 1440 0048 83E3      		ldi r24,lo8(51)
 1441 004a 90E0      		ldi r25,0
 1442 004c 0E94 0000 		call tap_shift
 1443               	.LVL175:
 1444 0050 8091 0000 		lds r24,i
 1445 0054 8F5F      		subi r24,lo8(-(1))
 1446 0056 8093 0000 		sts i,r24
 1447 005a 00C0      		rjmp .L108
 1448               	.LVL176:
 1449               	.L104:
 349:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1450               		.loc 1 349 0 is_stmt 1
 1451 005c 9111      		cpse r25,__zero_reg__
 1452 005e 00C0      		rjmp .L110
 349:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1453               		.loc 1 349 0 is_stmt 0 discriminator 2
 1454 0060 43E3      		ldi r20,lo8(51)
 1455 0062 50E0      		ldi r21,0
 1456 0064 61E0      		ldi r22,lo8(1)
 1457               	.LVL177:
 1458 0066 0E94 0000 		call double_tap
 1459               	.LVL178:
 1460 006a 00C0      		rjmp .L106
 1461               		.cfi_endproc
 1462               	.LFE141:
 1464               		.section	.text.percent,"ax",@progbits
 1465               	.global	percent
 1467               	percent:
 1468               	.LFB145:
 375:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if ((state->count > 1) && state->pressed) { register_shift(KC_5); }
 1469               		.loc 1 375 0 is_stmt 1
 1470               		.cfi_startproc
 1471               	.LVL179:
 1472 0000 CF93      		push r28
 1473               	.LCFI31:
 1474               		.cfi_def_cfa_offset 3
 1475               		.cfi_offset 28, -2
 1476 0002 DF93      		push r29
 1477               	.LCFI32:
 1478               		.cfi_def_cfa_offset 4
 1479               		.cfi_offset 29, -3
 1480               	/* prologue: function */
 1481               	/* frame size = 0 */
 1482               	/* stack size = 2 */
 1483               	.L__stack_usage = 2
 1484 0004 EC01      		movw r28,r24
 376:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                      { state->pressed ? register_code(KC_LALT) : double_tap(
 1485               		.loc 1 376 0
 1486 0006 8881      		ld r24,Y
 1487               	.LVL180:
 1488 0008 9F81      		ldd r25,Y+7
 1489 000a 8230      		cpi r24,lo8(2)
 1490 000c 00F0      		brlo .L112
 376:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                      { state->pressed ? register_code(KC_LALT) : double_tap(
 1491               		.loc 1 376 0 is_stmt 0 discriminator 1
 1492 000e 9923      		tst r25
 1493 0010 01F0      		breq .L113
 376:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                                      { state->pressed ? register_code(KC_LALT) : double_tap(
 1494               		.loc 1 376 0 discriminator 2
 1495 0012 82E2      		ldi r24,lo8(34)
 1496 0014 90E0      		ldi r25,0
 1497 0016 0E94 0000 		call register_shift
 1498               	.LVL181:
 1499               	.L114:
 378:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1500               		.loc 1 378 0 is_stmt 1
 1501 001a CE01      		movw r24,r28
 1502               	/* epilogue start */
 379:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1503               		.loc 1 379 0
 1504 001c DF91      		pop r29
 1505 001e CF91      		pop r28
 1506               	.LVL182:
 378:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1507               		.loc 1 378 0
 1508 0020 0C94 0000 		jmp reset_tap_dance
 1509               	.LVL183:
 1510               	.L112:
 377:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1511               		.loc 1 377 0
 1512 0024 9923      		tst r25
 1513 0026 01F0      		breq .L113
 377:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1514               		.loc 1 377 0 is_stmt 0 discriminator 1
 1515 0028 82EE      		ldi r24,lo8(-30)
 1516 002a 0E94 0000 		call register_code
 1517               	.LVL184:
 1518 002e 00C0      		rjmp .L114
 1519               	.LVL185:
 1520               	.L113:
 377:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1521               		.loc 1 377 0 discriminator 2
 1522 0030 42E2      		ldi r20,lo8(34)
 1523 0032 50E0      		ldi r21,0
 1524 0034 61E0      		ldi r22,lo8(1)
 1525               	.LVL186:
 1526 0036 0E94 0000 		call double_tap
 1527               	.LVL187:
 1528 003a 00C0      		rjmp .L114
 1529               		.cfi_endproc
 1530               	.LFE145:
 1532               		.section	.text.tap_mod,"ax",@progbits
 1533               	.global	tap_mod
 1535               	tap_mod:
 1536               	.LFB120:
 103:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   switch (modifier) {
 1537               		.loc 1 103 0 is_stmt 1
 1538               		.cfi_startproc
 1539               	.LVL188:
 1540 0000 0F93      		push r16
 1541               	.LCFI33:
 1542               		.cfi_def_cfa_offset 3
 1543               		.cfi_offset 16, -2
 1544 0002 1F93      		push r17
 1545               	.LCFI34:
 1546               		.cfi_def_cfa_offset 4
 1547               		.cfi_offset 17, -3
 1548 0004 CF93      		push r28
 1549               	.LCFI35:
 1550               		.cfi_def_cfa_offset 5
 1551               		.cfi_offset 28, -4
 1552 0006 DF93      		push r29
 1553               	.LCFI36:
 1554               		.cfi_def_cfa_offset 6
 1555               		.cfi_offset 29, -5
 1556               	/* prologue: function */
 1557               	/* frame size = 0 */
 1558               	/* stack size = 4 */
 1559               	.L__stack_usage = 4
 1560 0008 EC01      		movw r28,r24
 1561 000a 8B01      		movw r16,r22
 104:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   case NOSHIFT:
 1562               		.loc 1 104 0
 1563 000c 0097      		sbiw r24,0
 1564 000e 01F0      		breq .L123
 1565 0010 8130      		cpi r24,1
 1566 0012 9105      		cpc r25,__zero_reg__
 1567 0014 01F0      		breq .L124
 112:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     tap_key        (keycode);
 1568               		.loc 1 112 0
 1569 0016 0E94 0000 		call register_code
 1570               	.LVL189:
 113:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     unregister_code(modifier);
 1571               		.loc 1 113 0
 1572 001a C801      		movw r24,r16
 1573 001c 0E94 0000 		call tap_key
 1574               	.LVL190:
 114:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1575               		.loc 1 114 0
 1576 0020 8C2F      		mov r24,r28
 1577               	/* epilogue start */
 116:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1578               		.loc 1 116 0
 1579 0022 DF91      		pop r29
 1580 0024 CF91      		pop r28
 1581               	.LVL191:
 1582 0026 1F91      		pop r17
 1583 0028 0F91      		pop r16
 1584               	.LVL192:
 114:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1585               		.loc 1 114 0
 1586 002a 0C94 0000 		jmp unregister_code
 1587               	.LVL193:
 1588               	.L123:
 106:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     break;
 1589               		.loc 1 106 0
 1590 002e CB01      		movw r24,r22
 1591               	.LVL194:
 1592               	/* epilogue start */
 116:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1593               		.loc 1 116 0
 1594 0030 DF91      		pop r29
 1595 0032 CF91      		pop r28
 1596               	.LVL195:
 1597 0034 1F91      		pop r17
 1598 0036 0F91      		pop r16
 1599               	.LVL196:
 106:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     break;
 1600               		.loc 1 106 0
 1601 0038 0C94 0000 		jmp tap_key
 1602               	.LVL197:
 1603               	.L124:
 109:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     break;
 1604               		.loc 1 109 0
 1605 003c CB01      		movw r24,r22
 1606               	.LVL198:
 1607               	/* epilogue start */
 116:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1608               		.loc 1 116 0
 1609 003e DF91      		pop r29
 1610 0040 CF91      		pop r28
 1611               	.LVL199:
 1612 0042 1F91      		pop r17
 1613 0044 0F91      		pop r16
 1614               	.LVL200:
 109:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     break;
 1615               		.loc 1 109 0
 1616 0046 0C94 0000 		jmp tap_shift
 1617               	.LVL201:
 1618               		.cfi_endproc
 1619               	.LFE120:
 1621               		.section	.text.on_tap,"ax",@progbits
 1622               	.global	on_tap
 1624               	on_tap:
 1625               	.LFB119:
  93:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (keycode && (timer_elapsed(key_timer) < TAPPING_TERM)) { tap_mod(shift, keycode); }
 1626               		.loc 1 93 0
 1627               		.cfi_startproc
 1628               	.LVL202:
 1629 0000 1F93      		push r17
 1630               	.LCFI37:
 1631               		.cfi_def_cfa_offset 3
 1632               		.cfi_offset 17, -2
 1633 0002 CF93      		push r28
 1634               	.LCFI38:
 1635               		.cfi_def_cfa_offset 4
 1636               		.cfi_offset 28, -3
 1637 0004 DF93      		push r29
 1638               	.LCFI39:
 1639               		.cfi_def_cfa_offset 5
 1640               		.cfi_offset 29, -4
 1641               	/* prologue: function */
 1642               	/* frame size = 0 */
 1643               	/* stack size = 3 */
 1644               	.L__stack_usage = 3
 1645 0006 182F      		mov r17,r24
 1646 0008 EB01      		movw r28,r22
  94:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1647               		.loc 1 94 0
 1648 000a 2097      		sbiw r28,0
 1649 000c 01F0      		breq .L126
  94:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1650               		.loc 1 94 0 is_stmt 0 discriminator 1
 1651 000e 8091 0000 		lds r24,key_timer
 1652 0012 9091 0000 		lds r25,key_timer+1
 1653               	.LVL203:
 1654 0016 0E94 0000 		call timer_elapsed
 1655               	.LVL204:
 1656 001a 883C      		cpi r24,-56
 1657 001c 9105      		cpc r25,__zero_reg__
 1658 001e 00F4      		brsh .L126
  94:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1659               		.loc 1 94 0 discriminator 2
 1660 0020 BE01      		movw r22,r28
 1661 0022 812F      		mov r24,r17
 1662 0024 90E0      		ldi r25,0
 1663               	/* epilogue start */
  95:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1664               		.loc 1 95 0 is_stmt 1 discriminator 2
 1665 0026 DF91      		pop r29
 1666 0028 CF91      		pop r28
 1667               	.LVL205:
 1668 002a 1F91      		pop r17
 1669               	.LVL206:
  94:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1670               		.loc 1 94 0 discriminator 2
 1671 002c 0C94 0000 		jmp tap_mod
 1672               	.LVL207:
 1673               	.L126:
 1674               	/* epilogue start */
  95:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1675               		.loc 1 95 0
 1676 0030 DF91      		pop r29
 1677 0032 CF91      		pop r28
 1678               	.LVL208:
 1679 0034 1F91      		pop r17
 1680               	.LVL209:
 1681 0036 0895      		ret
 1682               		.cfi_endproc
 1683               	.LFE119:
 1685               		.section	.text.paste,"ax",@progbits
 1686               	.global	paste
 1688               	paste:
 1689               	.LFB143:
 361:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (state->count > 1)    { tap_mod(KC_LCTL, KC_V); IRC_ENTER; }
 1690               		.loc 1 361 0
 1691               		.cfi_startproc
 1692               	.LVL210:
 1693 0000 CF93      		push r28
 1694               	.LCFI40:
 1695               		.cfi_def_cfa_offset 3
 1696               		.cfi_offset 28, -2
 1697 0002 DF93      		push r29
 1698               	.LCFI41:
 1699               		.cfi_def_cfa_offset 4
 1700               		.cfi_offset 29, -3
 1701               	/* prologue: function */
 1702               	/* frame size = 0 */
 1703               	/* stack size = 2 */
 1704               	.L__stack_usage = 2
 1705 0004 EC01      		movw r28,r24
 362:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_code(KC_V); }
 1706               		.loc 1 362 0
 1707 0006 8881      		ld r24,Y
 1708               	.LVL211:
 1709 0008 8230      		cpi r24,lo8(2)
 1710 000a 00F0      		brlo .L131
 362:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_code(KC_V); }
 1711               		.loc 1 362 0 is_stmt 0 discriminator 1
 1712 000c 69E1      		ldi r22,lo8(25)
 1713 000e 70E0      		ldi r23,0
 1714               	.LVL212:
 1715 0010 80EE      		ldi r24,lo8(-32)
 1716 0012 90E0      		ldi r25,0
 1717 0014 0E94 0000 		call tap_mod
 1718               	.LVL213:
 1719               	.LBB8:
 1720               	.LBB9:
 1721               		.loc 3 187 0 is_stmt 1 discriminator 1
 1722 0018 8FE3      		ldi r24,lo8(-25537)
 1723 001a 9CE9      		ldi r25,hi8(-25537)
 1724 001c 0197      	1:	sbiw r24,1
 1725 001e 01F4      		brne 1b
 1726 0020 00C0      		rjmp .
 1727 0022 0000      		nop
 1728               	.LVL214:
 1729               	.LBE9:
 1730               	.LBE8:
 362:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); register_code(KC_V); }
 1731               		.loc 1 362 0 discriminator 1
 1732 0024 88E2      		ldi r24,lo8(40)
 1733 0026 90E0      		ldi r25,0
 1734 0028 0E94 0000 		call tap_key
 1735               	.LVL215:
 1736               	.L132:
 365:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1737               		.loc 1 365 0
 1738 002c CE01      		movw r24,r28
 1739               	/* epilogue start */
 366:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1740               		.loc 1 366 0
 1741 002e DF91      		pop r29
 1742 0030 CF91      		pop r28
 1743               	.LVL216:
 365:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 1744               		.loc 1 365 0
 1745 0032 0C94 0000 		jmp reset_tap_dance
 1746               	.LVL217:
 1747               	.L131:
 363:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                     { tap_mod(KC_LCTL, KC_V); }
 1748               		.loc 1 363 0
 1749 0036 8F81      		ldd r24,Y+7
 1750 0038 8823      		tst r24
 1751 003a 01F0      		breq .L133
 363:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else                     { tap_mod(KC_LCTL, KC_V); }
 1752               		.loc 1 363 0 is_stmt 0 discriminator 1
 1753 003c 80EE      		ldi r24,lo8(-32)
 1754 003e 0E94 0000 		call register_code
 1755               	.LVL218:
 1756 0042 89E1      		ldi r24,lo8(25)
 1757 0044 0E94 0000 		call register_code
 1758               	.LVL219:
 1759 0048 00C0      		rjmp .L132
 1760               	.LVL220:
 1761               	.L133:
 364:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   reset_tap_dance(state);
 1762               		.loc 1 364 0 is_stmt 1
 1763 004a 69E1      		ldi r22,lo8(25)
 1764 004c 70E0      		ldi r23,0
 1765               	.LVL221:
 1766 004e 80EE      		ldi r24,lo8(-32)
 1767 0050 90E0      		ldi r25,0
 1768 0052 0E94 0000 		call tap_mod
 1769               	.LVL222:
 1770 0056 00C0      		rjmp .L132
 1771               		.cfi_endproc
 1772               	.LFE143:
 1774               		.section	.text.mt_shift,"ax",@progbits
 1775               	.global	mt_shift
 1777               	mt_shift:
 1778               	.LFB121:
 120:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) {
 1779               		.loc 1 120 0
 1780               		.cfi_startproc
 1781               	.LVL223:
 1782 0000 EF92      		push r14
 1783               	.LCFI42:
 1784               		.cfi_def_cfa_offset 3
 1785               		.cfi_offset 14, -2
 1786 0002 FF92      		push r15
 1787               	.LCFI43:
 1788               		.cfi_def_cfa_offset 4
 1789               		.cfi_offset 15, -3
 1790 0004 1F93      		push r17
 1791               	.LCFI44:
 1792               		.cfi_def_cfa_offset 5
 1793               		.cfi_offset 17, -4
 1794 0006 CF93      		push r28
 1795               	.LCFI45:
 1796               		.cfi_def_cfa_offset 6
 1797               		.cfi_offset 28, -5
 1798 0008 DF93      		push r29
 1799               	.LCFI46:
 1800               		.cfi_def_cfa_offset 7
 1801               		.cfi_offset 29, -6
 1802               	/* prologue: function */
 1803               	/* frame size = 0 */
 1804               	/* stack size = 5 */
 1805               	.L__stack_usage = 5
 1806 000a 162F      		mov r17,r22
 1807 000c EA01      		movw r28,r20
 1808 000e 7901      		movw r14,r18
 121:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = timer_read();
 1809               		.loc 1 121 0
 1810 0010 FC01      		movw r30,r24
 1811 0012 8281      		ldd r24,Z+2
 1812               	.LVL224:
 1813 0014 8823      		tst r24
 1814 0016 01F0      		breq .L135
 122:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (modifier2) { register_code(modifier2); }
 1815               		.loc 1 122 0
 1816 0018 0E94 0000 		call timer_read
 1817               	.LVL225:
 1818 001c 9093 0000 		sts key_timer+1,r25
 1819 0020 8093 0000 		sts key_timer,r24
 123:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     register_code(modifier);
 1820               		.loc 1 123 0
 1821 0024 2097      		sbiw r28,0
 1822 0026 01F0      		breq .L136
 123:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     register_code(modifier);
 1823               		.loc 1 123 0 is_stmt 0 discriminator 1
 1824 0028 8C2F      		mov r24,r28
 1825 002a 0E94 0000 		call register_code
 1826               	.LVL226:
 1827               	.L136:
 124:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1828               		.loc 1 124 0 is_stmt 1
 1829 002e 812F      		mov r24,r17
 1830               	/* epilogue start */
 132:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1831               		.loc 1 132 0
 1832 0030 DF91      		pop r29
 1833 0032 CF91      		pop r28
 1834               	.LVL227:
 1835 0034 1F91      		pop r17
 1836 0036 FF90      		pop r15
 1837 0038 EF90      		pop r14
 1838               	.LVL228:
 124:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1839               		.loc 1 124 0
 1840 003a 0C94 0000 		jmp register_code
 1841               	.LVL229:
 1842               	.L135:
 127:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (modifier2)                               { unregister_code(modifier2); }
 1843               		.loc 1 127 0
 1844 003e 862F      		mov r24,r22
 1845 0040 0E94 0000 		call unregister_code
 1846               	.LVL230:
 128:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { tap_shift(keycode); }
 1847               		.loc 1 128 0
 1848 0044 2097      		sbiw r28,0
 1849 0046 01F0      		breq .L137
 128:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { tap_shift(keycode); }
 1850               		.loc 1 128 0 is_stmt 0 discriminator 1
 1851 0048 8C2F      		mov r24,r28
 1852 004a 0E94 0000 		call unregister_code
 1853               	.LVL231:
 1854               	.L137:
 129:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
 1855               		.loc 1 129 0 is_stmt 1
 1856 004e 8091 0000 		lds r24,key_timer
 1857 0052 9091 0000 		lds r25,key_timer+1
 1858 0056 0E94 0000 		call timer_elapsed
 1859               	.LVL232:
 1860 005a 883C      		cpi r24,-56
 1861 005c 9105      		cpc r25,__zero_reg__
 1862 005e 00F4      		brsh .L138
 129:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
 1863               		.loc 1 129 0 is_stmt 0 discriminator 1
 1864 0060 C701      		movw r24,r14
 1865 0062 0E94 0000 		call tap_shift
 1866               	.LVL233:
 1867               	.L138:
 130:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1868               		.loc 1 130 0 is_stmt 1
 1869 0066 1092 0000 		sts key_timer+1,__zero_reg__
 1870 006a 1092 0000 		sts key_timer,__zero_reg__
 1871               	/* epilogue start */
 132:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1872               		.loc 1 132 0
 1873 006e DF91      		pop r29
 1874 0070 CF91      		pop r28
 1875               	.LVL234:
 1876 0072 1F91      		pop r17
 1877 0074 FF90      		pop r15
 1878 0076 EF90      		pop r14
 1879               	.LVL235:
 1880 0078 0895      		ret
 1881               		.cfi_endproc
 1882               	.LFE121:
 1884               		.section	.text.map_shift,"ax",@progbits
 1885               	.global	map_shift
 1887               	map_shift:
 1888               	.LFB122:
 138:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   // if modifier and only shift modifier and base layer..
 1889               		.loc 1 138 0
 1890               		.cfi_startproc
 1891               	.LVL236:
 1892 0000 EF92      		push r14
 1893               	.LCFI47:
 1894               		.cfi_def_cfa_offset 3
 1895               		.cfi_offset 14, -2
 1896 0002 FF92      		push r15
 1897               	.LCFI48:
 1898               		.cfi_def_cfa_offset 4
 1899               		.cfi_offset 15, -3
 1900 0004 0F93      		push r16
 1901               	.LCFI49:
 1902               		.cfi_def_cfa_offset 5
 1903               		.cfi_offset 16, -4
 1904 0006 1F93      		push r17
 1905               	.LCFI50:
 1906               		.cfi_def_cfa_offset 6
 1907               		.cfi_offset 17, -5
 1908 0008 CF93      		push r28
 1909               	.LCFI51:
 1910               		.cfi_def_cfa_offset 7
 1911               		.cfi_offset 28, -6
 1912 000a DF93      		push r29
 1913               	.LCFI52:
 1914               		.cfi_def_cfa_offset 8
 1915               		.cfi_offset 29, -7
 1916               	/* prologue: function */
 1917               	/* frame size = 0 */
 1918               	/* stack size = 6 */
 1919               	.L__stack_usage = 6
 1920 000c 7C01      		movw r14,r24
 1921 000e CB01      		movw r24,r22
 1922               	.LVL237:
 1923 0010 D42F      		mov r29,r20
 1924 0012 122F      		mov r17,r18
 140:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (record->event.pressed) {
 1925               		.loc 1 140 0
 1926 0014 0E94 0000 		call on_shift
 1927               	.LVL238:
 1928 0018 C82F      		mov r28,r24
 1929 001a 8823      		tst r24
 1930 001c 01F0      		breq .L145
 141:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (!shift) { unregister_code(KC_LSFT); } // in event of unshifted keycode
 1931               		.loc 1 141 0
 1932 001e F701      		movw r30,r14
 1933 0020 0281      		ldd r16,Z+2
 1934 0022 0023      		tst r16
 1935 0024 01F0      		breq .L147
 142:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       register_code(keycode);
 1936               		.loc 1 142 0
 1937 0026 D111      		cpse r29,__zero_reg__
 1938 0028 00C0      		rjmp .L148
 142:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       register_code(keycode);
 1939               		.loc 1 142 0 is_stmt 0 discriminator 1
 1940 002a 81EE      		ldi r24,lo8(-31)
 1941 002c 0E94 0000 		call unregister_code
 1942               	.LVL239:
 1943               	.L148:
 143:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 1944               		.loc 1 143 0 is_stmt 1
 1945 0030 812F      		mov r24,r17
 1946 0032 0E94 0000 		call register_code
 1947               	.LVL240:
 149:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 1948               		.loc 1 149 0
 1949 0036 C02F      		mov r28,r16
 1950               	.L145:
 152:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 1951               		.loc 1 152 0
 1952 0038 8C2F      		mov r24,r28
 1953               	/* epilogue start */
 1954 003a DF91      		pop r29
 1955               	.LVL241:
 1956 003c CF91      		pop r28
 1957 003e 1F91      		pop r17
 1958 0040 0F91      		pop r16
 1959 0042 FF90      		pop r15
 1960 0044 EF90      		pop r14
 1961               	.LVL242:
 1962 0046 0895      		ret
 1963               	.LVL243:
 1964               	.L147:
 146:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (!shift) { register_code(KC_LSFT); }   // restore SFT_T
 1965               		.loc 1 146 0
 1966 0048 812F      		mov r24,r17
 1967 004a 0E94 0000 		call unregister_code
 1968               	.LVL244:
 147:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 1969               		.loc 1 147 0
 1970 004e D111      		cpse r29,__zero_reg__
 1971 0050 00C0      		rjmp .L145
 147:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 1972               		.loc 1 147 0 is_stmt 0 discriminator 1
 1973 0052 81EE      		ldi r24,lo8(-31)
 1974 0054 0E94 0000 		call register_code
 1975               	.LVL245:
 1976 0058 00C0      		rjmp .L145
 1977               		.cfi_endproc
 1978               	.LFE122:
 1980               		.section	.text.double_shift,"ax",@progbits
 1981               	.global	double_shift
 1983               	double_shift:
 1984               	.LFB123:
 184:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_key (keycode);
 1985               		.loc 1 184 0 is_stmt 1
 1986               		.cfi_startproc
 1987               	.LVL246:
 1988               	/* prologue: function */
 1989               	/* frame size = 0 */
 1990               	/* stack size = 0 */
 1991               	.L__stack_usage = 0
 185:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (DT_SHIFT) {
 1992               		.loc 1 185 0
 1993 0000 0E94 0000 		call tap_key
 1994               	.LVL247:
 189:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     set_oneshot_layer(_SHIFT, ONESHOT_START);
 1995               		.loc 1 189 0
 1996 0004 81E0      		ldi r24,lo8(1)
 1997 0006 0E94 0000 		call layer_on
 1998               	.LVL248:
 190:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     dt_shift = 1;
 1999               		.loc 1 190 0
 2000 000a 63E0      		ldi r22,lo8(3)
 2001 000c 81E0      		ldi r24,lo8(1)
 2002 000e 0E94 0000 		call set_oneshot_layer
 2003               	.LVL249:
 191:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2004               		.loc 1 191 0
 2005 0012 81E0      		ldi r24,lo8(1)
 2006 0014 8093 0000 		sts dt_shift,r24
 2007               	/* epilogue start */
 194:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2008               		.loc 1 194 0
 2009 0018 0895      		ret
 2010               		.cfi_endproc
 2011               	.LFE123:
 2013               		.section	.text.cap_lt,"ax",@progbits
 2014               	.global	cap_lt
 2016               	cap_lt:
 2017               	.LFB124:
 200:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (auto_cap) {                           // sentence/paragraph capitalization
 2018               		.loc 1 200 0
 2019               		.cfi_startproc
 2020               	.LVL250:
 2021 0000 DF92      		push r13
 2022               	.LCFI53:
 2023               		.cfi_def_cfa_offset 3
 2024               		.cfi_offset 13, -2
 2025 0002 EF92      		push r14
 2026               	.LCFI54:
 2027               		.cfi_def_cfa_offset 4
 2028               		.cfi_offset 14, -3
 2029 0004 FF92      		push r15
 2030               	.LCFI55:
 2031               		.cfi_def_cfa_offset 5
 2032               		.cfi_offset 15, -4
 2033 0006 0F93      		push r16
 2034               	.LCFI56:
 2035               		.cfi_def_cfa_offset 6
 2036               		.cfi_offset 16, -5
 2037 0008 1F93      		push r17
 2038               	.LCFI57:
 2039               		.cfi_def_cfa_offset 7
 2040               		.cfi_offset 17, -6
 2041 000a CF93      		push r28
 2042               	.LCFI58:
 2043               		.cfi_def_cfa_offset 8
 2044               		.cfi_offset 28, -7
 2045 000c DF93      		push r29
 2046               	.LCFI59:
 2047               		.cfi_def_cfa_offset 9
 2048               		.cfi_offset 29, -8
 2049               	/* prologue: function */
 2050               	/* frame size = 0 */
 2051               	/* stack size = 7 */
 2052               	.L__stack_usage = 7
 2053 000e EC01      		movw r28,r24
 2054 0010 F62E      		mov r15,r22
 2055 0012 D72E      		mov r13,r23
 2056 0014 E42E      		mov r14,r20
 2057 0016 8F81      		ldd r24,Y+7
 2058               	.LVL251:
 201:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (state->pressed)                                    { return; }
 2059               		.loc 1 201 0
 2060 0018 9091 0000 		lds r25,auto_cap
 2061 001c 9923      		tst r25
 2062 001e 01F0      		breq .L154
 202:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if ((state->count > 1) && (state->count == paragraph)) { tap_key(leader); }
 2063               		.loc 1 202 0
 2064 0020 8111      		cpse r24,__zero_reg__
 2065 0022 00C0      		rjmp .L153
 203:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     double_shift(leader, layer);            // discard excess taps!
 2066               		.loc 1 203 0
 2067 0024 8881      		ld r24,Y
 2068 0026 8230      		cpi r24,lo8(2)
 2069 0028 00F0      		brlo .L157
 203:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     double_shift(leader, layer);            // discard excess taps!
 2070               		.loc 1 203 0 is_stmt 0 discriminator 1
 2071 002a 8213      		cpse r24,r18
 2072 002c 00C0      		rjmp .L157
 203:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     double_shift(leader, layer);            // discard excess taps!
 2073               		.loc 1 203 0 discriminator 2
 2074 002e C801      		movw r24,r16
 2075 0030 0E94 0000 		call tap_key
 2076               	.LVL252:
 2077               	.L157:
 204:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2078               		.loc 1 204 0 is_stmt 1
 2079 0034 6E2D      		mov r22,r14
 2080 0036 C801      		movw r24,r16
 2081               	/* epilogue start */
 208:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2082               		.loc 1 208 0
 2083 0038 DF91      		pop r29
 2084 003a CF91      		pop r28
 2085               	.LVL253:
 2086 003c 1F91      		pop r17
 2087 003e 0F91      		pop r16
 2088               	.LVL254:
 2089 0040 FF90      		pop r15
 2090 0042 EF90      		pop r14
 2091               	.LVL255:
 2092 0044 DF90      		pop r13
 204:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2093               		.loc 1 204 0
 2094 0046 0C94 0000 		jmp double_shift
 2095               	.LVL256:
 2096               	.L154:
 206:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 2097               		.loc 1 206 0
 2098 004a 8823      		tst r24
 2099 004c 01F0      		breq .L158
 206:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 2100               		.loc 1 206 0 is_stmt 0 discriminator 1
 2101 004e 8881      		ld r24,Y
 2102 0050 8130      		cpi r24,lo8(1)
 2103 0052 01F4      		brne .L159
 206:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 2104               		.loc 1 206 0 discriminator 2
 2105 0054 842F      		mov r24,r20
 2106               	/* epilogue start */
 208:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2107               		.loc 1 208 0 is_stmt 1 discriminator 2
 2108 0056 DF91      		pop r29
 2109 0058 CF91      		pop r28
 2110               	.LVL257:
 2111 005a 1F91      		pop r17
 2112 005c 0F91      		pop r16
 2113               	.LVL258:
 2114 005e FF90      		pop r15
 2115 0060 EF90      		pop r14
 2116               	.LVL259:
 2117 0062 DF90      		pop r13
 206:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 2118               		.loc 1 206 0 discriminator 2
 2119 0064 0C94 0000 		jmp layer_on
 2120               	.LVL260:
 2121               	.L159:
 206:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 2122               		.loc 1 206 0 is_stmt 0 discriminator 3
 2123 0068 862F      		mov r24,r22
 2124               	/* epilogue start */
 208:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2125               		.loc 1 208 0 is_stmt 1 discriminator 3
 2126 006a DF91      		pop r29
 2127 006c CF91      		pop r28
 2128               	.LVL261:
 2129 006e 1F91      		pop r17
 2130 0070 0F91      		pop r16
 2131               	.LVL262:
 2132 0072 FF90      		pop r15
 2133 0074 EF90      		pop r14
 2134               	.LVL263:
 2135 0076 DF90      		pop r13
 206:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 2136               		.loc 1 206 0 discriminator 3
 2137 0078 0C94 0000 		jmp register_code
 2138               	.LVL264:
 2139               	.L158:
 207:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2140               		.loc 1 207 0
 2141 007c 1092 0000 		sts i,__zero_reg__
 2142               	.LVL265:
 2143               	.L160:
 207:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2144               		.loc 1 207 0 is_stmt 0 discriminator 1
 2145 0080 9881      		ld r25,Y
 2146 0082 8091 0000 		lds r24,i
 2147 0086 8917      		cp r24,r25
 2148 0088 00F0      		brlo .L161
 2149               	.L153:
 2150               	/* epilogue start */
 208:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2151               		.loc 1 208 0 is_stmt 1
 2152 008a DF91      		pop r29
 2153 008c CF91      		pop r28
 2154               	.LVL266:
 2155 008e 1F91      		pop r17
 2156 0090 0F91      		pop r16
 2157               	.LVL267:
 2158 0092 FF90      		pop r15
 2159 0094 EF90      		pop r14
 2160               	.LVL268:
 2161 0096 DF90      		pop r13
 2162 0098 0895      		ret
 2163               	.LVL269:
 2164               	.L161:
 207:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2165               		.loc 1 207 0 discriminator 3
 2166 009a 8F2D      		mov r24,r15
 2167 009c 9D2D      		mov r25,r13
 2168 009e 0E94 0000 		call tap_key
 2169               	.LVL270:
 2170 00a2 8091 0000 		lds r24,i
 2171 00a6 8F5F      		subi r24,lo8(-(1))
 2172 00a8 8093 0000 		sts i,r24
 2173 00ac 00C0      		rjmp .L160
 2174               		.cfi_endproc
 2175               	.LFE124:
 2177               		.section	.text.backspace,"ax",@progbits
 2178               	.global	backspace
 2180               	backspace:
 2181               	.LFB126:
 223:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   cap_lt(state, KC_BSPC, _EDIT, PARAGRAPH, KC_ENT); // double tap -> double enter + shift, down -> 
 2182               		.loc 1 223 0
 2183               		.cfi_startproc
 2184               	.LVL271:
 2185 0000 0F93      		push r16
 2186               	.LCFI60:
 2187               		.cfi_def_cfa_offset 3
 2188               		.cfi_offset 16, -2
 2189 0002 1F93      		push r17
 2190               	.LCFI61:
 2191               		.cfi_def_cfa_offset 4
 2192               		.cfi_offset 17, -3
 2193               	/* prologue: function */
 2194               	/* frame size = 0 */
 2195               	/* stack size = 2 */
 2196               	.L__stack_usage = 2
 224:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2197               		.loc 1 224 0
 2198 0004 08E2      		ldi r16,lo8(40)
 2199 0006 10E0      		ldi r17,0
 2200 0008 22E0      		ldi r18,lo8(2)
 2201 000a 48E0      		ldi r20,lo8(8)
 2202 000c 6AE2      		ldi r22,lo8(42)
 2203 000e 70E0      		ldi r23,0
 2204               	.LVL272:
 2205 0010 0E94 0000 		call cap_lt
 2206               	.LVL273:
 2207               	/* epilogue start */
 225:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2208               		.loc 1 225 0
 2209 0014 1F91      		pop r17
 2210 0016 0F91      		pop r16
 2211 0018 0895      		ret
 2212               		.cfi_endproc
 2213               	.LFE126:
 2215               		.section	.text.space,"ax",@progbits
 2216               	.global	space
 2218               	space:
 2219               	.LFB128:
 234:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   cap_lt(state, KC_SPC, _GUIFN, SENTENCE, KC_SPC); // double tap down -> space...
 2220               		.loc 1 234 0
 2221               		.cfi_startproc
 2222               	.LVL274:
 2223 0000 0F93      		push r16
 2224               	.LCFI62:
 2225               		.cfi_def_cfa_offset 3
 2226               		.cfi_offset 16, -2
 2227 0002 1F93      		push r17
 2228               	.LCFI63:
 2229               		.cfi_def_cfa_offset 4
 2230               		.cfi_offset 17, -3
 2231               	/* prologue: function */
 2232               	/* frame size = 0 */
 2233               	/* stack size = 2 */
 2234               	.L__stack_usage = 2
 235:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2235               		.loc 1 235 0
 2236 0004 0CE2      		ldi r16,lo8(44)
 2237 0006 10E0      		ldi r17,0
 2238 0008 20E0      		ldi r18,0
 2239 000a 42E0      		ldi r20,lo8(2)
 2240 000c 6CE2      		ldi r22,lo8(44)
 2241 000e 70E0      		ldi r23,0
 2242               	.LVL275:
 2243 0010 0E94 0000 		call cap_lt
 2244               	.LVL276:
 2245               	/* epilogue start */
 236:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2246               		.loc 1 236 0
 2247 0014 1F91      		pop r17
 2248 0016 0F91      		pop r16
 2249 0018 0895      		ret
 2250               		.cfi_endproc
 2251               	.LFE128:
 2253               		.section	.text.tap_reset,"ax",@progbits
 2254               	.global	tap_reset
 2256               	tap_reset:
 2257               	.LFB125:
 211:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   unregister_code(keycode);
 2258               		.loc 1 211 0
 2259               		.cfi_startproc
 2260               	.LVL277:
 2261 0000 CF93      		push r28
 2262               	.LCFI64:
 2263               		.cfi_def_cfa_offset 3
 2264               		.cfi_offset 28, -2
 2265               	/* prologue: function */
 2266               	/* frame size = 0 */
 2267               	/* stack size = 1 */
 2268               	.L__stack_usage = 1
 2269 0002 C62F      		mov r28,r22
 212:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   dt_shift ? clear_oneshot_layer_state(ONESHOT_PRESSED) : layer_off(layer);
 2270               		.loc 1 212 0
 2271 0004 0E94 0000 		call unregister_code
 2272               	.LVL278:
 213:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   dt_shift = 0;
 2273               		.loc 1 213 0
 2274 0008 8091 0000 		lds r24,dt_shift
 2275 000c 8823      		tst r24
 2276 000e 01F0      		breq .L166
 213:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   dt_shift = 0;
 2277               		.loc 1 213 0 is_stmt 0 discriminator 1
 2278 0010 81E0      		ldi r24,lo8(1)
 2279 0012 0E94 0000 		call clear_oneshot_layer_state
 2280               	.LVL279:
 2281               	.L167:
 214:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   auto_cap = 0;                             // clear retained down_rule, see process_record_user()
 2282               		.loc 1 214 0 is_stmt 1
 2283 0016 1092 0000 		sts dt_shift,__zero_reg__
 215:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2284               		.loc 1 215 0
 2285 001a 1092 0000 		sts auto_cap,__zero_reg__
 2286               	/* epilogue start */
 216:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2287               		.loc 1 216 0
 2288 001e CF91      		pop r28
 2289               	.LVL280:
 2290 0020 0895      		ret
 2291               	.LVL281:
 2292               	.L166:
 213:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   dt_shift = 0;
 2293               		.loc 1 213 0 discriminator 2
 2294 0022 8C2F      		mov r24,r28
 2295 0024 0E94 0000 		call layer_off
 2296               	.LVL282:
 2297 0028 00C0      		rjmp .L167
 2298               		.cfi_endproc
 2299               	.LFE125:
 2301               		.section	.text.backspace_reset,"ax",@progbits
 2302               	.global	backspace_reset
 2304               	backspace_reset:
 2305               	.LFB127:
 228:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_reset(KC_BSPC, _EDIT);
 2306               		.loc 1 228 0
 2307               		.cfi_startproc
 2308               	.LVL283:
 2309               	/* prologue: function */
 2310               	/* frame size = 0 */
 2311               	/* stack size = 0 */
 2312               	.L__stack_usage = 0
 229:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2313               		.loc 1 229 0
 2314 0000 68E0      		ldi r22,lo8(8)
 2315               	.LVL284:
 2316 0002 8AE2      		ldi r24,lo8(42)
 2317 0004 90E0      		ldi r25,0
 2318               	.LVL285:
 2319 0006 0C94 0000 		jmp tap_reset
 2320               	.LVL286:
 2321               		.cfi_endproc
 2322               	.LFE127:
 2324               		.section	.text.space_reset,"ax",@progbits
 2325               	.global	space_reset
 2327               	space_reset:
 2328               	.LFB129:
 239:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tap_reset(KC_SPC, _GUIFN);
 2329               		.loc 1 239 0
 2330               		.cfi_startproc
 2331               	.LVL287:
 2332               	/* prologue: function */
 2333               	/* frame size = 0 */
 2334               	/* stack size = 0 */
 2335               	.L__stack_usage = 0
 240:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2336               		.loc 1 240 0
 2337 0000 62E0      		ldi r22,lo8(2)
 2338               	.LVL288:
 2339 0002 8CE2      		ldi r24,lo8(44)
 2340 0004 90E0      		ldi r25,0
 2341               	.LVL289:
 2342 0006 0C94 0000 		jmp tap_reset
 2343               	.LVL290:
 2344               		.cfi_endproc
 2345               	.LFE129:
 2347               		.section	.text.clear_layers,"ax",@progbits
 2348               	.global	clear_layers
 2350               	clear_layers:
 2351               	.LFB151:
 420:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 421:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // Layers
 422:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
 423:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 424:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ............................................................ Layer Primitives
 425:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 426:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // void persistant_default_layer_set(uint16_t default_layer)
 427:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // {
 428:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** //   eeconfig_update_default_layer(default_layer);
 429:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** //   default_layer_set            (default_layer);
 430:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // }
 431:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 432:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void clear_layers(void)
 433:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 2352               		.loc 1 433 0
 2353               		.cfi_startproc
 2354               	/* prologue: function */
 2355               	/* frame size = 0 */
 2356               	/* stack size = 0 */
 2357               	.L__stack_usage = 0
 434:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   for (i = 0; i < _END_LAYERS; i++) { layer_off(i); }
 2358               		.loc 1 434 0
 2359 0000 1092 0000 		sts i,__zero_reg__
 2360               	.L171:
 2361               		.loc 1 434 0 is_stmt 0 discriminator 1
 2362 0004 8091 0000 		lds r24,i
 2363 0008 8F30      		cpi r24,lo8(15)
 2364 000a 00F0      		brlo .L172
 435:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   mods       = 0;
 2365               		.loc 1 435 0 is_stmt 1
 2366 000c 1092 0000 		sts mods,__zero_reg__
 436:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   key_timer  = 0;
 2367               		.loc 1 436 0
 2368 0010 1092 0000 		sts key_timer+1,__zero_reg__
 2369 0014 1092 0000 		sts key_timer,__zero_reg__
 437:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   dt_shift   = 0;
 2370               		.loc 1 437 0
 2371 0018 1092 0000 		sts dt_shift,__zero_reg__
 438:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   tt_keycode = 0;
 2372               		.loc 1 438 0
 2373 001c 1092 0000 		sts tt_keycode+1,__zero_reg__
 2374 0020 1092 0000 		sts tt_keycode,__zero_reg__
 2375               	/* epilogue start */
 439:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2376               		.loc 1 439 0
 2377 0024 0895      		ret
 2378               	.L172:
 434:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   mods       = 0;
 2379               		.loc 1 434 0 discriminator 3
 2380 0026 0E94 0000 		call layer_off
 2381               	.LVL291:
 2382 002a 8091 0000 		lds r24,i
 2383 002e 8F5F      		subi r24,lo8(-(1))
 2384 0030 8093 0000 		sts i,r24
 2385 0034 00C0      		rjmp .L171
 2386               		.cfi_endproc
 2387               	.LFE151:
 2389               		.section	.text.tap_layer,"ax",@progbits
 2390               	.global	tap_layer
 2392               	tap_layer:
 2393               	.LFB153:
 440:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 441:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void base_layer(uint8_t defer)
 442:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 443:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (defer) { return; }                    // see process_record_user() CNTR_TL, CNTR_TR
 444:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef AUDIO_ENABLE
 445:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   plover ? PLAY_SONG(song_plover_gb) : PLAY_SONG(song_qwerty);
 446:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #endif
 447:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   clear_layers();
 448:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   set_single_persistent_default_layer(_BASE);
 449:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   toggle_plover(0);
 450:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 451:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 452:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // set layer asap to overcome macro latency errors, notably tap dance, LT usage and..
 453:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // inexplicably sets layer_on() faster than can be done in rolling_layer()
 454:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void tap_layer(keyrecord_t *record, uint8_t layer)
 455:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 2394               		.loc 1 455 0
 2395               		.cfi_startproc
 2396               	.LVL292:
 2397               	/* prologue: function */
 2398               	/* frame size = 0 */
 2399               	/* stack size = 0 */
 2400               	.L__stack_usage = 0
 456:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   record->event.pressed ? layer_on(layer) : layer_off(layer);
 2401               		.loc 1 456 0
 2402 0000 FC01      		movw r30,r24
 2403 0002 8281      		ldd r24,Z+2
 2404               	.LVL293:
 2405 0004 8823      		tst r24
 2406 0006 01F0      		breq .L174
 2407               		.loc 1 456 0 is_stmt 0 discriminator 1
 2408 0008 862F      		mov r24,r22
 2409 000a 0C94 0000 		jmp layer_on
 2410               	.LVL294:
 2411               	.L174:
 2412               		.loc 1 456 0 discriminator 2
 2413 000e 862F      		mov r24,r22
 2414 0010 0C94 0000 		jmp layer_off
 2415               	.LVL295:
 2416               		.cfi_endproc
 2417               	.LFE153:
 2419               		.section	.text.lt_shift,"ax",@progbits
 2420               	.global	lt_shift
 2422               	lt_shift:
 2423               	.LFB154:
 457:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 458:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 459:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // extended LT macro for [shift] keycode layer
 460:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void lt_shift(keyrecord_t *record, uint8_t shift, uint16_t keycode, uint8_t layer)
 461:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 2424               		.loc 1 461 0 is_stmt 1
 2425               		.cfi_startproc
 2426               	.LVL296:
 2427 0000 0F93      		push r16
 2428               	.LCFI65:
 2429               		.cfi_def_cfa_offset 3
 2430               		.cfi_offset 16, -2
 2431 0002 1F93      		push r17
 2432               	.LCFI66:
 2433               		.cfi_def_cfa_offset 4
 2434               		.cfi_offset 17, -3
 2435 0004 CF93      		push r28
 2436               	.LCFI67:
 2437               		.cfi_def_cfa_offset 5
 2438               		.cfi_offset 28, -4
 2439 0006 DF93      		push r29
 2440               	.LCFI68:
 2441               		.cfi_def_cfa_offset 6
 2442               		.cfi_offset 29, -5
 2443               	/* prologue: function */
 2444               	/* frame size = 0 */
 2445               	/* stack size = 4 */
 2446               	.L__stack_usage = 4
 2447 0008 D62F      		mov r29,r22
 2448 000a 8A01      		movw r16,r20
 2449 000c C22F      		mov r28,r18
 462:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) {
 2450               		.loc 1 462 0
 2451 000e FC01      		movw r30,r24
 2452 0010 8281      		ldd r24,Z+2
 2453               	.LVL297:
 2454 0012 8823      		tst r24
 2455 0014 01F0      		breq .L176
 463:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = timer_read();
 2456               		.loc 1 463 0
 2457 0016 0E94 0000 		call timer_read
 2458               	.LVL298:
 2459 001a 9093 0000 		sts key_timer+1,r25
 2460 001e 8093 0000 		sts key_timer,r24
 464:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_on(layer);
 2461               		.loc 1 464 0
 2462 0022 8C2F      		mov r24,r28
 2463               	/* epilogue start */
 465:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 466:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else {
 467:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_off(layer);
 468:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     on_tap   (shift, keycode);              // for shifted keycodes, hence, LT_SHIFT
 469:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     // clear_mods();
 470:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
 471:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 472:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2464               		.loc 1 472 0
 2465 0024 DF91      		pop r29
 2466               	.LVL299:
 2467 0026 CF91      		pop r28
 2468               	.LVL300:
 2469 0028 1F91      		pop r17
 2470 002a 0F91      		pop r16
 2471               	.LVL301:
 464:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_on(layer);
 2472               		.loc 1 464 0
 2473 002c 0C94 0000 		jmp layer_on
 2474               	.LVL302:
 2475               	.L176:
 467:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     on_tap   (shift, keycode);              // for shifted keycodes, hence, LT_SHIFT
 2476               		.loc 1 467 0
 2477 0030 822F      		mov r24,r18
 2478 0032 0E94 0000 		call layer_off
 2479               	.LVL303:
 468:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     // clear_mods();
 2480               		.loc 1 468 0
 2481 0036 B801      		movw r22,r16
 2482 0038 8D2F      		mov r24,r29
 2483 003a 0E94 0000 		call on_tap
 2484               	.LVL304:
 470:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2485               		.loc 1 470 0
 2486 003e 1092 0000 		sts key_timer+1,__zero_reg__
 2487 0042 1092 0000 		sts key_timer,__zero_reg__
 2488               	/* epilogue start */
 2489               		.loc 1 472 0
 2490 0046 DF91      		pop r29
 2491               	.LVL305:
 2492 0048 CF91      		pop r28
 2493               	.LVL306:
 2494 004a 1F91      		pop r17
 2495 004c 0F91      		pop r16
 2496               	.LVL307:
 2497 004e 0895      		ret
 2498               		.cfi_endproc
 2499               	.LFE154:
 2501               		.section	.text.raise_layer,"ax",@progbits
 2502               	.global	raise_layer
 2504               	raise_layer:
 2505               	.LFB155:
 473:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 474:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ............................................................ Double Key Layer
 475:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 476:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define LEFT   1
 477:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define RIGHT  2
 478:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define ONDOWN 0
 479:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define TOGGLE 1
 480:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 481:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t double_key = 0;
 482:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 483:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // dual key to raise layer (layer 0 to trap dual key state :-)
 484:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** bool raise_layer(keyrecord_t *record, uint8_t layer, uint8_t side, uint8_t toggle)
 485:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 2506               		.loc 1 485 0
 2507               		.cfi_startproc
 2508               	.LVL308:
 2509 0000 CF93      		push r28
 2510               	.LCFI69:
 2511               		.cfi_def_cfa_offset 3
 2512               		.cfi_offset 28, -2
 2513               	/* prologue: function */
 2514               	/* frame size = 0 */
 2515               	/* stack size = 1 */
 2516               	.L__stack_usage = 1
 486:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) {
 2517               		.loc 1 486 0
 2518 0002 FC01      		movw r30,r24
 2519 0004 C281      		ldd r28,Z+2
 2520 0006 8091 0000 		lds r24,double_key
 2521               	.LVL309:
 2522 000a CC23      		tst r28
 2523 000c 01F0      		breq .L178
 487:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     double_key |= side;
 2524               		.loc 1 487 0
 2525 000e 482B      		or r20,r24
 2526               	.LVL310:
 2527 0010 4093 0000 		sts double_key,r20
 488:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (double_key == (LEFT | RIGHT)) { 
 2528               		.loc 1 488 0
 2529 0014 4330      		cpi r20,lo8(3)
 2530 0016 01F0      		breq .L179
 2531               	.L182:
 489:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (layer) { toggle ? layer_invert(layer) : layer_on(layer); }
 490:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       return true;
 491:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     }
 492:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 493:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else {
 494:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     double_key &= ~side;
 495:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (!(double_key || toggle)) { layer_off(layer); }  // allow single key to continue on layer :-
 496:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 497:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   return false;
 2532               		.loc 1 497 0
 2533 0018 C0E0      		ldi r28,0
 2534               	.LVL311:
 2535               	.L177:
 498:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2536               		.loc 1 498 0
 2537 001a 8C2F      		mov r24,r28
 2538               	/* epilogue start */
 2539 001c CF91      		pop r28
 2540 001e 0895      		ret
 2541               	.LVL312:
 2542               	.L179:
 489:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (layer) { toggle ? layer_invert(layer) : layer_on(layer); }
 2543               		.loc 1 489 0
 2544 0020 6623      		tst r22
 2545 0022 01F0      		breq .L177
 489:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (layer) { toggle ? layer_invert(layer) : layer_on(layer); }
 2546               		.loc 1 489 0 is_stmt 0 discriminator 1
 2547 0024 862F      		mov r24,r22
 2548 0026 2223      		tst r18
 2549 0028 01F0      		breq .L181
 489:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (layer) { toggle ? layer_invert(layer) : layer_on(layer); }
 2550               		.loc 1 489 0 discriminator 2
 2551 002a 0E94 0000 		call layer_invert
 2552               	.LVL313:
 2553 002e 00C0      		rjmp .L177
 2554               	.LVL314:
 2555               	.L181:
 489:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****       if (layer) { toggle ? layer_invert(layer) : layer_on(layer); }
 2556               		.loc 1 489 0 discriminator 3
 2557 0030 0E94 0000 		call layer_on
 2558               	.LVL315:
 2559 0034 00C0      		rjmp .L177
 2560               	.LVL316:
 2561               	.L178:
 494:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (!(double_key || toggle)) { layer_off(layer); }  // allow single key to continue on layer :-
 2562               		.loc 1 494 0 is_stmt 1
 2563 0036 4095      		com r20
 2564               	.LVL317:
 2565 0038 4823      		and r20,r24
 2566               	.LVL318:
 2567 003a 4093 0000 		sts double_key,r20
 495:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2568               		.loc 1 495 0
 2569 003e 4111      		cpse r20,__zero_reg__
 2570 0040 00C0      		rjmp .L182
 495:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2571               		.loc 1 495 0 is_stmt 0 discriminator 1
 2572 0042 2111      		cpse r18,__zero_reg__
 2573 0044 00C0      		rjmp .L182
 495:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2574               		.loc 1 495 0 discriminator 2
 2575 0046 862F      		mov r24,r22
 2576 0048 0E94 0000 		call layer_off
 2577               	.LVL319:
 2578 004c 00C0      		rjmp .L177
 2579               		.cfi_endproc
 2580               	.LFE155:
 2582               		.section	.text.rolling_layer,"ax",@progbits
 2583               	.global	rolling_layer
 2585               	rolling_layer:
 2586               	.LFB156:
 499:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 500:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // .............................................................. Rolling Layers
 501:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 502:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // rolling thumb combinations, see process_record_user()
 503:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // up,   up   -> _BASE
 504:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // up,   down -> _GUIFN
 505:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // down, up   -> _SYMBOL
 506:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // down, down -> _MOUSE                     // see layer keycodes that raise mouse layer
 507:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 508:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t leftside  = 0;
 509:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t rightside = 0;
 510:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 511:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #define SWITCH_LAYER(x, y) layer_off(x); x = 0; if (y && (y == _MOUSE)) { layer_on(facing); y = fac
 512:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 513:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // seamlessly switch left / right thumb layer combinations
 514:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void rolling_layer(keyrecord_t *record, uint8_t side, uint8_t shift, uint16_t keycode, uint8_t laye
 515:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 2587               		.loc 1 515 0 is_stmt 1
 2588               		.cfi_startproc
 2589               	.LVL320:
 2590 0000 CF92      		push r12
 2591               	.LCFI70:
 2592               		.cfi_def_cfa_offset 3
 2593               		.cfi_offset 12, -2
 2594 0002 DF92      		push r13
 2595               	.LCFI71:
 2596               		.cfi_def_cfa_offset 4
 2597               		.cfi_offset 13, -3
 2598 0004 EF92      		push r14
 2599               	.LCFI72:
 2600               		.cfi_def_cfa_offset 5
 2601               		.cfi_offset 14, -4
 2602 0006 0F93      		push r16
 2603               	.LCFI73:
 2604               		.cfi_def_cfa_offset 6
 2605               		.cfi_offset 16, -5
 2606 0008 CF93      		push r28
 2607               	.LCFI74:
 2608               		.cfi_def_cfa_offset 7
 2609               		.cfi_offset 28, -6
 2610 000a DF93      		push r29
 2611               	.LCFI75:
 2612               		.cfi_def_cfa_offset 8
 2613               		.cfi_offset 29, -7
 2614               	/* prologue: function */
 2615               	/* frame size = 0 */
 2616               	/* stack size = 6 */
 2617               	.L__stack_usage = 6
 2618 000c C62F      		mov r28,r22
 2619 000e D42F      		mov r29,r20
 2620 0010 6901      		movw r12,r18
 516:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) {
 2621               		.loc 1 516 0
 2622 0012 FC01      		movw r30,r24
 2623 0014 8281      		ldd r24,Z+2
 2624               	.LVL321:
 2625 0016 8823      		tst r24
 2626 0018 01F0      		breq .L187
 517:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_on(layer);
 2627               		.loc 1 517 0
 2628 001a 802F      		mov r24,r16
 2629 001c 0E94 0000 		call layer_on
 2630               	.LVL322:
 518:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (side == LEFT) { leftside = layer; }
 2631               		.loc 1 518 0
 2632 0020 C130      		cpi r28,lo8(1)
 2633 0022 01F4      		brne .L188
 2634               		.loc 1 518 0 is_stmt 0 discriminator 1
 2635 0024 0093 0000 		sts leftside,r16
 2636               	.L189:
 519:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else              { rightside = layer; }
 520:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer  = timer_read();
 2637               		.loc 1 520 0 is_stmt 1
 2638 0028 0E94 0000 		call timer_read
 2639               	.LVL323:
 2640 002c 9093 0000 		sts key_timer+1,r25
 2641 0030 8093 0000 		sts key_timer,r24
 2642               	.L186:
 2643               	/* epilogue start */
 521:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 522:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else {
 523:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_off(_MOUSE);
 524:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     on_tap   (shift, keycode);
 525:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (side == LEFT) { SWITCH_LAYER(leftside, rightside); }
 526:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else              { SWITCH_LAYER(rightside, leftside); }
 527:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     // clear_mods();
 528:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
 529:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 530:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2644               		.loc 1 530 0
 2645 0034 DF91      		pop r29
 2646               	.LVL324:
 2647 0036 CF91      		pop r28
 2648               	.LVL325:
 2649 0038 0F91      		pop r16
 2650               	.LVL326:
 2651 003a EF90      		pop r14
 2652               	.LVL327:
 2653 003c DF90      		pop r13
 2654 003e CF90      		pop r12
 2655               	.LVL328:
 2656 0040 0895      		ret
 2657               	.LVL329:
 2658               	.L188:
 519:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else              { rightside = layer; }
 2659               		.loc 1 519 0
 2660 0042 0093 0000 		sts rightside,r16
 2661 0046 00C0      		rjmp .L189
 2662               	.LVL330:
 2663               	.L187:
 523:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     on_tap   (shift, keycode);
 2664               		.loc 1 523 0
 2665 0048 84E0      		ldi r24,lo8(4)
 2666 004a 0E94 0000 		call layer_off
 2667               	.LVL331:
 524:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (side == LEFT) { SWITCH_LAYER(leftside, rightside); }
 2668               		.loc 1 524 0
 2669 004e B601      		movw r22,r12
 2670 0050 8D2F      		mov r24,r29
 2671 0052 0E94 0000 		call on_tap
 2672               	.LVL332:
 525:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else              { SWITCH_LAYER(rightside, leftside); }
 2673               		.loc 1 525 0
 2674 0056 C130      		cpi r28,lo8(1)
 2675 0058 01F4      		brne .L191
 525:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else              { SWITCH_LAYER(rightside, leftside); }
 2676               		.loc 1 525 0 is_stmt 0 discriminator 1
 2677 005a 8091 0000 		lds r24,leftside
 2678 005e 0E94 0000 		call layer_off
 2679               	.LVL333:
 2680 0062 1092 0000 		sts leftside,__zero_reg__
 2681 0066 8091 0000 		lds r24,rightside
 2682 006a 8430      		cpi r24,lo8(4)
 2683 006c 01F4      		brne .L193
 525:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     else              { SWITCH_LAYER(rightside, leftside); }
 2684               		.loc 1 525 0 discriminator 2
 2685 006e 8E2D      		mov r24,r14
 2686 0070 0E94 0000 		call layer_on
 2687               	.LVL334:
 2688 0074 E092 0000 		sts rightside,r14
 2689               	.L193:
 528:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2690               		.loc 1 528 0 is_stmt 1
 2691 0078 1092 0000 		sts key_timer+1,__zero_reg__
 2692 007c 1092 0000 		sts key_timer,__zero_reg__
 2693               		.loc 1 530 0
 2694 0080 00C0      		rjmp .L186
 2695               	.L191:
 526:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     // clear_mods();
 2696               		.loc 1 526 0
 2697 0082 8091 0000 		lds r24,rightside
 2698 0086 0E94 0000 		call layer_off
 2699               	.LVL335:
 2700 008a 1092 0000 		sts rightside,__zero_reg__
 2701 008e 8091 0000 		lds r24,leftside
 2702 0092 8430      		cpi r24,lo8(4)
 2703 0094 01F4      		brne .L193
 526:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     // clear_mods();
 2704               		.loc 1 526 0 is_stmt 0 discriminator 1
 2705 0096 8E2D      		mov r24,r14
 2706 0098 0E94 0000 		call layer_on
 2707               	.LVL336:
 2708 009c E092 0000 		sts leftside,r14
 2709 00a0 00C0      		rjmp .L193
 2710               		.cfi_endproc
 2711               	.LFE156:
 2713               		.section	.text.toggle_plover,"ax",@progbits
 2714               	.global	toggle_plover
 2716               	toggle_plover:
 2717               	.LFB158:
 531:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 532:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** // ....................................................................... Steno
 533:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 534:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void steno(keyrecord_t *record)
 535:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 536:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) {
 537:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef AUDIO_ENABLE
 538:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     PLAY_SONG(song_plover);
 539:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #endif
 540:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     clear_layers();
 541:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_on(_PLOVER);
 542:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifndef STENO_ENABLE
 543:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     if (!eeconfig_is_enabled()) { eeconfig_init(); }
 544:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     keymap_config.raw  = eeconfig_read_keymap();
 545:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     keymap_config.nkro = 1;
 546:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     eeconfig_update_keymap(keymap_config.raw);
 547:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #endif
 548:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     toggle_plover(1);
 549:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 550:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 551:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 552:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** static uint8_t plover = 0;                  // plover application run state (0) off (1) on, see wm 
 553:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 554:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** void toggle_plover(uint8_t state)
 555:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** {
 2718               		.loc 1 555 0 is_stmt 1
 2719               		.cfi_startproc
 2720               	.LVL337:
 2721 0000 CF93      		push r28
 2722               	.LCFI76:
 2723               		.cfi_def_cfa_offset 3
 2724               		.cfi_offset 28, -2
 2725               	/* prologue: function */
 2726               	/* frame size = 0 */
 2727               	/* stack size = 1 */
 2728               	.L__stack_usage = 1
 2729 0002 C82F      		mov r28,r24
 556:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (plover != state) {
 2730               		.loc 1 556 0
 2731 0004 8091 0000 		lds r24,plover
 2732               	.LVL338:
 2733 0008 8C17      		cp r24,r28
 2734 000a 01F0      		breq .L195
 2735               		.file 4 "/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h"
   1:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** 
   2:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** // simple window manager specific plover keybind hook
   3:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** 
   4:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** // toggle plover application, see herbstluftwm/config/appbinds
   5:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** register_code  (KC_LGUI);
 2736               		.loc 4 5 0
 2737 000c 83EE      		ldi r24,lo8(-29)
 2738 000e 0E94 0000 		call register_code
 2739               	.LVL339:
   6:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** register_code  (KC_LCTL);
 2740               		.loc 4 6 0
 2741 0012 80EE      		ldi r24,lo8(-32)
 2742 0014 0E94 0000 		call register_code
 2743               	.LVL340:
   7:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** tap_key        (KC_EQL);
 2744               		.loc 4 7 0
 2745 0018 8EE2      		ldi r24,lo8(46)
 2746 001a 90E0      		ldi r25,0
 2747 001c 0E94 0000 		call tap_key
 2748               	.LVL341:
   8:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** unregister_code(KC_LCTL);
 2749               		.loc 4 8 0
 2750 0020 80EE      		ldi r24,lo8(-32)
 2751 0022 0E94 0000 		call unregister_code
 2752               	.LVL342:
   9:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/plover_keybind.h **** unregister_code(KC_LGUI);
 2753               		.loc 4 9 0
 2754 0026 83EE      		ldi r24,lo8(-29)
 2755 0028 0E94 0000 		call unregister_code
 2756               	.LVL343:
 557:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef PLOVER_KEYBIND
 558:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #include "plover_keybind.h"
 559:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #endif
 560:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     plover = state;
 2757               		.loc 1 560 0
 2758 002c C093 0000 		sts plover,r28
 2759               	.L195:
 2760               	/* epilogue start */
 561:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 562:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2761               		.loc 1 562 0
 2762 0030 CF91      		pop r28
 2763               	.LVL344:
 2764 0032 0895      		ret
 2765               		.cfi_endproc
 2766               	.LFE158:
 2768               		.section	.text.base_layer,"ax",@progbits
 2769               	.global	base_layer
 2771               	base_layer:
 2772               	.LFB152:
 442:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (defer) { return; }                    // see process_record_user() CNTR_TL, CNTR_TR
 2773               		.loc 1 442 0
 2774               		.cfi_startproc
 2775               	.LVL345:
 2776               	/* prologue: function */
 2777               	/* frame size = 0 */
 2778               	/* stack size = 0 */
 2779               	.L__stack_usage = 0
 443:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef AUDIO_ENABLE
 2780               		.loc 1 443 0
 2781 0000 8111      		cpse r24,__zero_reg__
 2782 0002 00C0      		rjmp .L197
 447:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   set_single_persistent_default_layer(_BASE);
 2783               		.loc 1 447 0
 2784 0004 0E94 0000 		call clear_layers
 2785               	.LVL346:
 448:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   toggle_plover(0);
 2786               		.loc 1 448 0
 2787 0008 80E0      		ldi r24,0
 2788 000a 0E94 0000 		call set_single_persistent_default_layer
 2789               	.LVL347:
 449:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** }
 2790               		.loc 1 449 0
 2791 000e 80E0      		ldi r24,0
 2792 0010 0C94 0000 		jmp toggle_plover
 2793               	.LVL348:
 2794               	.L197:
 2795               	/* epilogue start */
 450:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2796               		.loc 1 450 0
 2797 0014 0895      		ret
 2798               		.cfi_endproc
 2799               	.LFE152:
 2801               		.section	.text.tt_escape,"ax",@progbits
 2802               	.global	tt_escape
 2804               	tt_escape:
 2805               	.LFB113:
  46:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (tt_keycode != keycode && tt_keycode) { base_layer(0); } // if different TT layer selected
 2806               		.loc 1 46 0
 2807               		.cfi_startproc
 2808               	.LVL349:
 2809 0000 0F93      		push r16
 2810               	.LCFI77:
 2811               		.cfi_def_cfa_offset 3
 2812               		.cfi_offset 16, -2
 2813 0002 1F93      		push r17
 2814               	.LCFI78:
 2815               		.cfi_def_cfa_offset 4
 2816               		.cfi_offset 17, -3
 2817 0004 CF93      		push r28
 2818               	.LCFI79:
 2819               		.cfi_def_cfa_offset 5
 2820               		.cfi_offset 28, -4
 2821 0006 DF93      		push r29
 2822               	.LCFI80:
 2823               		.cfi_def_cfa_offset 6
 2824               		.cfi_offset 29, -5
 2825               	/* prologue: function */
 2826               	/* frame size = 0 */
 2827               	/* stack size = 4 */
 2828               	.L__stack_usage = 4
 2829 0008 8C01      		movw r16,r24
 2830 000a EB01      		movw r28,r22
  47:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed)               { key_timer = timer_read(); }
 2831               		.loc 1 47 0
 2832 000c 8091 0000 		lds r24,tt_keycode
 2833 0010 9091 0000 		lds r25,tt_keycode+1
 2834               	.LVL350:
 2835 0014 8617      		cp r24,r22
 2836 0016 9707      		cpc r25,r23
 2837 0018 01F0      		breq .L200
  47:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed)               { key_timer = timer_read(); }
 2838               		.loc 1 47 0 is_stmt 0 discriminator 1
 2839 001a 892B      		or r24,r25
 2840 001c 01F0      		breq .L200
  47:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed)               { key_timer = timer_read(); }
 2841               		.loc 1 47 0 discriminator 2
 2842 001e 80E0      		ldi r24,0
 2843 0020 0E94 0000 		call base_layer
 2844               	.LVL351:
 2845               	.L200:
  48:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else {
 2846               		.loc 1 48 0 is_stmt 1
 2847 0024 F801      		movw r30,r16
 2848 0026 8281      		ldd r24,Z+2
 2849 0028 8823      		tst r24
 2850 002a 01F0      		breq .L201
  48:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   else {
 2851               		.loc 1 48 0 is_stmt 0 discriminator 1
 2852 002c 0E94 0000 		call timer_read
 2853               	.LVL352:
 2854 0030 9093 0000 		sts key_timer+1,r25
 2855 0034 8093 0000 		sts key_timer,r24
 2856               	.L199:
 2857               	/* epilogue start */
  53:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2858               		.loc 1 53 0 is_stmt 1
 2859 0038 DF91      		pop r29
 2860 003a CF91      		pop r28
 2861               	.LVL353:
 2862 003c 1F91      		pop r17
 2863 003e 0F91      		pop r16
 2864               	.LVL354:
 2865 0040 0895      		ret
 2866               	.LVL355:
 2867               	.L201:
  50:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
 2868               		.loc 1 50 0
 2869 0042 8091 0000 		lds r24,key_timer
 2870 0046 9091 0000 		lds r25,key_timer+1
 2871 004a 0E94 0000 		call timer_elapsed
 2872               	.LVL356:
 2873 004e 883C      		cpi r24,-56
 2874 0050 9105      		cpc r25,__zero_reg__
 2875 0052 00F4      		brsh .L203
  50:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     key_timer = 0;
 2876               		.loc 1 50 0 is_stmt 0 discriminator 1
 2877 0054 D093 0000 		sts tt_keycode+1,r29
 2878 0058 C093 0000 		sts tt_keycode,r28
 2879               	.L203:
  51:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2880               		.loc 1 51 0 is_stmt 1
 2881 005c 1092 0000 		sts key_timer+1,__zero_reg__
 2882 0060 1092 0000 		sts key_timer,__zero_reg__
  53:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2883               		.loc 1 53 0
 2884 0064 00C0      		rjmp .L199
 2885               		.cfi_endproc
 2886               	.LFE113:
 2888               		.section	.text.steno,"ax",@progbits
 2889               	.global	steno
 2891               	steno:
 2892               	.LFB157:
 535:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   if (record->event.pressed) {
 2893               		.loc 1 535 0
 2894               		.cfi_startproc
 2895               	.LVL357:
 2896               	/* prologue: function */
 2897               	/* frame size = 0 */
 2898               	/* stack size = 0 */
 2899               	.L__stack_usage = 0
 536:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifdef AUDIO_ENABLE
 2900               		.loc 1 536 0
 2901 0000 FC01      		movw r30,r24
 2902 0002 8281      		ldd r24,Z+2
 2903               	.LVL358:
 2904 0004 8823      		tst r24
 2905 0006 01F0      		breq .L207
 540:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****     layer_on(_PLOVER);
 2906               		.loc 1 540 0
 2907 0008 0E94 0000 		call clear_layers
 2908               	.LVL359:
 541:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** #ifndef STENO_ENABLE
 2909               		.loc 1 541 0
 2910 000c 87E0      		ldi r24,lo8(7)
 2911 000e 0E94 0000 		call layer_on
 2912               	.LVL360:
 548:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c ****   }
 2913               		.loc 1 548 0
 2914 0012 81E0      		ldi r24,lo8(1)
 2915 0014 0C94 0000 		jmp toggle_plover
 2916               	.LVL361:
 2917               	.L207:
 2918               	/* epilogue start */
 550:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/keycode_functions.c **** 
 2919               		.loc 1 550 0
 2920 0018 0895      		ret
 2921               		.cfi_endproc
 2922               	.LFE157:
 2924               		.section	.text.process_record_user,"ax",@progbits
 2925               	.global	process_record_user
 2927               	process_record_user:
 2928               	.LFB159:
 2929               		.file 5 "keyboards/splitography/keymaps/beaklsi/keymap.c"
   1:keyboards/splitography/keymaps/beaklsi/keymap.c **** // This is the canonical layout file for the Quantum project. If you want to add another keyboard,
   2:keyboards/splitography/keymaps/beaklsi/keymap.c **** // this is the style you want to emulate.
   3:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
   4:keyboards/splitography/keymaps/beaklsi/keymap.c **** // To flash splitography / planck firmware
   5:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
   6:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   Reset keyboard or press hw reset button on base
   7:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
   8:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   cd qmk_firmware/keyboards/<keyboard>
   9:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   sudo make KEYMAP=<keymap> dfu
  10:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  11:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   sudo make clean           (good practice before flashing)
  12:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   sudo make KEYMAP=<keymap> (to compile check)
  13:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  14:keyboards/splitography/keymaps/beaklsi/keymap.c **** // Package requirements (for arch linux)
  15:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
  16:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   avr-gcc-atmel
  17:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   avr-libc-atmel
  18:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   dfu-programmer
  19:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  20:keyboards/splitography/keymaps/beaklsi/keymap.c **** // Notes
  21:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ▔▔▔▔▔
  22:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   ** E R G O   W I D E   S P L I T ** Layout
  23:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  24:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   Autocompletion tap dance key pairs (),[],{} are available from the
  25:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   number/symbol layer, as well as, numerous (un)shift key values
  26:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  27:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   #define PRIVATE_STRING includes private_string.h, a user defined code
  28:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   block for the PRIV tap dance e.g. SEND_STRING("secret messape"),
  29:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   see function private()
  30:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  31:keyboards/splitography/keymaps/beaklsi/keymap.c **** // Code
  32:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ▔▔▔▔
  33:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   This source is shamelessly based on the "default" planck layout
  34:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  35:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   #ifdef/#endif block structures are not indented, as syntax highlighting
  36:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   in vim is sufficient for identification
  37:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  38:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   c++ commenting style is used throughout
  39:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  40:keyboards/splitography/keymaps/beaklsi/keymap.c **** // Change history
  41:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔
  42:keyboards/splitography/keymaps/beaklsi/keymap.c **** //   See http://thedarnedestthing.com/colophon
  43:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  44:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  45:keyboards/splitography/keymaps/beaklsi/keymap.c **** //                === N O T E ===
  46:keyboards/splitography/keymaps/beaklsi/keymap.c **** //
  47:keyboards/splitography/keymaps/beaklsi/keymap.c **** // sudo CPATH=<keymap.c directory>/common make ...
  48:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  49:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  50:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifndef PLANCK
  51:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifndef SPLITOGRAPHY
  52:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define SPLITOGRAPHY
  53:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
  54:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
  55:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  56:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "config.h"
  57:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef SPLITOGRAPHY
  58:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "splitography.h"
  59:keyboards/splitography/keymaps/beaklsi/keymap.c **** #else
  60:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "planck.h"
  61:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
  62:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "action_layer.h"
  63:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef STENO_ENABLE
  64:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "keymap_steno.h"
  65:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
  66:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef AUDIO_ENABLE
  67:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "audio.h"
  68:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
  69:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "eeconfig.h"
  70:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  71:keyboards/splitography/keymaps/beaklsi/keymap.c **** extern keymap_config_t keymap_config;
  72:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  73:keyboards/splitography/keymaps/beaklsi/keymap.c **** enum keyboard_layers {
  74:keyboards/splitography/keymaps/beaklsi/keymap.c ****   _BASE = 0
  75:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_SHIFT
  76:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_GUIFN
  77:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_SYMBOL
  78:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_MOUSE
  79:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_NUMBER
  80:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_FNCKEY
  81:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_PLOVER
  82:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_EDIT
  83:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef PLANCK
  84:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_ADJUST
  85:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
  86:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_TTCAPS
  87:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_TTFNCKEY
  88:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_TTCURSOR
  89:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_TTMOUSE
  90:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_TTNUMBER
  91:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_TTREGEX
  92:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,_END_LAYERS
  93:keyboards/splitography/keymaps/beaklsi/keymap.c **** };
  94:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
  95:keyboards/splitography/keymaps/beaklsi/keymap.c **** enum keyboard_keycodes {
  96:keyboards/splitography/keymaps/beaklsi/keymap.c ****   BASE = SAFE_RANGE
  97:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,BASE1
  98:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,BASE2
  99:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,LT_I      // pseudo LT   (_SYMBOL, KC_I) for shifted key-codes, see process_record_user()
 100:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,ML_BSLS
 101:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,ML_EQL
 102:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,PLOVER
 103:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,SG_TILD   // pseudo GUI_T(S(KC_GRV))     for shifted key-codes, see process_record_user()
 104:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,SM_G      // pseudo MT   (MOD_LALT | MOD_LSFT, S(KC_G))
 105:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,SS_A      // pseudo SFT_T(S(KC_A))
 106:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,SS_T      // pseudo SFT_T(S(KC_T))
 107:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,TT_ESC
 108:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef STENO_ENABLE
 109:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,PS_STNA = STN_A
 110:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,PS_STNO = STN_O
 111:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,PS_STNE = STN_E
 112:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,PS_STNU = STN_U
 113:keyboards/splitography/keymaps/beaklsi/keymap.c **** #else
 114:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,LT_C    = LT (_SYMBOL, KC_C)
 115:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,LT_V    = LT (_NUMBER, KC_V)
 116:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,LT_N    = LT (_FNCKEY, KC_N)
 117:keyboards/splitography/keymaps/beaklsi/keymap.c ****  ,LT_M    = LT (_GUIFN, KC_M)
 118:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 119:keyboards/splitography/keymaps/beaklsi/keymap.c **** };
 120:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 121:keyboards/splitography/keymaps/beaklsi/keymap.c **** // modifier keys
 122:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef PLANCK
 123:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CT_RGHT CTL_T(KC_RGHT)
 124:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define AT_DOWN ALT_T(KC_DOWN)
 125:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define GT_UP   GUI_T(KC_UP)
 126:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 127:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define AT_B    ALT_T(KC_B)
 128:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CT_C    CTL_T(KC_C)
 129:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define MT_E    MT   (MOD_LCTL | MOD_LALT, KC_E)
 130:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define ST_A    SFT_T(KC_A)
 131:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 132:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_Q  GUI_T(KC_Q)
 133:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_H  CTL_T(KC_H)
 134:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_E  ALT_T(KC_E)
 135:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_A  SFT_T(KC_A)
 136:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_T  SFT_T(KC_T)
 137:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_R  ALT_T(KC_R)
 138:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_S  CTL_T(KC_S)
 139:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HOME_W  GUI_T(KC_W)
 140:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 141:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "tapdance.h"
 142:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 143:keyboards/splitography/keymaps/beaklsi/keymap.c **** // keycodes
 144:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define ___x___ KC_TRNS
 145:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define ___fn__ KC_TRNS
 146:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef _______
 147:keyboards/splitography/keymaps/beaklsi/keymap.c **** #undef _______
 148:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 149:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define _______ KC_NO
 150:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 151:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef HASKELL
 152:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HS_COLN TD_COLN
 153:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HS_LT   TD_LT
 154:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HS_GT   TD_GT
 155:keyboards/splitography/keymaps/beaklsi/keymap.c **** #else
 156:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HS_COLN KC_COLN
 157:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HS_LT   KC_LT
 158:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define HS_GT   KC_GT
 159:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 160:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 161:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define COPY    LCTL(KC_C)
 162:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CUT     LCTL(KC_X)
 163:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define EOT     LCTL(KC_D)
 164:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define NAK     LCTL(KC_U)
 165:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define PASTE   TD_PASTE
 166:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define UNDO    LCTL(KC_Z)
 167:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define XCOPY   LCTL(LSFT(KC_C))
 168:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define XPASTE  TD_XPASTE
 169:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 170:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define TT_SPC  LT  (_TTCURSOR, KC_SPC)
 171:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef PLANCK
 172:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define LT_DEL  LT  (_ADJUST, KC_DEL)
 173:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define LT_INS  LT  (_FNCKEY, KC_INS)
 174:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define LT_LEFT LT  (_EDIT, KC_LEFT)
 175:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 176:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define LT_ESC  LT  (_NUMBER, KC_ESC)
 177:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define OS_ALT  OSM (MOD_LALT)
 178:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define OS_CTL  OSM (MOD_LCTL)
 179:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define OS_GUI  OSM (MOD_LGUI)
 180:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define OS_SFT  OSM (MOD_LSFT)
 181:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 182:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CNTR_TL TT  (_TTFNCKEY)
 183:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CNTR_TR TT  (_TTCAPS)               // pseudo capslock to avoid TT key_timer conflicts
 184:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CNTR_HL TT  (_TTCURSOR)
 185:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CNTR_HR TT  (_TTMOUSE)
 186:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CNTR_BL TT  (_TTNUMBER)
 187:keyboards/splitography/keymaps/beaklsi/keymap.c **** #define CNTR_BR TT  (_TTREGEX)
 188:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 189:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ........................................................ Default Alpha Layout
 190:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 191:keyboards/splitography/keymaps/beaklsi/keymap.c **** const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
 192:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 193:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "base_layout.h"
 194:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "steno_layout.h"
 195:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 196:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ...................................................... Number / Function Keys
 197:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 198:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "number_fkey_layout.h"
 199:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 200:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ......................................................... Symbol / Navigation
 201:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 202:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "symbol_guifn_layout.h"
 203:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 204:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ............................................................... Toggle Layers
 205:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 206:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "toggle_layout.h"
 207:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 208:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ......................................................... Short Cuts / Adjust
 209:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 210:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "chord_layout.h"
 211:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 212:keyboards/splitography/keymaps/beaklsi/keymap.c **** };
 213:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 214:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ...................................................................... Sounds
 215:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 216:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "sounds.h"
 217:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 218:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 219:keyboards/splitography/keymaps/beaklsi/keymap.c **** // User Keycode Trap
 220:keyboards/splitography/keymaps/beaklsi/keymap.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
 221:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 222:keyboards/splitography/keymaps/beaklsi/keymap.c **** #include "keycode_functions.c"
 223:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 224:keyboards/splitography/keymaps/beaklsi/keymap.c **** static uint8_t down_punc = 0;               // substitute (0) keycode (1) leader + one shot shift, 
 225:keyboards/splitography/keymaps/beaklsi/keymap.c **** static uint8_t dual_down = 0;               // dual keys down (2 -> 1 -> 0) reset on last up stroke
 226:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 227:keyboards/splitography/keymaps/beaklsi/keymap.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record)
 228:keyboards/splitography/keymaps/beaklsi/keymap.c **** {
 2930               		.loc 5 228 0
 2931               		.cfi_startproc
 2932               	.LVL362:
 2933 0000 EF92      		push r14
 2934               	.LCFI81:
 2935               		.cfi_def_cfa_offset 3
 2936               		.cfi_offset 14, -2
 2937 0002 0F93      		push r16
 2938               	.LCFI82:
 2939               		.cfi_def_cfa_offset 4
 2940               		.cfi_offset 16, -3
 2941 0004 1F93      		push r17
 2942               	.LCFI83:
 2943               		.cfi_def_cfa_offset 5
 2944               		.cfi_offset 17, -4
 2945 0006 CF93      		push r28
 2946               	.LCFI84:
 2947               		.cfi_def_cfa_offset 6
 2948               		.cfi_offset 28, -5
 2949 0008 DF93      		push r29
 2950               	.LCFI85:
 2951               		.cfi_def_cfa_offset 7
 2952               		.cfi_offset 29, -6
 2953               	/* prologue: function */
 2954               	/* frame size = 0 */
 2955               	/* stack size = 5 */
 2956               	.L__stack_usage = 5
 2957 000a EB01      		movw r28,r22
 229:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ........................................................ Home Row Modifiers
 230:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   switch (keycode) {
 2958               		.loc 5 231 0
 2959 000c 8F30      		cpi r24,15
 2960 000e 28E5      		ldi r18,88
 2961 0010 9207      		cpc r25,r18
 2962 0012 00F0      		brlo .+2
 2963 0014 00C0      		rjmp .L211
 2964 0016 8B30      		cpi r24,11
 2965 0018 28E5      		ldi r18,88
 2966 001a 9207      		cpc r25,r18
 2967 001c 00F0      		brlo .+2
 2968 001e 00C0      		rjmp .L212
 2969 0020 8130      		cpi r24,1
 2970 0022 25E5      		ldi r18,85
 2971 0024 9207      		cpc r25,r18
 2972 0026 01F4      		brne .+2
 2973 0028 00C0      		rjmp .L213
 2974 002a 00F0      		brlo .+2
 2975 002c 00C0      		rjmp .L214
 2976 002e 8E31      		cpi r24,30
 2977 0030 22E0      		ldi r18,2
 2978 0032 9207      		cpc r25,r18
 2979 0034 01F4      		brne .+2
 2980 0036 00C0      		rjmp .L215
 2981 0038 00F4      		brsh .L216
 2982 003a 8633      		cpi r24,54
 2983 003c 9105      		cpc r25,__zero_reg__
 2984 003e 01F4      		brne .+2
 2985 0040 00C0      		rjmp .L217
 2986 0042 8733      		cpi r24,55
 2987 0044 9105      		cpc r25,__zero_reg__
 2988 0046 01F4      		brne .+2
 2989 0048 00C0      		rjmp .L218
 2990 004a 8A97      		sbiw r24,42
 2991 004c 01F4      		brne .L210
 232:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 233:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_W:
 234:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LGUI);
 235:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 236:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_H:
 237:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_S:
 238:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LCTL);
 239:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 240:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_E:
 241:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_R:
 242:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LALT);
 243:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 244:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_A:
 245:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LSFT);
 246:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 247:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_T:
 248:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_RSFT);              // note: SFT_T actually uses KC_LSFT
 249:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 250:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 251:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case OS_ALT:
 252:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LALT);
 253:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 254:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case OS_CTL:
 255:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LCTL);
 256:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 257:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case OS_GUI:
 258:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LGUI);
 259:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 260:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 261:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ...................................................... Center Toggle Layers
 262:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 263:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case CNTR_TL:
 264:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, 0, LEFT, TOGGLE)) { dual_down = 2; return false; } // defer reset!
 265:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (dual_down)                            { dual_down--; base_layer(dual_down); return false; }
 266:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tt_escape(record, keycode);
 267:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 268:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case CNTR_TR:
 269:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, 0, RIGHT, TOGGLE)) { dual_down = 2; return false; } // defer reset!
 270:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (dual_down)                             { dual_down--; base_layer(dual_down); return false; 
 271:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tt_escape(record, keycode);
 272:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 273:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case CNTR_HL:
 274:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case CNTR_HR:
 275:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case CNTR_BL:
 276:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case CNTR_BR:
 277:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tt_escape(record, keycode);
 278:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 279:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 280:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case TT_ESC:
 281:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, SHIFT, KC_TAB))   { return false; }
 282:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_TAB)) { return false; }
 283:keyboards/splitography/keymaps/beaklsi/keymap.c ****     base_layer(0);                          // exit TT layer
 284:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 285:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 286:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ........................................................... Left Thumb Keys
 287:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 288:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case LT_ESC:
 289:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, _FNCKEY, LEFT, ONDOWN))  { return false; }
 290:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, SHIFT, KC_TAB))   { return false; }
 291:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_TAB)) { return false; }
 292:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (tt_keycode)                                  { base_layer(0); return false; }
 293:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer(record, _NUMBER);
 294:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 295:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 296:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case LT_I:
 297:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, _FNCKEY, RIGHT, ONDOWN)) { return false; }
 298:keyboards/splitography/keymaps/beaklsi/keymap.c ****     lt_shift     (record, on_shift(KC_RSFT) ? SHIFT : NOSHIFT, KC_I, _SYMBOL); // maintain repeatin
 299:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer    (record, _SYMBOL);
 300:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, LEFT, 0, 0, _SYMBOL, _GUIFN);
 301:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 302:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case ML_EQL:
 303:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer    (record, _MOUSE);
 304:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, LEFT, NOSHIFT, KC_EQL, _MOUSE, _GUIFN);
 305:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 306:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 307:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // .......................................................... Right Thumb Keys
 308:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 309:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case ML_BSLS:
 310:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer    (record, _MOUSE);
 311:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, RIGHT, NOSHIFT, KC_BSLS, _MOUSE, _SYMBOL);
 312:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 313:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case TD_SPC:
 314:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, _TTCAPS, LEFT, TOGGLE))  { return false; }
 315:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (record->event.pressed)                       { auto_cap = down_punc; } // down_punc persist
 316:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_ENT)) { return false; }
 317:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_ENT)) { return false; }
 318:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer    (record, _GUIFN);
 319:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, RIGHT, 0, 0, _GUIFN, _SYMBOL);
 320:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 321:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case TT_SPC:
 322:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef CAPS_ONOFF
 323:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, _TTCAPS, LEFT, TOGGLE))  { return false; }
 324:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 325:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_ENT)) { return false; }
 326:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_ENT)) { return false; }
 327:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 328:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 329:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case TD_BSPC:
 330:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, _TTCAPS, RIGHT, TOGGLE)) { return false; }
 331:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_DEL)) { return false; }
 332:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (record->event.pressed)                       { auto_cap = down_punc; } // down_punc persist
 333:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer(record, _EDIT);
 334:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 335:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_BSPC:
 336:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef CAPS_ONOFF
 337:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, _TTCAPS, RIGHT, TOGGLE))  { return false; }
 2992               		.loc 5 337 0
 2993 004e 21E0      		ldi r18,lo8(1)
 2994 0050 42E0      		ldi r20,lo8(2)
 2995 0052 69E0      		ldi r22,lo8(9)
 2996               	.LVL363:
 2997 0054 CE01      		movw r24,r28
 2998               	.LVL364:
 2999 0056 0E94 0000 		call raise_layer
 3000               	.LVL365:
 3001 005a 8111      		cpse r24,__zero_reg__
 3002 005c 00C0      		rjmp .L317
 338:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 339:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_DEL))  { return false; }
 3003               		.loc 5 339 0
 3004 005e 2CE4      		ldi r18,lo8(76)
 3005 0060 30E0      		ldi r19,0
 3006 0062 40E0      		ldi r20,0
 3007 0064 61EE      		ldi r22,lo8(-31)
 3008 0066 70E0      		ldi r23,0
 3009 0068 CE01      		movw r24,r28
 3010 006a 0E94 0000 		call map_shift
 3011               	.LVL366:
 3012 006e 182F      		mov r17,r24
 3013 0070 8111      		cpse r24,__zero_reg__
 3014 0072 00C0      		rjmp .L317
 340:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef CAPS_ONOFF
 341:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (record->event.pressed)                        { key_timer = timer_read(); }
 3015               		.loc 5 341 0
 3016 0074 8A81      		ldd r24,Y+2
 3017 0076 8823      		tst r24
 3018 0078 01F4      		brne .+2
 3019 007a 00C0      		rjmp .L262
 3020               		.loc 5 341 0 is_stmt 0 discriminator 1
 3021 007c 0E94 0000 		call timer_read
 3022               	.LVL367:
 3023 0080 9093 0000 		sts key_timer+1,r25
 3024 0084 8093 0000 		sts key_timer,r24
 3025 0088 00C0      		rjmp .L209
 3026               	.LVL368:
 3027               	.L216:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3028               		.loc 5 231 0 is_stmt 1
 3029 008a 8833      		cpi r24,56
 3030 008c 22E0      		ldi r18,2
 3031 008e 9207      		cpc r25,r18
 3032 0090 01F4      		brne .+2
 3033 0092 00C0      		rjmp .L215
 3034 0094 00F4      		brsh .L220
 3035 0096 8333      		cpi r24,51
 3036 0098 9240      		sbci r25,2
 3037 009a 01F4      		brne .+2
 3038 009c 00C0      		rjmp .L221
 3039               	.LVL369:
 3040               	.L210:
 342:keyboards/splitography/keymaps/beaklsi/keymap.c ****     else if (timer_elapsed(key_timer) < TAPPING_TERM) { tap_key(KC_BSPC); }
 343:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;                           // capslock toggling trap, use shift bspc -> del for au
 344:keyboards/splitography/keymaps/beaklsi/keymap.c **** #else
 345:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 346:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 347:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 348:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ............................................................. Modifier Keys
 349:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 350:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case SG_TILD:
 351:keyboards/splitography/keymaps/beaklsi/keymap.c ****     mt_shift(record, KC_LGUI, 0, KC_GRV);
 352:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 353:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case SM_G:
 354:keyboards/splitography/keymaps/beaklsi/keymap.c ****     mt_shift(record, KC_LALT, KC_LSFT, KC_G);
 355:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 356:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case SS_A:
 357:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LSFT);
 358:keyboards/splitography/keymaps/beaklsi/keymap.c ****     mt_shift(record, KC_LSFT, 0, KC_A);
 359:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 360:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case SS_T:
 361:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_RSFT);
 362:keyboards/splitography/keymaps/beaklsi/keymap.c ****     mt_shift(record, KC_LSFT, 0, KC_T);
 363:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 364:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 365:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ......................................................... Shift Mapped Keys
 366:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 367:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_COLN:
 368:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case TD_EMOJ:
 369:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_COLN)) { return false; }
 370:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 371:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_COMM:
 372:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (tt_keycode && map_shift(record, KC_RSFT, SHIFT, KC_1)) { return false; }
 373:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_GRV))           { return false; }
 374:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 375:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_DOT:
 376:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, SHIFT, KC_SLSH)) { return false; }
 377:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, SHIFT, KC_SLSH)) { return false; }
 378:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 379:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 380:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ..................................................... Leader Capitalization
 381:keyboards/splitography/keymaps/beaklsi/keymap.c ****   
 382:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case TD_TILD:
 383:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (on_shift(KC_RSFT)) { unregister_code(KC_LSFT); } // un-shift before tap dance processing to
 384:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_EXLM:
 385:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_QUES:
 386:keyboards/splitography/keymaps/beaklsi/keymap.c ****     down_punc = (record->event.pressed) ? 1 : 0;         // dot/ques/exlm + space/enter + shift sho
 387:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 388:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 389:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ..................................................... Thumb Row Cursor Keys
 390:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 391:keyboards/splitography/keymaps/beaklsi/keymap.c **** #ifdef PLANCK
 392:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case AT_DOWN:
 393:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LALT);
 394:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 395:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case CT_RGHT:
 396:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LGUI);
 397:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 398:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case GT_UP:
 399:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_mods(record, KC_LCTL);
 400:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 401:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 402:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 403:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ................................................................ Steno Keys
 404:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 405:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case PLOVER:
 406:keyboards/splitography/keymaps/beaklsi/keymap.c ****     steno(record);
 407:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 408:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case BASE1:
 409:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, 0, LEFT, TOGGLE)) { base_layer(0); return false; }
 410:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 411:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case BASE2:
 412:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (raise_layer(record, 0, RIGHT, TOGGLE)) { base_layer(0); return false; }
 413:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 414:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 415:keyboards/splitography/keymaps/beaklsi/keymap.c ****   // ................................................................ Other Keys
 416:keyboards/splitography/keymaps/beaklsi/keymap.c **** 
 417:keyboards/splitography/keymaps/beaklsi/keymap.c ****   default:
 418:keyboards/splitography/keymaps/beaklsi/keymap.c ****     key_timer = 0;                          // regular keycode, clear timer in keycode_functions.h
 3041               		.loc 5 418 0
 3042 009e 1092 0000 		sts key_timer+1,__zero_reg__
 3043 00a2 1092 0000 		sts key_timer,__zero_reg__
 3044 00a6 00C0      		rjmp .L315
 3045               	.LVL370:
 3046               	.L220:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3047               		.loc 5 231 0
 3048 00a8 8932      		cpi r24,41
 3049 00aa 25E4      		ldi r18,69
 3050 00ac 9207      		cpc r25,r18
 3051 00ae 01F4      		brne .+2
 3052 00b0 00C0      		rjmp .L222
 3053 00b2 8C32      		cpi r24,44
 3054 00b4 9B44      		sbci r25,75
 3055 00b6 01F4      		brne .L210
 323:keyboards/splitography/keymaps/beaklsi/keymap.c **** #endif
 3056               		.loc 5 323 0
 3057 00b8 21E0      		ldi r18,lo8(1)
 3058 00ba 41E0      		ldi r20,lo8(1)
 3059 00bc 69E0      		ldi r22,lo8(9)
 3060               	.LVL371:
 3061 00be CE01      		movw r24,r28
 3062               	.LVL372:
 3063 00c0 0E94 0000 		call raise_layer
 3064               	.LVL373:
 3065 00c4 8111      		cpse r24,__zero_reg__
 3066 00c6 00C0      		rjmp .L317
 325:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_ENT)) { return false; }
 3067               		.loc 5 325 0
 3068 00c8 28E2      		ldi r18,lo8(40)
 3069 00ca 30E0      		ldi r19,0
 3070 00cc 40E0      		ldi r20,0
 3071 00ce 61EE      		ldi r22,lo8(-31)
 3072 00d0 70E0      		ldi r23,0
 3073 00d2 CE01      		movw r24,r28
 3074 00d4 0E94 0000 		call map_shift
 3075               	.LVL374:
 326:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3076               		.loc 5 326 0
 3077 00d8 28E2      		ldi r18,lo8(40)
 3078 00da 30E0      		ldi r19,0
 325:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_ENT)) { return false; }
 3079               		.loc 5 325 0
 3080 00dc 8111      		cpse r24,__zero_reg__
 3081 00de 00C0      		rjmp .L317
 3082               	.L319:
 373:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3083               		.loc 5 373 0
 3084 00e0 40E0      		ldi r20,0
 3085 00e2 65EE      		ldi r22,lo8(-27)
 3086 00e4 70E0      		ldi r23,0
 3087               	.L316:
 377:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3088               		.loc 5 377 0
 3089 00e6 CE01      		movw r24,r28
 3090 00e8 0E94 0000 		call map_shift
 3091               	.LVL375:
 3092 00ec 11E0      		ldi r17,lo8(1)
 3093 00ee 1827      		eor r17,r24
 3094 00f0 00C0      		rjmp .L209
 3095               	.LVL376:
 3096               	.L214:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3097               		.loc 5 231 0
 3098 00f2 8230      		cpi r24,2
 3099 00f4 27E5      		ldi r18,87
 3100 00f6 9207      		cpc r25,r18
 3101 00f8 01F4      		brne .+2
 3102 00fa 00C0      		rjmp .L221
 3103 00fc 00F4      		brsh .L224
 3104 00fe 8830      		cpi r24,8
 3105 0100 25E5      		ldi r18,85
 3106 0102 9207      		cpc r25,r18
 3107 0104 01F4      		brne .+2
 3108 0106 00C0      		rjmp .L225
 3109 0108 8130      		cpi r24,1
 3110 010a 27E5      		ldi r18,87
 3111 010c 9207      		cpc r25,r18
 3112 010e 01F4      		brne .+2
 3113 0110 00C0      		rjmp .L226
 3114 0112 8430      		cpi r24,4
 3115 0114 9545      		sbci r25,85
 3116 0116 01F4      		brne .L210
 3117               	.L227:
 242:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3118               		.loc 5 242 0
 3119 0118 62EE      		ldi r22,lo8(-30)
 3120 011a 70E0      		ldi r23,0
 3121               	.LVL377:
 3122 011c 00C0      		rjmp .L320
 3123               	.LVL378:
 3124               	.L224:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3125               		.loc 5 231 0
 3126 011e 8A30      		cpi r24,10
 3127 0120 27E5      		ldi r18,87
 3128 0122 9207      		cpc r25,r18
 3129 0124 01F4      		brne .+2
 3130 0126 00C0      		rjmp .L228
 3131 0128 00F4      		brsh .L229
 3132 012a 8930      		cpi r24,9
 3133 012c 9745      		sbci r25,87
 3134 012e 01F0      		breq .+2
 3135 0130 00C0      		rjmp .L210
 314:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (record->event.pressed)                       { auto_cap = down_punc; } // down_punc persist
 3136               		.loc 5 314 0
 3137 0132 21E0      		ldi r18,lo8(1)
 3138 0134 41E0      		ldi r20,lo8(1)
 3139 0136 69E0      		ldi r22,lo8(9)
 3140               	.LVL379:
 3141 0138 CE01      		movw r24,r28
 3142               	.LVL380:
 3143 013a 0E94 0000 		call raise_layer
 3144               	.LVL381:
 3145 013e 8111      		cpse r24,__zero_reg__
 3146 0140 00C0      		rjmp .L317
 315:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_ENT)) { return false; }
 3147               		.loc 5 315 0
 3148 0142 8A81      		ldd r24,Y+2
 3149 0144 8823      		tst r24
 3150 0146 01F0      		breq .L260
 315:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_ENT)) { return false; }
 3151               		.loc 5 315 0 is_stmt 0 discriminator 1
 3152 0148 8091 0000 		lds r24,down_punc
 3153 014c 8093 0000 		sts auto_cap,r24
 3154               	.L260:
 316:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_ENT)) { return false; }
 3155               		.loc 5 316 0 is_stmt 1
 3156 0150 28E2      		ldi r18,lo8(40)
 3157 0152 30E0      		ldi r19,0
 3158 0154 40E0      		ldi r20,0
 3159 0156 61EE      		ldi r22,lo8(-31)
 3160 0158 70E0      		ldi r23,0
 3161 015a CE01      		movw r24,r28
 3162 015c 0E94 0000 		call map_shift
 3163               	.LVL382:
 3164 0160 8111      		cpse r24,__zero_reg__
 3165 0162 00C0      		rjmp .L317
 317:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer    (record, _GUIFN);
 3166               		.loc 5 317 0
 3167 0164 28E2      		ldi r18,lo8(40)
 3168 0166 30E0      		ldi r19,0
 3169 0168 40E0      		ldi r20,0
 3170 016a 65EE      		ldi r22,lo8(-27)
 3171 016c 70E0      		ldi r23,0
 3172 016e CE01      		movw r24,r28
 3173 0170 0E94 0000 		call map_shift
 3174               	.LVL383:
 3175 0174 8111      		cpse r24,__zero_reg__
 3176 0176 00C0      		rjmp .L317
 318:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, RIGHT, 0, 0, _GUIFN, _SYMBOL);
 3177               		.loc 5 318 0
 3178 0178 62E0      		ldi r22,lo8(2)
 3179 017a CE01      		movw r24,r28
 3180 017c 0E94 0000 		call tap_layer
 3181               	.LVL384:
 319:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3182               		.loc 5 319 0
 3183 0180 83E0      		ldi r24,lo8(3)
 3184 0182 E82E      		mov r14,r24
 3185 0184 02E0      		ldi r16,lo8(2)
 3186 0186 30E0      		ldi r19,0
 3187 0188 20E0      		ldi r18,0
 3188 018a 00C0      		rjmp .L325
 3189               	.LVL385:
 3190               	.L229:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3191               		.loc 5 231 0
 3192 018c 8930      		cpi r24,9
 3193 018e 28E5      		ldi r18,88
 3194 0190 9207      		cpc r25,r18
 3195 0192 01F4      		brne .+2
 3196 0194 00C0      		rjmp .L231
 3197 0196 8A30      		cpi r24,10
 3198 0198 9845      		sbci r25,88
 3199 019a 01F0      		breq .+2
 3200 019c 00C0      		rjmp .L210
 264:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (dual_down)                            { dual_down--; base_layer(dual_down); return false; }
 3201               		.loc 5 264 0
 3202 019e 21E0      		ldi r18,lo8(1)
 3203 01a0 41E0      		ldi r20,lo8(1)
 3204 01a2 60E0      		ldi r22,0
 3205               	.LVL386:
 3206 01a4 CE01      		movw r24,r28
 3207               	.LVL387:
 3208 01a6 0E94 0000 		call raise_layer
 3209               	.LVL388:
 3210 01aa 182F      		mov r17,r24
 3211 01ac 8823      		tst r24
 3212 01ae 01F4      		brne .+2
 3213 01b0 00C0      		rjmp .L253
 3214               	.L255:
 264:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (dual_down)                            { dual_down--; base_layer(dual_down); return false; }
 3215               		.loc 5 264 0 is_stmt 0 discriminator 1
 3216 01b2 82E0      		ldi r24,lo8(2)
 3217 01b4 8093 0000 		sts dual_down,r24
 3218               	.L317:
 407:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case BASE1:
 3219               		.loc 5 407 0 is_stmt 1
 3220 01b8 10E0      		ldi r17,0
 3221 01ba 00C0      		rjmp .L209
 3222               	.LVL389:
 3223               	.L211:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3224               		.loc 5 231 0
 3225 01bc 843E      		cpi r24,-28
 3226 01be 2CE5      		ldi r18,92
 3227 01c0 9207      		cpc r25,r18
 3228 01c2 01F4      		brne .+2
 3229 01c4 00C0      		rjmp .L233
 3230 01c6 00F0      		brlo .+2
 3231 01c8 00C0      		rjmp .L234
 3232 01ca 8F3D      		cpi r24,-33
 3233 01cc 2CE5      		ldi r18,92
 3234 01ce 9207      		cpc r25,r18
 3235 01d0 01F4      		brne .+2
 3236 01d2 00C0      		rjmp .L235
 3237 01d4 00F4      		brsh .L236
 3238 01d6 8C3D      		cpi r24,-36
 3239 01d8 2CE5      		ldi r18,92
 3240 01da 9207      		cpc r25,r18
 3241 01dc 01F4      		brne .+2
 3242 01de 00C0      		rjmp .L237
 3243 01e0 00F4      		brsh .L238
 3244 01e2 8B3D      		cpi r24,-37
 3245 01e4 9C45      		sbci r25,92
 3246 01e6 01F0      		breq .+2
 3247 01e8 00C0      		rjmp .L210
 409:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 3248               		.loc 5 409 0
 3249 01ea 21E0      		ldi r18,lo8(1)
 3250 01ec 41E0      		ldi r20,lo8(1)
 3251               	.L314:
 412:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 3252               		.loc 5 412 0
 3253 01ee 60E0      		ldi r22,0
 3254               	.LVL390:
 3255 01f0 CE01      		movw r24,r28
 3256               	.LVL391:
 3257 01f2 0E94 0000 		call raise_layer
 3258               	.LVL392:
 3259 01f6 8823      		tst r24
 3260 01f8 01F0      		breq .L317
 3261 01fa 00C0      		rjmp .L259
 3262               	.LVL393:
 3263               	.L238:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3264               		.loc 5 231 0
 3265 01fc 8D3D      		cpi r24,-35
 3266 01fe 2CE5      		ldi r18,92
 3267 0200 9207      		cpc r25,r18
 3268 0202 01F4      		brne .+2
 3269 0204 00C0      		rjmp .L240
 3270 0206 8E3D      		cpi r24,-34
 3271 0208 9C45      		sbci r25,92
 3272 020a 01F0      		breq .+2
 3273 020c 00C0      		rjmp .L210
 310:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, RIGHT, NOSHIFT, KC_BSLS, _MOUSE, _SYMBOL);
 3274               		.loc 5 310 0
 3275 020e 64E0      		ldi r22,lo8(4)
 3276               	.LVL394:
 3277 0210 CE01      		movw r24,r28
 3278               	.LVL395:
 3279 0212 0E94 0000 		call tap_layer
 3280               	.LVL396:
 311:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3281               		.loc 5 311 0
 3282 0216 93E0      		ldi r25,lo8(3)
 3283 0218 E92E      		mov r14,r25
 3284 021a 04E0      		ldi r16,lo8(4)
 3285 021c 21E3      		ldi r18,lo8(49)
 3286 021e 30E0      		ldi r19,0
 3287               	.L325:
 319:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3288               		.loc 5 319 0
 3289 0220 40E0      		ldi r20,0
 3290 0222 62E0      		ldi r22,lo8(2)
 3291 0224 00C0      		rjmp .L324
 3292               	.LVL397:
 3293               	.L236:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3294               		.loc 5 231 0
 3295 0226 813E      		cpi r24,-31
 3296 0228 2CE5      		ldi r18,92
 3297 022a 9207      		cpc r25,r18
 3298 022c 01F4      		brne .+2
 3299 022e 00C0      		rjmp .L242
 3300 0230 00F4      		brsh .+2
 3301 0232 00C0      		rjmp .L243
 3302 0234 823E      		cpi r24,-30
 3303 0236 2CE5      		ldi r18,92
 3304 0238 9207      		cpc r25,r18
 3305 023a 01F4      		brne .+2
 3306 023c 00C0      		rjmp .L244
 3307 023e 833E      		cpi r24,-29
 3308 0240 9C45      		sbci r25,92
 3309 0242 01F0      		breq .+2
 3310 0244 00C0      		rjmp .L210
 357:keyboards/splitography/keymaps/beaklsi/keymap.c ****     mt_shift(record, KC_LSFT, 0, KC_A);
 3311               		.loc 5 357 0
 3312 0246 61EE      		ldi r22,lo8(-31)
 3313 0248 70E0      		ldi r23,0
 3314               	.LVL398:
 3315 024a CE01      		movw r24,r28
 3316               	.LVL399:
 3317 024c 0E94 0000 		call tap_mods
 3318               	.LVL400:
 358:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3319               		.loc 5 358 0
 3320 0250 24E0      		ldi r18,lo8(4)
 3321 0252 30E0      		ldi r19,0
 3322               	.L322:
 362:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3323               		.loc 5 362 0
 3324 0254 50E0      		ldi r21,0
 3325 0256 40E0      		ldi r20,0
 3326 0258 61EE      		ldi r22,lo8(-31)
 3327 025a 70E0      		ldi r23,0
 3328 025c 00C0      		rjmp .L326
 3329               	.LVL401:
 3330               	.L234:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3331               		.loc 5 231 0
 3332 025e 8731      		cpi r24,23
 3333 0260 22E6      		ldi r18,98
 3334 0262 9207      		cpc r25,r18
 3335 0264 01F4      		brne .+2
 3336 0266 00C0      		rjmp .L246
 3337 0268 00F4      		brsh .L247
 3338 026a 8B30      		cpi r24,11
 3339 026c 21E6      		ldi r18,97
 3340 026e 9207      		cpc r25,r18
 3341 0270 01F4      		brne .+2
 3342 0272 00C0      		rjmp .L213
 3343 0274 00F4      		brsh .L248
 3344 0276 853E      		cpi r24,-27
 3345 0278 9C45      		sbci r25,92
 3346 027a 01F0      		breq .+2
 3347 027c 00C0      		rjmp .L210
 281:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_TAB)) { return false; }
 3348               		.loc 5 281 0
 3349 027e 2BE2      		ldi r18,lo8(43)
 3350 0280 30E0      		ldi r19,0
 3351 0282 41E0      		ldi r20,lo8(1)
 3352 0284 61EE      		ldi r22,lo8(-31)
 3353 0286 70E0      		ldi r23,0
 3354               	.LVL402:
 3355 0288 CE01      		movw r24,r28
 3356               	.LVL403:
 3357 028a 0E94 0000 		call map_shift
 3358               	.LVL404:
 3359 028e 8111      		cpse r24,__zero_reg__
 3360 0290 00C0      		rjmp .L317
 282:keyboards/splitography/keymaps/beaklsi/keymap.c ****     base_layer(0);                          // exit TT layer
 3361               		.loc 5 282 0
 3362 0292 2BE2      		ldi r18,lo8(43)
 3363 0294 30E0      		ldi r19,0
 3364 0296 40E0      		ldi r20,0
 3365 0298 65EE      		ldi r22,lo8(-27)
 3366 029a 70E0      		ldi r23,0
 3367 029c CE01      		movw r24,r28
 3368 029e 0E94 0000 		call map_shift
 3369               	.LVL405:
 3370 02a2 8111      		cpse r24,__zero_reg__
 3371 02a4 00C0      		rjmp .L317
 3372               	.L259:
 283:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 3373               		.loc 5 283 0
 3374 02a6 80E0      		ldi r24,0
 3375 02a8 0E94 0000 		call base_layer
 3376               	.LVL406:
 3377 02ac 00C0      		rjmp .L317
 3378               	.LVL407:
 3379               	.L248:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3380               		.loc 5 231 0
 3381 02ae 8631      		cpi r24,22
 3382 02b0 21E6      		ldi r18,97
 3383 02b2 9207      		cpc r25,r18
 3384 02b4 01F0      		breq .L213
 245:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3385               		.loc 5 245 0
 3386 02b6 61EE      		ldi r22,lo8(-31)
 3387 02b8 70E0      		ldi r23,0
 3388               	.LVL408:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3389               		.loc 5 231 0
 3390 02ba 8430      		cpi r24,4
 3391 02bc 9246      		sbci r25,98
 3392 02be 01F0      		breq .+2
 3393 02c0 00C0      		rjmp .L210
 3394               	.L320:
 238:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3395               		.loc 5 238 0
 3396 02c2 CE01      		movw r24,r28
 3397               	.LVL409:
 3398 02c4 0E94 0000 		call tap_mods
 3399               	.LVL410:
 3400               	.L315:
 419:keyboards/splitography/keymaps/beaklsi/keymap.c ****   }
 420:keyboards/splitography/keymaps/beaklsi/keymap.c ****   return true;
 3401               		.loc 5 420 0
 3402 02c8 11E0      		ldi r17,lo8(1)
 3403 02ca 00C0      		rjmp .L209
 3404               	.LVL411:
 3405               	.L247:
 231:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case HOME_Q:
 3406               		.loc 5 231 0
 3407 02cc 8531      		cpi r24,21
 3408 02ce 24E6      		ldi r18,100
 3409 02d0 9207      		cpc r25,r18
 3410 02d2 01F4      		brne .+2
 3411 02d4 00C0      		rjmp .L227
 3412 02d6 00F4      		brsh .L251
 3413 02d8 8830      		cpi r24,8
 3414 02da 9446      		sbci r25,100
 3415 02dc 01F4      		brne .+2
 3416 02de 00C0      		rjmp .L227
 3417 02e0 00C0      		rjmp .L210
 3418               	.L251:
 3419 02e2 8431      		cpi r24,20
 3420 02e4 28E6      		ldi r18,104
 3421 02e6 9207      		cpc r25,r18
 3422 02e8 01F0      		breq .L225
 3423 02ea 8A31      		cpi r24,26
 3424 02ec 9846      		sbci r25,104
 3425 02ee 01F0      		breq .+2
 3426 02f0 00C0      		rjmp .L210
 3427               	.L225:
 234:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3428               		.loc 5 234 0
 3429 02f2 63EE      		ldi r22,lo8(-29)
 3430 02f4 70E0      		ldi r23,0
 3431               	.LVL412:
 3432 02f6 00C0      		rjmp .L320
 3433               	.LVL413:
 3434               	.L213:
 238:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3435               		.loc 5 238 0
 3436 02f8 60EE      		ldi r22,lo8(-32)
 3437 02fa 70E0      		ldi r23,0
 3438               	.LVL414:
 3439 02fc 00C0      		rjmp .L320
 3440               	.LVL415:
 3441               	.L246:
 248:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3442               		.loc 5 248 0
 3443 02fe 65EE      		ldi r22,lo8(-27)
 3444 0300 70E0      		ldi r23,0
 3445               	.LVL416:
 3446 0302 00C0      		rjmp .L320
 3447               	.LVL417:
 3448               	.L253:
 265:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tt_escape(record, keycode);
 3449               		.loc 5 265 0
 3450 0304 8091 0000 		lds r24,dual_down
 3451 0308 8823      		tst r24
 3452 030a 01F0      		breq .L254
 3453               	.L318:
 270:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tt_escape(record, keycode);
 3454               		.loc 5 270 0 discriminator 1
 3455 030c 8150      		subi r24,lo8(-(-1))
 3456 030e 8093 0000 		sts dual_down,r24
 3457 0312 0E94 0000 		call base_layer
 3458               	.LVL418:
 3459               	.L209:
 421:keyboards/splitography/keymaps/beaklsi/keymap.c **** }
 3460               		.loc 5 421 0
 3461 0316 812F      		mov r24,r17
 3462               	/* epilogue start */
 3463 0318 DF91      		pop r29
 3464 031a CF91      		pop r28
 3465               	.LVL419:
 3466 031c 1F91      		pop r17
 3467 031e 0F91      		pop r16
 3468 0320 EF90      		pop r14
 3469 0322 0895      		ret
 3470               	.LVL420:
 3471               	.L254:
 266:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3472               		.loc 5 266 0
 3473 0324 6AE0      		ldi r22,lo8(10)
 3474 0326 78E5      		ldi r23,lo8(88)
 3475               	.L321:
 277:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3476               		.loc 5 277 0
 3477 0328 CE01      		movw r24,r28
 3478 032a 0E94 0000 		call tt_escape
 3479               	.LVL421:
 3480 032e 00C0      		rjmp .L315
 3481               	.LVL422:
 3482               	.L231:
 269:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (dual_down)                             { dual_down--; base_layer(dual_down); return false; 
 3483               		.loc 5 269 0
 3484 0330 21E0      		ldi r18,lo8(1)
 3485 0332 42E0      		ldi r20,lo8(2)
 3486 0334 60E0      		ldi r22,0
 3487               	.LVL423:
 3488 0336 CE01      		movw r24,r28
 3489               	.LVL424:
 3490 0338 0E94 0000 		call raise_layer
 3491               	.LVL425:
 3492 033c 182F      		mov r17,r24
 3493 033e 8111      		cpse r24,__zero_reg__
 3494 0340 00C0      		rjmp .L255
 270:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tt_escape(record, keycode);
 3495               		.loc 5 270 0
 3496 0342 8091 0000 		lds r24,dual_down
 3497 0346 8111      		cpse r24,__zero_reg__
 3498 0348 00C0      		rjmp .L318
 271:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3499               		.loc 5 271 0
 3500 034a 69E0      		ldi r22,lo8(9)
 3501 034c 78E5      		ldi r23,lo8(88)
 3502 034e 00C0      		rjmp .L321
 3503               	.LVL426:
 3504               	.L212:
 277:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3505               		.loc 5 277 0
 3506 0350 BC01      		movw r22,r24
 3507               	.LVL427:
 3508 0352 00C0      		rjmp .L321
 3509               	.LVL428:
 3510               	.L222:
 289:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, SHIFT, KC_TAB))   { return false; }
 3511               		.loc 5 289 0
 3512 0354 20E0      		ldi r18,0
 3513 0356 41E0      		ldi r20,lo8(1)
 3514 0358 66E0      		ldi r22,lo8(6)
 3515               	.LVL429:
 3516 035a CE01      		movw r24,r28
 3517               	.LVL430:
 3518 035c 0E94 0000 		call raise_layer
 3519               	.LVL431:
 3520 0360 8111      		cpse r24,__zero_reg__
 3521 0362 00C0      		rjmp .L317
 290:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_TAB)) { return false; }
 3522               		.loc 5 290 0
 3523 0364 2BE2      		ldi r18,lo8(43)
 3524 0366 30E0      		ldi r19,0
 3525 0368 41E0      		ldi r20,lo8(1)
 3526 036a 61EE      		ldi r22,lo8(-31)
 3527 036c 70E0      		ldi r23,0
 3528 036e CE01      		movw r24,r28
 3529 0370 0E94 0000 		call map_shift
 3530               	.LVL432:
 3531 0374 8111      		cpse r24,__zero_reg__
 3532 0376 00C0      		rjmp .L317
 291:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (tt_keycode)                                  { base_layer(0); return false; }
 3533               		.loc 5 291 0
 3534 0378 2BE2      		ldi r18,lo8(43)
 3535 037a 30E0      		ldi r19,0
 3536 037c 40E0      		ldi r20,0
 3537 037e 65EE      		ldi r22,lo8(-27)
 3538 0380 70E0      		ldi r23,0
 3539 0382 CE01      		movw r24,r28
 3540 0384 0E94 0000 		call map_shift
 3541               	.LVL433:
 3542 0388 8111      		cpse r24,__zero_reg__
 3543 038a 00C0      		rjmp .L317
 292:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer(record, _NUMBER);
 3544               		.loc 5 292 0
 3545 038c 8091 0000 		lds r24,tt_keycode
 3546 0390 9091 0000 		lds r25,tt_keycode+1
 293:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3547               		.loc 5 293 0
 3548 0394 65E0      		ldi r22,lo8(5)
 292:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer(record, _NUMBER);
 3549               		.loc 5 292 0
 3550 0396 892B      		or r24,r25
 3551 0398 01F0      		breq .+2
 3552 039a 00C0      		rjmp .L259
 3553               	.L323:
 333:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3554               		.loc 5 333 0
 3555 039c CE01      		movw r24,r28
 3556 039e 0E94 0000 		call tap_layer
 3557               	.LVL434:
 3558 03a2 00C0      		rjmp .L315
 3559               	.LVL435:
 3560               	.L240:
 297:keyboards/splitography/keymaps/beaklsi/keymap.c ****     lt_shift     (record, on_shift(KC_RSFT) ? SHIFT : NOSHIFT, KC_I, _SYMBOL); // maintain repeatin
 3561               		.loc 5 297 0
 3562 03a4 20E0      		ldi r18,0
 3563 03a6 42E0      		ldi r20,lo8(2)
 3564 03a8 66E0      		ldi r22,lo8(6)
 3565               	.LVL436:
 3566 03aa CE01      		movw r24,r28
 3567               	.LVL437:
 3568 03ac 0E94 0000 		call raise_layer
 3569               	.LVL438:
 3570 03b0 8111      		cpse r24,__zero_reg__
 3571 03b2 00C0      		rjmp .L317
 298:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer    (record, _SYMBOL);
 3572               		.loc 5 298 0
 3573 03b4 85EE      		ldi r24,lo8(-27)
 3574 03b6 90E0      		ldi r25,0
 3575 03b8 0E94 0000 		call on_shift
 3576               	.LVL439:
 3577 03bc 23E0      		ldi r18,lo8(3)
 3578 03be 4CE0      		ldi r20,lo8(12)
 3579 03c0 50E0      		ldi r21,0
 3580 03c2 682F      		mov r22,r24
 3581 03c4 CE01      		movw r24,r28
 3582 03c6 0E94 0000 		call lt_shift
 3583               	.LVL440:
 299:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, LEFT, 0, 0, _SYMBOL, _GUIFN);
 3584               		.loc 5 299 0
 3585 03ca 63E0      		ldi r22,lo8(3)
 3586 03cc CE01      		movw r24,r28
 3587 03ce 0E94 0000 		call tap_layer
 3588               	.LVL441:
 300:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3589               		.loc 5 300 0
 3590 03d2 32E0      		ldi r19,lo8(2)
 3591 03d4 E32E      		mov r14,r19
 3592 03d6 03E0      		ldi r16,lo8(3)
 3593 03d8 30E0      		ldi r19,0
 3594 03da 20E0      		ldi r18,0
 3595               	.L327:
 304:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3596               		.loc 5 304 0
 3597 03dc 40E0      		ldi r20,0
 3598 03de 61E0      		ldi r22,lo8(1)
 3599               	.L324:
 319:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3600               		.loc 5 319 0
 3601 03e0 CE01      		movw r24,r28
 3602 03e2 0E94 0000 		call rolling_layer
 3603               	.LVL442:
 3604 03e6 00C0      		rjmp .L315
 3605               	.LVL443:
 3606               	.L235:
 303:keyboards/splitography/keymaps/beaklsi/keymap.c ****     rolling_layer(record, LEFT, NOSHIFT, KC_EQL, _MOUSE, _GUIFN);
 3607               		.loc 5 303 0
 3608 03e8 64E0      		ldi r22,lo8(4)
 3609               	.LVL444:
 3610 03ea CE01      		movw r24,r28
 3611               	.LVL445:
 3612 03ec 0E94 0000 		call tap_layer
 3613               	.LVL446:
 304:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3614               		.loc 5 304 0
 3615 03f0 22E0      		ldi r18,lo8(2)
 3616 03f2 E22E      		mov r14,r18
 3617 03f4 04E0      		ldi r16,lo8(4)
 3618 03f6 2EE2      		ldi r18,lo8(46)
 3619 03f8 30E0      		ldi r19,0
 3620 03fa 00C0      		rjmp .L327
 3621               	.LVL447:
 3622               	.L226:
 330:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_DEL)) { return false; }
 3623               		.loc 5 330 0
 3624 03fc 21E0      		ldi r18,lo8(1)
 3625 03fe 42E0      		ldi r20,lo8(2)
 3626 0400 69E0      		ldi r22,lo8(9)
 3627               	.LVL448:
 3628 0402 CE01      		movw r24,r28
 3629               	.LVL449:
 3630 0404 0E94 0000 		call raise_layer
 3631               	.LVL450:
 3632 0408 8111      		cpse r24,__zero_reg__
 3633 040a 00C0      		rjmp .L317
 331:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (record->event.pressed)                       { auto_cap = down_punc; } // down_punc persist
 3634               		.loc 5 331 0
 3635 040c 2CE4      		ldi r18,lo8(76)
 3636 040e 30E0      		ldi r19,0
 3637 0410 40E0      		ldi r20,0
 3638 0412 61EE      		ldi r22,lo8(-31)
 3639 0414 70E0      		ldi r23,0
 3640 0416 CE01      		movw r24,r28
 3641 0418 0E94 0000 		call map_shift
 3642               	.LVL451:
 3643 041c 8111      		cpse r24,__zero_reg__
 3644 041e 00C0      		rjmp .L317
 332:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer(record, _EDIT);
 3645               		.loc 5 332 0
 3646 0420 8A81      		ldd r24,Y+2
 3647 0422 8823      		tst r24
 3648 0424 01F0      		breq .L261
 332:keyboards/splitography/keymaps/beaklsi/keymap.c ****     tap_layer(record, _EDIT);
 3649               		.loc 5 332 0 is_stmt 0 discriminator 1
 3650 0426 8091 0000 		lds r24,down_punc
 3651 042a 8093 0000 		sts auto_cap,r24
 3652               	.L261:
 333:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3653               		.loc 5 333 0 is_stmt 1
 3654 042e 68E0      		ldi r22,lo8(8)
 3655 0430 00C0      		rjmp .L323
 3656               	.L262:
 342:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;                           // capslock toggling trap, use shift bspc -> del for au
 3657               		.loc 5 342 0
 3658 0432 8091 0000 		lds r24,key_timer
 3659 0436 9091 0000 		lds r25,key_timer+1
 3660 043a 0E94 0000 		call timer_elapsed
 3661               	.LVL452:
 3662 043e 883C      		cpi r24,-56
 3663 0440 9105      		cpc r25,__zero_reg__
 3664 0442 00F0      		brlo .+2
 3665 0444 00C0      		rjmp .L317
 342:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;                           // capslock toggling trap, use shift bspc -> del for au
 3666               		.loc 5 342 0 is_stmt 0 discriminator 1
 3667 0446 8AE2      		ldi r24,lo8(42)
 3668 0448 90E0      		ldi r25,0
 3669 044a 0E94 0000 		call tap_key
 3670               	.LVL453:
 3671 044e 00C0      		rjmp .L209
 3672               	.LVL454:
 3673               	.L242:
 351:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3674               		.loc 5 351 0 is_stmt 1
 3675 0450 25E3      		ldi r18,lo8(53)
 3676 0452 30E0      		ldi r19,0
 3677 0454 50E0      		ldi r21,0
 3678 0456 40E0      		ldi r20,0
 3679 0458 63EE      		ldi r22,lo8(-29)
 3680 045a 70E0      		ldi r23,0
 3681               	.LVL455:
 3682               	.L326:
 362:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3683               		.loc 5 362 0
 3684 045c CE01      		movw r24,r28
 3685 045e 0E94 0000 		call mt_shift
 3686               	.LVL456:
 3687 0462 00C0      		rjmp .L315
 3688               	.LVL457:
 3689               	.L244:
 354:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3690               		.loc 5 354 0
 3691 0464 2AE0      		ldi r18,lo8(10)
 3692 0466 30E0      		ldi r19,0
 3693 0468 41EE      		ldi r20,lo8(-31)
 3694 046a 50E0      		ldi r21,0
 3695 046c 62EE      		ldi r22,lo8(-30)
 3696 046e 70E0      		ldi r23,0
 3697               	.LVL458:
 3698 0470 00C0      		rjmp .L326
 3699               	.LVL459:
 3700               	.L233:
 361:keyboards/splitography/keymaps/beaklsi/keymap.c ****     mt_shift(record, KC_LSFT, 0, KC_T);
 3701               		.loc 5 361 0
 3702 0472 65EE      		ldi r22,lo8(-27)
 3703 0474 70E0      		ldi r23,0
 3704               	.LVL460:
 3705 0476 CE01      		movw r24,r28
 3706               	.LVL461:
 3707 0478 0E94 0000 		call tap_mods
 3708               	.LVL462:
 362:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3709               		.loc 5 362 0
 3710 047c 27E1      		ldi r18,lo8(23)
 3711 047e 30E0      		ldi r19,0
 3712 0480 00C0      		rjmp .L322
 3713               	.LVL463:
 3714               	.L221:
 369:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3715               		.loc 5 369 0
 3716 0482 23E3      		ldi r18,lo8(51)
 3717 0484 32E0      		ldi r19,lo8(2)
 3718 0486 00C0      		rjmp .L319
 3719               	.L217:
 372:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_GRV))           { return false; }
 3720               		.loc 5 372 0
 3721 0488 8091 0000 		lds r24,tt_keycode
 3722 048c 9091 0000 		lds r25,tt_keycode+1
 3723               	.LVL464:
 3724 0490 892B      		or r24,r25
 3725 0492 01F4      		brne .L263
 3726               	.LVL465:
 3727               	.L264:
 373:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3728               		.loc 5 373 0
 3729 0494 25E3      		ldi r18,lo8(53)
 3730 0496 30E0      		ldi r19,0
 3731 0498 00C0      		rjmp .L319
 3732               	.LVL466:
 3733               	.L263:
 372:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_GRV))           { return false; }
 3734               		.loc 5 372 0 discriminator 1
 3735 049a 2EE1      		ldi r18,lo8(30)
 3736 049c 30E0      		ldi r19,0
 3737 049e 41E0      		ldi r20,lo8(1)
 3738 04a0 65EE      		ldi r22,lo8(-27)
 3739 04a2 70E0      		ldi r23,0
 3740               	.LVL467:
 3741 04a4 CE01      		movw r24,r28
 3742 04a6 0E94 0000 		call map_shift
 3743               	.LVL468:
 3744 04aa 8823      		tst r24
 3745 04ac 01F0      		breq .L264
 3746 04ae 00C0      		rjmp .L317
 3747               	.LVL469:
 3748               	.L218:
 376:keyboards/splitography/keymaps/beaklsi/keymap.c ****     if (map_shift(record, KC_LSFT, SHIFT, KC_SLSH)) { return false; }
 3749               		.loc 5 376 0
 3750 04b0 28E3      		ldi r18,lo8(56)
 3751 04b2 30E0      		ldi r19,0
 3752 04b4 41E0      		ldi r20,lo8(1)
 3753 04b6 65EE      		ldi r22,lo8(-27)
 3754 04b8 70E0      		ldi r23,0
 3755               	.LVL470:
 3756 04ba CE01      		movw r24,r28
 3757               	.LVL471:
 3758 04bc 0E94 0000 		call map_shift
 3759               	.LVL472:
 3760 04c0 8111      		cpse r24,__zero_reg__
 3761 04c2 00C0      		rjmp .L317
 377:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3762               		.loc 5 377 0
 3763 04c4 28E3      		ldi r18,lo8(56)
 3764 04c6 30E0      		ldi r19,0
 3765 04c8 41E0      		ldi r20,lo8(1)
 3766 04ca 61EE      		ldi r22,lo8(-31)
 3767 04cc 70E0      		ldi r23,0
 3768 04ce 00C0      		rjmp .L316
 3769               	.LVL473:
 3770               	.L228:
 383:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_EXLM:
 3771               		.loc 5 383 0
 3772 04d0 85EE      		ldi r24,lo8(-27)
 3773 04d2 90E0      		ldi r25,0
 3774               	.LVL474:
 3775 04d4 0E94 0000 		call on_shift
 3776               	.LVL475:
 3777 04d8 8823      		tst r24
 3778 04da 01F0      		breq .L215
 383:keyboards/splitography/keymaps/beaklsi/keymap.c ****   case KC_EXLM:
 3779               		.loc 5 383 0 is_stmt 0 discriminator 1
 3780 04dc 81EE      		ldi r24,lo8(-31)
 3781 04de 0E94 0000 		call unregister_code
 3782               	.LVL476:
 3783               	.L215:
 386:keyboards/splitography/keymaps/beaklsi/keymap.c ****     break;
 3784               		.loc 5 386 0 is_stmt 1
 3785 04e2 8A81      		ldd r24,Y+2
 3786 04e4 8093 0000 		sts down_punc,r24
 3787 04e8 00C0      		rjmp .L315
 3788               	.LVL477:
 3789               	.L243:
 406:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 3790               		.loc 5 406 0
 3791 04ea CB01      		movw r24,r22
 3792               	.LVL478:
 3793 04ec 0E94 0000 		call steno
 3794               	.LVL479:
 3795 04f0 00C0      		rjmp .L317
 3796               	.LVL480:
 3797               	.L237:
 412:keyboards/splitography/keymaps/beaklsi/keymap.c ****     return false;
 3798               		.loc 5 412 0
 3799 04f2 21E0      		ldi r18,lo8(1)
 3800 04f4 42E0      		ldi r20,lo8(2)
 3801 04f6 00C0      		rjmp .L314
 3802               		.cfi_endproc
 3803               	.LFE159:
 3805               		.section	.text.matrix_init_user,"ax",@progbits
 3806               	.global	matrix_init_user
 3808               	matrix_init_user:
 3809               	.LFB160:
 3810               		.file 6 "/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c"
   1:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c **** 
   2:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c **** // ....................................................................... Audio
   3:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c **** 
   4:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c **** void matrix_init_user(void)
   5:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c **** {
 3811               		.loc 6 5 0
 3812               		.cfi_startproc
 3813               	/* prologue: function */
 3814               	/* frame size = 0 */
 3815               	/* stack size = 0 */
 3816               	.L__stack_usage = 0
   6:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c **** #ifdef STENO_ENABLE
   7:/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/init.c ****   steno_set_mode(STENO_MODE_BOLT);          // or STENO_MODE_GEMINI
 3817               		.loc 6 7 0
 3818 0000 80E0      		ldi r24,0
 3819 0002 0C94 0000 		jmp steno_set_mode
 3820               	.LVL481:
 3821               		.cfi_endproc
 3822               	.LFE160:
 3824               		.section	.progmem.data.__c.5960,"a",@progbits
 3827               	__c.5960:
 3828 0000 3A25 732F 		.string	":%s/arch=(.*)/arch=('any')\n"
 3828      6172 6368 
 3828      3D28 2E2A 
 3828      292F 6172 
 3828      6368 3D28 
 3829               		.section	.progmem.data.__c.5954,"a",@progbits
 3832               	__c.5954:
 3833 0000 7468 6520 		.string	"the keys of enoch"
 3833      6B65 7973 
 3833      206F 6620 
 3833      656E 6F63 
 3833      6800 
 3834               		.section	.bss.dual_down,"aw",@nobits
 3837               	dual_down:
 3838 0000 00        		.zero	1
 3839               		.section	.bss.down_punc,"aw",@nobits
 3842               	down_punc:
 3843 0000 00        		.zero	1
 3844               		.section	.bss.plover,"aw",@nobits
 3847               	plover:
 3848 0000 00        		.zero	1
 3849               		.section	.bss.rightside,"aw",@nobits
 3852               	rightside:
 3853 0000 00        		.zero	1
 3854               		.section	.bss.leftside,"aw",@nobits
 3857               	leftside:
 3858 0000 00        		.zero	1
 3859               		.section	.bss.double_key,"aw",@nobits
 3862               	double_key:
 3863 0000 00        		.zero	1
 3864               		.section	.bss.auto_cap,"aw",@nobits
 3867               	auto_cap:
 3868 0000 00        		.zero	1
 3869               		.section	.bss.dt_shift,"aw",@nobits
 3872               	dt_shift:
 3873 0000 00        		.zero	1
 3874               	.global	tap_dance_actions
 3875               		.section	.data.tap_dance_actions,"aw",@progbits
 3878               	tap_dance_actions:
 3879 0000 0000      		.word	0
 3880 0002 0000      		.word	gs(asterisk)
 3881 0004 0000      		.word	0
 3882 0006 0000 0000 		.zero	11
 3882      0000 0000 
 3882      0000 00
 3883 0011 0000      		.word	0
 3884 0013 0000      		.word	0
 3885 0015 0000      		.word	gs(backspace)
 3886 0017 0000      		.word	gs(backspace_reset)
 3887 0019 0000 0000 		.zero	11
 3887      0000 0000 
 3887      0000 00
 3888 0024 0000      		.word	0
 3889 0026 0000      		.word	0
 3890 0028 0000      		.word	gs(emoji)
 3891 002a 0000      		.word	gs(emoji_reset)
 3892 002c 0000 0000 		.zero	11
 3892      0000 0000 
 3892      0000 00
 3893 0037 0000      		.word	0
 3894 0039 0000      		.word	0
 3895 003b 0000      		.word	gs(comma)
 3896 003d 0000      		.word	0
 3897 003f 0000 0000 		.zero	11
 3897      0000 0000 
 3897      0000 00
 3898 004a 0000      		.word	0
 3899 004c 0000      		.word	0
 3900 004e 0000      		.word	gs(dot)
 3901 0050 0000      		.word	0
 3902 0052 0000 0000 		.zero	11
 3902      0000 0000 
 3902      0000 00
 3903 005d 0000      		.word	0
 3904 005f 0000      		.word	0
 3905 0061 0000      		.word	gs(paste)
 3906 0063 0000      		.word	gs(paste_reset)
 3907 0065 0000 0000 		.zero	11
 3907      0000 0000 
 3907      0000 00
 3908 0070 0000      		.word	0
 3909 0072 0000      		.word	0
 3910 0074 0000      		.word	gs(percent)
 3911 0076 0000      		.word	gs(percent_reset)
 3912 0078 0000 0000 		.zero	11
 3912      0000 0000 
 3912      0000 00
 3913 0083 0000      		.word	0
 3914 0085 0000      		.word	0
 3915 0087 0000      		.word	gs(private)
 3916 0089 0000      		.word	0
 3917 008b 0000 0000 		.zero	11
 3917      0000 0000 
 3917      0000 00
 3918 0096 0000      		.word	0
 3919 0098 0000      		.word	0
 3920 009a 0000      		.word	gs(send)
 3921 009c 0000      		.word	0
 3922 009e 0000 0000 		.zero	11
 3922      0000 0000 
 3922      0000 00
 3923 00a9 0000      		.word	0
 3924 00ab 0000      		.word	0
 3925 00ad 0000      		.word	gs(space)
 3926 00af 0000      		.word	gs(space_reset)
 3927 00b1 0000 0000 		.zero	11
 3927      0000 0000 
 3927      0000 00
 3928 00bc 0000      		.word	0
 3929 00be 0000      		.word	0
 3930 00c0 0000      		.word	gs(tilde)
 3931 00c2 0000      		.word	gs(tilde_reset)
 3932 00c4 0000 0000 		.zero	11
 3932      0000 0000 
 3932      0000 00
 3933 00cf 0000      		.word	0
 3934 00d1 0000      		.word	0
 3935 00d3 0000      		.word	gs(xpaste)
 3936 00d5 0000      		.word	gs(xpaste_reset)
 3937 00d7 0000 0000 		.zero	11
 3937      0000 0000 
 3937      0000 00
 3938 00e2 0000      		.word	0
 3939 00e4 0000      		.word	0
 3940 00e6 0000      		.word	gs(colon)
 3941 00e8 0000      		.word	gs(colon_reset)
 3942 00ea 0000 0000 		.zero	11
 3942      0000 0000 
 3942      0000 00
 3943 00f5 0000      		.word	0
 3944 00f7 0000      		.word	0
 3945 00f9 0000      		.word	gs(lesser)
 3946 00fb 0000      		.word	gs(lesser_reset)
 3947 00fd 0000 0000 		.zero	11
 3947      0000 0000 
 3947      0000 00
 3948 0108 0000      		.word	0
 3949 010a 0000      		.word	0
 3950 010c 0000      		.word	gs(greater)
 3951 010e 0000      		.word	gs(greater_reset)
 3952 0110 0000 0000 		.zero	11
 3952      0000 0000 
 3952      0000 00
 3953 011b 0000      		.word	0
 3954               		.section	.bss.tt_keycode,"aw",@nobits
 3957               	tt_keycode:
 3958 0000 0000      		.zero	2
 3959               		.section	.bss.mods,"aw",@nobits
 3962               	mods:
 3963 0000 00        		.zero	1
 3964               		.section	.bss.key_timer,"aw",@nobits
 3967               	key_timer:
 3968 0000 0000      		.zero	2
 3969               		.section	.bss.i,"aw",@nobits
 3972               	i:
 3973 0000 00        		.zero	1
 3974               	.global	keymaps
 3975               		.section	.progmem.data.keymaps,"a",@progbits
 3978               	keymaps:
 3979 0000 0257      		.word	22274
 3980 0002 1C00      		.word	28
 3981 0004 1200      		.word	18
 3982 0006 1800      		.word	24
 3983 0008 1D00      		.word	29
 3984 000a 0A58      		.word	22538
 3985 000c 0958      		.word	22537
 3986 000e 0A00      		.word	10
 3987 0010 0700      		.word	7
 3988 0012 1100      		.word	17
 3989 0014 1000      		.word	16
 3990 0016 1B00      		.word	27
 3991 0018 1468      		.word	26644
 3992 001a 0B61      		.word	24843
 3993 001c 0864      		.word	25608
 3994 001e 0462      		.word	25092
 3995 0020 0A57      		.word	22282
 3996 0022 0B58      		.word	22539
 3997 0024 0C58      		.word	22540
 3998 0026 0600      		.word	6
 3999 0028 1762      		.word	25111
 4000 002a 1564      		.word	25621
 4001 002c 1661      		.word	24854
 4002 002e 1A68      		.word	26650
 4003 0030 0D00      		.word	13
 4004 0032 2D00      		.word	45
 4005 0034 3400      		.word	52
 4006 0036 0E00      		.word	14
 4007 0038 3600      		.word	54
 4008 003a 0D58      		.word	22541
 4009 003c 0E58      		.word	22542
 4010 003e 0500      		.word	5
 4011 0040 1300      		.word	19
 4012 0042 0F00      		.word	15
 4013 0044 0900      		.word	9
 4014 0046 1900      		.word	25
 4015 0048 0000      		.word	0
 4016 004a 0000      		.word	0
 4017 004c 0000      		.word	0
 4018 004e 0000      		.word	0
 4019 0050 2945      		.word	17705
 4020 0052 DD5C      		.word	23773
 4021 0054 0957      		.word	22281
 4022 0056 0157      		.word	22273
 4023 0058 0000      		.word	0
 4024 005a 0000      		.word	0
 4025 005c 0000      		.word	0
 4026 005e 0000      		.word	0
 4027 0060 3302      		.word	563
 4028 0062 1C02      		.word	540
 4029 0064 1202      		.word	530
 4030 0066 1802      		.word	536
 4031 0068 1D02      		.word	541
 4032 006a 0A58      		.word	22538
 4033 006c 0958      		.word	22537
 4034 006e 0A02      		.word	522
 4035 0070 0702      		.word	519
 4036 0072 1102      		.word	529
 4037 0074 1002      		.word	528
 4038 0076 1B02      		.word	539
 4039 0078 1402      		.word	532
 4040 007a 0B02      		.word	523
 4041 007c 0802      		.word	520
 4042 007e 0402      		.word	516
 4043 0080 3802      		.word	568
 4044 0082 0B58      		.word	22539
 4045 0084 0C58      		.word	22540
 4046 0086 0602      		.word	518
 4047 0088 1702      		.word	535
 4048 008a 1502      		.word	533
 4049 008c 1602      		.word	534
 4050 008e 1A02      		.word	538
 4051 0090 0D02      		.word	525
 4052 0092 2D02      		.word	557
 4053 0094 3402      		.word	564
 4054 0096 0E02      		.word	526
 4055 0098 1E02      		.word	542
 4056 009a 0D58      		.word	22541
 4057 009c 0E58      		.word	22542
 4058 009e 0502      		.word	517
 4059 00a0 1302      		.word	531
 4060 00a2 0F02      		.word	527
 4061 00a4 0902      		.word	521
 4062 00a6 1902      		.word	537
 4063 00a8 0000      		.word	0
 4064 00aa 0000      		.word	0
 4065 00ac 0000      		.word	0
 4066 00ae 0000      		.word	0
 4067 00b0 2900      		.word	41
 4068 00b2 0C02      		.word	524
 4069 00b4 2C00      		.word	44
 4070 00b6 2A00      		.word	42
 4071 00b8 0000      		.word	0
 4072 00ba 0000      		.word	0
 4073 00bc 0000      		.word	0
 4074 00be 0000      		.word	0
 4075 00c0 0C57      		.word	22284
 4076 00c2 3700      		.word	55
 4077 00c4 2502      		.word	549
 4078 00c6 2402      		.word	548
 4079 00c8 0000      		.word	0
 4080 00ca 0100      		.word	1
 4081 00cc 0100      		.word	1
 4082 00ce 0000      		.word	0
 4083 00d0 4A00      		.word	74
 4084 00d2 5200      		.word	82
 4085 00d4 4D00      		.word	77
 4086 00d6 4B00      		.word	75
 4087 00d8 E15C      		.word	23777
 4088 00da 0D57      		.word	22285
 4089 00dc 0657      		.word	22278
 4090 00de 0E57      		.word	22286
 4091 00e0 3802      		.word	568
 4092 00e2 0100      		.word	1
 4093 00e4 0100      		.word	1
 4094 00e6 0000      		.word	0
 4095 00e8 5000      		.word	80
 4096 00ea 5100      		.word	81
 4097 00ec 4F00      		.word	79
 4098 00ee 4E00      		.word	78
 4099 00f0 0000      		.word	0
 4100 00f2 2E02      		.word	558
 4101 00f4 1F02      		.word	543
 4102 00f6 1E02      		.word	542
 4103 00f8 3800      		.word	56
 4104 00fa 0100      		.word	1
 4105 00fc 0100      		.word	1
 4106 00fe 0000      		.word	0
 4107 0100 0000      		.word	0
 4108 0102 0000      		.word	0
 4109 0104 0000      		.word	0
 4110 0106 0000      		.word	0
 4111 0108 0000      		.word	0
 4112 010a 0000      		.word	0
 4113 010c 0000      		.word	0
 4114 010e 0000      		.word	0
 4115 0110 0000      		.word	0
 4116 0112 DF5C      		.word	23775
 4117 0114 0100      		.word	1
 4118 0116 0100      		.word	1
 4119 0118 0000      		.word	0
 4120 011a 0000      		.word	0
 4121 011c 0000      		.word	0
 4122 011e 0000      		.word	0
 4123 0120 0000      		.word	0
 4124 0122 0000      		.word	0
 4125 0124 0000      		.word	0
 4126 0126 0000      		.word	0
 4127 0128 0000      		.word	0
 4128 012a 0100      		.word	1
 4129 012c 0100      		.word	1
 4130 012e 0057      		.word	22272
 4131 0130 2F00      		.word	47
 4132 0132 2302      		.word	547
 4133 0134 3000      		.word	48
 4134 0136 0000      		.word	0
 4135 0138 0000      		.word	0
 4136 013a 0000      		.word	0
 4137 013c 0000      		.word	0
 4138 013e 0000      		.word	0
 4139 0140 0000      		.word	0
 4140 0142 0100      		.word	1
 4141 0144 0100      		.word	1
 4142 0146 3102      		.word	561
 4143 0148 2602      		.word	550
 4144 014a 2102      		.word	545
 4145 014c 2702      		.word	551
 4146 014e 0000      		.word	0
 4147 0150 0000      		.word	0
 4148 0152 0000      		.word	0
 4149 0154 0000      		.word	0
 4150 0156 0000      		.word	0
 4151 0158 0000      		.word	0
 4152 015a 0100      		.word	1
 4153 015c 0100      		.word	1
 4154 015e 3800      		.word	56
 4155 0160 2F02      		.word	559
 4156 0162 2002      		.word	544
 4157 0164 3002      		.word	560
 4158 0166 0000      		.word	0
 4159 0168 0000      		.word	0
 4160 016a 0000      		.word	0
 4161 016c 0000      		.word	0
 4162 016e 0000      		.word	0
 4163 0170 0100      		.word	1
 4164 0172 0100      		.word	1
 4165 0174 DE5C      		.word	23774
 4166 0176 4C00      		.word	76
 4167 0178 0000      		.word	0
 4168 017a 0000      		.word	0
 4169 017c 0000      		.word	0
 4170 017e 0000      		.word	0
 4171 0180 0000      		.word	0
 4172 0182 0000      		.word	0
 4173 0184 0000      		.word	0
 4174 0186 0000      		.word	0
 4175 0188 0000      		.word	0
 4176 018a 0100      		.word	1
 4177 018c 0100      		.word	1
 4178 018e 0000      		.word	0
 4179 0190 FB00      		.word	251
 4180 0192 F000      		.word	240
 4181 0194 FC00      		.word	252
 4182 0196 F900      		.word	249
 4183 0198 0000      		.word	0
 4184 019a F600      		.word	246
 4185 019c F500      		.word	245
 4186 019e F400      		.word	244
 4187 01a0 0000      		.word	0
 4188 01a2 0100      		.word	1
 4189 01a4 0100      		.word	1
 4190 01a6 0000      		.word	0
 4191 01a8 F200      		.word	242
 4192 01aa F100      		.word	241
 4193 01ac F300      		.word	243
 4194 01ae FA00      		.word	250
 4195 01b0 0000      		.word	0
 4196 01b2 0000      		.word	0
 4197 01b4 0000      		.word	0
 4198 01b6 0000      		.word	0
 4199 01b8 0000      		.word	0
 4200 01ba 0100      		.word	1
 4201 01bc 0100      		.word	1
 4202 01be 0000      		.word	0
 4203 01c0 0000      		.word	0
 4204 01c2 0000      		.word	0
 4205 01c4 0000      		.word	0
 4206 01c6 0000      		.word	0
 4207 01c8 0000      		.word	0
 4208 01ca 0000      		.word	0
 4209 01cc 0000      		.word	0
 4210 01ce 0000      		.word	0
 4211 01d0 0100      		.word	1
 4212 01d2 0100      		.word	1
 4213 01d4 0100      		.word	1
 4214 01d6 0100      		.word	1
 4215 01d8 0000      		.word	0
 4216 01da 0000      		.word	0
 4217 01dc 0000      		.word	0
 4218 01de 0000      		.word	0
 4219 01e0 0000      		.word	0
 4220 01e2 0900      		.word	9
 4221 01e4 0865      		.word	25864
 4222 01e6 0700      		.word	7
 4223 01e8 0000      		.word	0
 4224 01ea 0100      		.word	1
 4225 01ec 0100      		.word	1
 4226 01ee 3800      		.word	56
 4227 01f0 2400      		.word	36
 4228 01f2 2500      		.word	37
 4229 01f4 2600      		.word	38
 4230 01f6 2502      		.word	549
 4231 01f8 0855      		.word	21768
 4232 01fa 0661      		.word	24838
 4233 01fc 0564      		.word	25605
 4234 01fe 0462      		.word	25092
 4235 0200 0000      		.word	0
 4236 0202 0100      		.word	1
 4237 0204 0100      		.word	1
 4238 0206 0457      		.word	22276
 4239 0208 2100      		.word	33
 4240 020a 2200      		.word	34
 4241 020c 2300      		.word	35
 4242 020e 2D00      		.word	45
 4243 0210 0000      		.word	0
 4244 0212 1B00      		.word	27
 4245 0214 E25C      		.word	23778
 4246 0216 3100      		.word	49
 4247 0218 0000      		.word	0
 4248 021a 0100      		.word	1
 4249 021c 0100      		.word	1
 4250 021e 0357      		.word	22275
 4251 0220 1E00      		.word	30
 4252 0222 1F00      		.word	31
 4253 0224 2000      		.word	32
 4254 0226 2E02      		.word	558
 4255 0228 0000      		.word	0
 4256 022a 0000      		.word	0
 4257 022c 0000      		.word	0
 4258 022e 0000      		.word	0
 4259 0230 0100      		.word	1
 4260 0232 0100      		.word	1
 4261 0234 2700      		.word	39
 4262 0236 2E00      		.word	46
 4263 0238 0000      		.word	0
 4264 023a 0000      		.word	0
 4265 023c 0000      		.word	0
 4266 023e 0000      		.word	0
 4267 0240 0000      		.word	0
 4268 0242 0000      		.word	0
 4269 0244 0000      		.word	0
 4270 0246 0000      		.word	0
 4271 0248 0000      		.word	0
 4272 024a 0100      		.word	1
 4273 024c 0100      		.word	1
 4274 024e 0000      		.word	0
 4275 0250 4000      		.word	64
 4276 0252 4100      		.word	65
 4277 0254 4200      		.word	66
 4278 0256 4500      		.word	69
 4279 0258 0855      		.word	21768
 4280 025a 0155      		.word	21761
 4281 025c 0455      		.word	21764
 4282 025e 0255      		.word	21762
 4283 0260 0000      		.word	0
 4284 0262 0100      		.word	1
 4285 0264 0100      		.word	1
 4286 0266 0000      		.word	0
 4287 0268 3D00      		.word	61
 4288 026a 3E00      		.word	62
 4289 026c 3F00      		.word	63
 4290 026e 4400      		.word	68
 4291 0270 0000      		.word	0
 4292 0272 0000      		.word	0
 4293 0274 0000      		.word	0
 4294 0276 0000      		.word	0
 4295 0278 0000      		.word	0
 4296 027a 0100      		.word	1
 4297 027c 0100      		.word	1
 4298 027e 0000      		.word	0
 4299 0280 3A00      		.word	58
 4300 0282 3B00      		.word	59
 4301 0284 3C00      		.word	60
 4302 0286 4300      		.word	67
 4303 0288 0000      		.word	0
 4304 028a 0000      		.word	0
 4305 028c 0000      		.word	0
 4306 028e 0000      		.word	0
 4307 0290 0100      		.word	1
 4308 0292 0100      		.word	1
 4309 0294 0000      		.word	0
 4310 0296 0000      		.word	0
 4311 0298 0000      		.word	0
 4312 029a 0000      		.word	0
 4313 029c 0000      		.word	0
 4314 029e 0000      		.word	0
 4315 02a0 015A      		.word	23041
 4316 02a2 025A      		.word	23042
 4317 02a4 035A      		.word	23043
 4318 02a6 045A      		.word	23044
 4319 02a8 055A      		.word	23045
 4320 02aa 065A      		.word	23046
 4321 02ac 235A      		.word	23075
 4322 02ae 245A      		.word	23076
 4323 02b0 255A      		.word	23077
 4324 02b2 265A      		.word	23078
 4325 02b4 275A      		.word	23079
 4326 02b6 285A      		.word	23080
 4327 02b8 DB5C      		.word	23771
 4328 02ba 075A      		.word	23047
 4329 02bc 095A      		.word	23049
 4330 02be 0B5A      		.word	23051
 4331 02c0 0D5A      		.word	23053
 4332 02c2 115A      		.word	23057
 4333 02c4 165A      		.word	23062
 4334 02c6 1A5A      		.word	23066
 4335 02c8 1C5A      		.word	23068
 4336 02ca 1E5A      		.word	23070
 4337 02cc 205A      		.word	23072
 4338 02ce 225A      		.word	23074
 4339 02d0 DC5C      		.word	23772
 4340 02d2 085A      		.word	23048
 4341 02d4 0A5A      		.word	23050
 4342 02d6 0C5A      		.word	23052
 4343 02d8 0E5A      		.word	23054
 4344 02da 125A      		.word	23058
 4345 02dc 175A      		.word	23063
 4346 02de 1B5A      		.word	23067
 4347 02e0 1D5A      		.word	23069
 4348 02e2 1F5A      		.word	23071
 4349 02e4 215A      		.word	23073
 4350 02e6 295A      		.word	23081
 4351 02e8 0000      		.word	0
 4352 02ea 0000      		.word	0
 4353 02ec 0000      		.word	0
 4354 02ee 0000      		.word	0
 4355 02f0 0F5A      		.word	23055
 4356 02f2 105A      		.word	23056
 4357 02f4 185A      		.word	23064
 4358 02f6 195A      		.word	23065
 4359 02f8 0000      		.word	0
 4360 02fa 0000      		.word	0
 4361 02fc 0000      		.word	0
 4362 02fe 0000      		.word	0
 4363 0300 0000      		.word	0
 4364 0302 0000      		.word	0
 4365 0304 0603      		.word	774
 4366 0306 0B57      		.word	22283
 4367 0308 0000      		.word	0
 4368 030a 0000      		.word	0
 4369 030c 0000      		.word	0
 4370 030e 0000      		.word	0
 4371 0310 0000      		.word	0
 4372 0312 0000      		.word	0
 4373 0314 0000      		.word	0
 4374 0316 0000      		.word	0
 4375 0318 1D01      		.word	285
 4376 031a 1B01      		.word	283
 4377 031c 0601      		.word	262
 4378 031e 0557      		.word	22277
 4379 0320 0000      		.word	0
 4380 0322 0000      		.word	0
 4381 0324 0000      		.word	0
 4382 0326 0000      		.word	0
 4383 0328 0757      		.word	22279
 4384 032a 0857      		.word	22280
 4385 032c 0000      		.word	0
 4386 032e 0000      		.word	0
 4387 0330 0000      		.word	0
 4388 0332 0000      		.word	0
 4389 0334 1801      		.word	280
 4390 0336 0701      		.word	263
 4391 0338 0000      		.word	0
 4392 033a 0000      		.word	0
 4393 033c 0000      		.word	0
 4394 033e 0000      		.word	0
 4395 0340 0000      		.word	0
 4396 0342 0000      		.word	0
 4397 0344 0000      		.word	0
 4398 0346 E05C      		.word	23776
 4399 0348 0000      		.word	0
 4400 034a 0000      		.word	0
 4401 034c 0000      		.word	0
 4402 034e 0000      		.word	0
 4403 0350 0000      		.word	0
 4404 0352 0000      		.word	0
 4405 0354 0100      		.word	1
 4406 0356 0100      		.word	1
 4407 0358 0000      		.word	0
 4408 035a 0000      		.word	0
 4409 035c 0000      		.word	0
 4410 035e 0000      		.word	0
 4411 0360 3302      		.word	563
 4412 0362 1C02      		.word	540
 4413 0364 1202      		.word	530
 4414 0366 1802      		.word	536
 4415 0368 1D02      		.word	541
 4416 036a 0100      		.word	1
 4417 036c 0100      		.word	1
 4418 036e 0A02      		.word	522
 4419 0370 0702      		.word	519
 4420 0372 1102      		.word	529
 4421 0374 1002      		.word	528
 4422 0376 1B02      		.word	539
 4423 0378 1402      		.word	532
 4424 037a 0B02      		.word	523
 4425 037c 0802      		.word	520
 4426 037e E35C      		.word	23779
 4427 0380 3700      		.word	55
 4428 0382 0100      		.word	1
 4429 0384 0100      		.word	1
 4430 0386 0602      		.word	518
 4431 0388 E45C      		.word	23780
 4432 038a 1502      		.word	533
 4433 038c 1602      		.word	534
 4434 038e 1A02      		.word	538
 4435 0390 0D02      		.word	525
 4436 0392 2D00      		.word	45
 4437 0394 3400      		.word	52
 4438 0396 0E02      		.word	526
 4439 0398 3600      		.word	54
 4440 039a 0100      		.word	1
 4441 039c 0100      		.word	1
 4442 039e 0502      		.word	517
 4443 03a0 1302      		.word	531
 4444 03a2 0F02      		.word	527
 4445 03a4 0902      		.word	521
 4446 03a6 1902      		.word	537
 4447 03a8 0000      		.word	0
 4448 03aa 0000      		.word	0
 4449 03ac 0000      		.word	0
 4450 03ae 0000      		.word	0
 4451 03b0 E55C      		.word	23781
 4452 03b2 0C02      		.word	524
 4453 03b4 2C4B      		.word	19244
 4454 03b6 2A00      		.word	42
 4455 03b8 0000      		.word	0
 4456 03ba 0000      		.word	0
 4457 03bc 0000      		.word	0
 4458 03be 0000      		.word	0
 4459 03c0 0000      		.word	0
 4460 03c2 0000      		.word	0
 4461 03c4 0000      		.word	0
 4462 03c6 0000      		.word	0
 4463 03c8 0000      		.word	0
 4464 03ca 0100      		.word	1
 4465 03cc 0100      		.word	1
 4466 03ce 0000      		.word	0
 4467 03d0 4000      		.word	64
 4468 03d2 4100      		.word	65
 4469 03d4 4200      		.word	66
 4470 03d6 4500      		.word	69
 4471 03d8 0855      		.word	21768
 4472 03da 0155      		.word	21761
 4473 03dc 0455      		.word	21764
 4474 03de 0255      		.word	21762
 4475 03e0 0000      		.word	0
 4476 03e2 0100      		.word	1
 4477 03e4 0100      		.word	1
 4478 03e6 0000      		.word	0
 4479 03e8 3D00      		.word	61
 4480 03ea 3E00      		.word	62
 4481 03ec 3F00      		.word	63
 4482 03ee 4400      		.word	68
 4483 03f0 0000      		.word	0
 4484 03f2 0000      		.word	0
 4485 03f4 0000      		.word	0
 4486 03f6 0000      		.word	0
 4487 03f8 0000      		.word	0
 4488 03fa 0100      		.word	1
 4489 03fc 0100      		.word	1
 4490 03fe 0000      		.word	0
 4491 0400 3A00      		.word	58
 4492 0402 3B00      		.word	59
 4493 0404 3C00      		.word	60
 4494 0406 4300      		.word	67
 4495 0408 0000      		.word	0
 4496 040a 0000      		.word	0
 4497 040c 0000      		.word	0
 4498 040e 0000      		.word	0
 4499 0410 E55C      		.word	23781
 4500 0412 0000      		.word	0
 4501 0414 0000      		.word	0
 4502 0416 0000      		.word	0
 4503 0418 0000      		.word	0
 4504 041a 0000      		.word	0
 4505 041c 0000      		.word	0
 4506 041e 0000      		.word	0
 4507 0420 0000      		.word	0
 4508 0422 0000      		.word	0
 4509 0424 0000      		.word	0
 4510 0426 0000      		.word	0
 4511 0428 0000      		.word	0
 4512 042a 0100      		.word	1
 4513 042c 0100      		.word	1
 4514 042e 0000      		.word	0
 4515 0430 4A00      		.word	74
 4516 0432 5200      		.word	82
 4517 0434 4D00      		.word	77
 4518 0436 4B00      		.word	75
 4519 0438 0855      		.word	21768
 4520 043a 0155      		.word	21761
 4521 043c 0455      		.word	21764
 4522 043e 0255      		.word	21762
 4523 0440 0000      		.word	0
 4524 0442 0100      		.word	1
 4525 0444 0100      		.word	1
 4526 0446 0000      		.word	0
 4527 0448 5000      		.word	80
 4528 044a 5100      		.word	81
 4529 044c 4F00      		.word	79
 4530 044e 4E00      		.word	78
 4531 0450 0000      		.word	0
 4532 0452 0000      		.word	0
 4533 0454 0000      		.word	0
 4534 0456 0000      		.word	0
 4535 0458 0000      		.word	0
 4536 045a 0100      		.word	1
 4537 045c 0100      		.word	1
 4538 045e 0000      		.word	0
 4539 0460 0000      		.word	0
 4540 0462 0000      		.word	0
 4541 0464 0000      		.word	0
 4542 0466 0000      		.word	0
 4543 0468 0000      		.word	0
 4544 046a 0000      		.word	0
 4545 046c 0000      		.word	0
 4546 046e 0000      		.word	0
 4547 0470 E55C      		.word	23781
 4548 0472 0000      		.word	0
 4549 0474 0000      		.word	0
 4550 0476 0100      		.word	1
 4551 0478 0000      		.word	0
 4552 047a 0000      		.word	0
 4553 047c 0000      		.word	0
 4554 047e 0000      		.word	0
 4555 0480 0000      		.word	0
 4556 0482 0000      		.word	0
 4557 0484 0000      		.word	0
 4558 0486 0000      		.word	0
 4559 0488 0000      		.word	0
 4560 048a 0100      		.word	1
 4561 048c 0100      		.word	1
 4562 048e 0000      		.word	0
 4563 0490 FB00      		.word	251
 4564 0492 F000      		.word	240
 4565 0494 FC00      		.word	252
 4566 0496 F900      		.word	249
 4567 0498 0000      		.word	0
 4568 049a F600      		.word	246
 4569 049c F500      		.word	245
 4570 049e F400      		.word	244
 4571 04a0 0000      		.word	0
 4572 04a2 0100      		.word	1
 4573 04a4 0100      		.word	1
 4574 04a6 0000      		.word	0
 4575 04a8 F200      		.word	242
 4576 04aa F100      		.word	241
 4577 04ac F300      		.word	243
 4578 04ae FA00      		.word	250
 4579 04b0 0000      		.word	0
 4580 04b2 0000      		.word	0
 4581 04b4 0000      		.word	0
 4582 04b6 0000      		.word	0
 4583 04b8 0000      		.word	0
 4584 04ba 0100      		.word	1
 4585 04bc 0100      		.word	1
 4586 04be 0000      		.word	0
 4587 04c0 0000      		.word	0
 4588 04c2 0000      		.word	0
 4589 04c4 0000      		.word	0
 4590 04c6 0000      		.word	0
 4591 04c8 0000      		.word	0
 4592 04ca 0000      		.word	0
 4593 04cc 0000      		.word	0
 4594 04ce 0000      		.word	0
 4595 04d0 E55C      		.word	23781
 4596 04d2 0000      		.word	0
 4597 04d4 0000      		.word	0
 4598 04d6 0000      		.word	0
 4599 04d8 0000      		.word	0
 4600 04da 0000      		.word	0
 4601 04dc 0000      		.word	0
 4602 04de 0000      		.word	0
 4603 04e0 0000      		.word	0
 4604 04e2 0900      		.word	9
 4605 04e4 0865      		.word	25864
 4606 04e6 0700      		.word	7
 4607 04e8 0000      		.word	0
 4608 04ea 0100      		.word	1
 4609 04ec 0100      		.word	1
 4610 04ee 3800      		.word	56
 4611 04f0 2400      		.word	36
 4612 04f2 2500      		.word	37
 4613 04f4 2600      		.word	38
 4614 04f6 2502      		.word	549
 4615 04f8 0855      		.word	21768
 4616 04fa 0661      		.word	24838
 4617 04fc 0564      		.word	25605
 4618 04fe 0462      		.word	25092
 4619 0500 0000      		.word	0
 4620 0502 0100      		.word	1
 4621 0504 0100      		.word	1
 4622 0506 0457      		.word	22276
 4623 0508 2100      		.word	33
 4624 050a 2200      		.word	34
 4625 050c 2300      		.word	35
 4626 050e 2D00      		.word	45
 4627 0510 0000      		.word	0
 4628 0512 1B00      		.word	27
 4629 0514 E25C      		.word	23778
 4630 0516 3100      		.word	49
 4631 0518 0000      		.word	0
 4632 051a 0100      		.word	1
 4633 051c 0100      		.word	1
 4634 051e 0357      		.word	22275
 4635 0520 1E00      		.word	30
 4636 0522 1F00      		.word	31
 4637 0524 2000      		.word	32
 4638 0526 2E02      		.word	558
 4639 0528 0000      		.word	0
 4640 052a 0000      		.word	0
 4641 052c 0000      		.word	0
 4642 052e 0000      		.word	0
 4643 0530 E55C      		.word	23781
 4644 0532 2C00      		.word	44
 4645 0534 2700      		.word	39
 4646 0536 2E00      		.word	46
 4647 0538 0000      		.word	0
 4648 053a 0000      		.word	0
 4649 053c 0000      		.word	0
 4650 053e 0000      		.word	0
 4651 0540 3302      		.word	563
 4652 0542 3700      		.word	55
 4653 0544 2502      		.word	549
 4654 0546 2402      		.word	548
 4655 0548 0000      		.word	0
 4656 054a 0100      		.word	1
 4657 054c 0100      		.word	1
 4658 054e 3500      		.word	53
 4659 0550 2F00      		.word	47
 4660 0552 2302      		.word	547
 4661 0554 3000      		.word	48
 4662 0556 0000      		.word	0
 4663 0558 3502      		.word	565
 4664 055a 3602      		.word	566
 4665 055c 2202      		.word	546
 4666 055e 3702      		.word	567
 4667 0560 3802      		.word	568
 4668 0562 0100      		.word	1
 4669 0564 0100      		.word	1
 4670 0566 3102      		.word	561
 4671 0568 2602      		.word	550
 4672 056a 2102      		.word	545
 4673 056c 2702      		.word	551
 4674 056e 0000      		.word	0
 4675 0570 0000      		.word	0
 4676 0572 2E02      		.word	558
 4677 0574 1F02      		.word	543
 4678 0576 1E02      		.word	542
 4679 0578 3800      		.word	56
 4680 057a 0100      		.word	1
 4681 057c 0100      		.word	1
 4682 057e 3100      		.word	49
 4683 0580 2F02      		.word	559
 4684 0582 2002      		.word	544
 4685 0584 3002      		.word	560
 4686 0586 0000      		.word	0
 4687 0588 0000      		.word	0
 4688 058a 0000      		.word	0
 4689 058c 0000      		.word	0
 4690 058e 0000      		.word	0
 4691 0590 E55C      		.word	23781
 4692 0592 2E00      		.word	46
 4693 0594 2C00      		.word	44
 4694 0596 2A00      		.word	42
 4695 0598 0000      		.word	0
 4696 059a 0000      		.word	0
 4697 059c 0000      		.word	0
 4698 059e 0000      		.word	0
 4699               		.text
 4700               	.Letext0:
 4701               		.file 7 "/usr/avr/include/stdint.h"
 4702               		.file 8 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 4703               		.file 9 "./tmk_core/common/keyboard.h"
 4704               		.file 10 "./tmk_core/common/keycode.h"
 4705               		.file 11 "./tmk_core/common/action_code.h"
 4706               		.file 12 "./tmk_core/common/action.h"
 4707               		.file 13 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 4708               		.file 14 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 4709               		.file 15 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 4710               		.file 16 "./lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 4711               		.file 17 "/usr/avr/include/stdio.h"
 4712               		.file 18 "./tmk_core/common/report.h"
 4713               		.file 19 "./tmk_core/common/host.h"
 4714               		.file 20 "./tmk_core/common/debug.h"
 4715               		.file 21 "./quantum/keycode_config.h"
 4716               		.file 22 "./quantum/quantum_keycodes.h"
 4717               		.file 23 "./quantum/keymap.h"
 4718               		.file 24 "./tmk_core/common/action_layer.h"
 4719               		.file 25 "./tmk_core/common/timer.h"
 4720               		.file 26 "./tmk_core/common/action_util.h"
 4721               		.file 27 "/usr/avr/include/stdlib.h"
 4722               		.file 28 "./quantum/process_keycode/process_steno.h"
 4723               		.file 29 "./quantum/process_keycode/process_tap_dance.h"
 4724               		.file 30 "./quantum/quantum.h"
 4725               		.file 31 "./quantum/keymap_extras/keymap_steno.h"
 4726               		.file 32 "/home/shum/qmk_firmware/keyboards/splitography/keymaps/beaklsi/common/tapdance.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keymap.c
     /tmp/cckTBnVw.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckTBnVw.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckTBnVw.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckTBnVw.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckTBnVw.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckTBnVw.s:13     .text.paste_reset:0000000000000000 paste_reset
     /tmp/cckTBnVw.s:38     .text.private:0000000000000000 private
     /tmp/cckTBnVw.s:3832   .progmem.data.__c.5954:0000000000000000 __c.5954
     /tmp/cckTBnVw.s:84     .text.send:0000000000000000 send
     /tmp/cckTBnVw.s:3827   .progmem.data.__c.5960:0000000000000000 __c.5960
     /tmp/cckTBnVw.s:129    .text.tap_mods:0000000000000000 tap_mods
     /tmp/cckTBnVw.s:3962   .bss.mods:0000000000000000 mods
     /tmp/cckTBnVw.s:175    .text.modifier:0000000000000000 modifier
     /tmp/cckTBnVw.s:262    .text.on_shift:0000000000000000 on_shift
     /tmp/cckTBnVw.s:302    .text.register_shift:0000000000000000 register_shift
     /tmp/cckTBnVw.s:335    .text.unregister_shift:0000000000000000 unregister_shift
     /tmp/cckTBnVw.s:357    .text.colon_reset:0000000000000000 colon_reset
     /tmp/cckTBnVw.s:378    .text.lesser_reset:0000000000000000 lesser_reset
     /tmp/cckTBnVw.s:403    .text.greater_reset:0000000000000000 greater_reset
     /tmp/cckTBnVw.s:428    .text.tilde_reset:0000000000000000 tilde_reset
     /tmp/cckTBnVw.s:468    .text.percent_reset:0000000000000000 percent_reset
     /tmp/cckTBnVw.s:493    .text.xpaste_reset:0000000000000000 xpaste_reset
     /tmp/cckTBnVw.s:518    .text.emoji_reset:0000000000000000 emoji_reset
     /tmp/cckTBnVw.s:534    .text.tap_key:0000000000000000 tap_key
     /tmp/cckTBnVw.s:566    .text.comma:0000000000000000 comma
     /tmp/cckTBnVw.s:616    .text.tap_shift:0000000000000000 tap_shift
     /tmp/cckTBnVw.s:662    .text.tilde:0000000000000000 tilde
     /tmp/cckTBnVw.s:3972   .bss.i:0000000000000000 i
     /tmp/cckTBnVw.s:773    .text.asterisk:0000000000000000 asterisk
     /tmp/cckTBnVw.s:823    .text.dot:0000000000000000 dot
     /tmp/cckTBnVw.s:875    .text.xpaste:0000000000000000 xpaste
     /tmp/cckTBnVw.s:972    .text.double_tap:0000000000000000 double_tap
     /tmp/cckTBnVw.s:1057   .text.colon:0000000000000000 colon
     /tmp/cckTBnVw.s:1153   .text.lesser:0000000000000000 lesser
     /tmp/cckTBnVw.s:1263   .text.greater:0000000000000000 greater
     /tmp/cckTBnVw.s:1370   .text.emoji:0000000000000000 emoji
     /tmp/cckTBnVw.s:1467   .text.percent:0000000000000000 percent
     /tmp/cckTBnVw.s:1535   .text.tap_mod:0000000000000000 tap_mod
     /tmp/cckTBnVw.s:1624   .text.on_tap:0000000000000000 on_tap
     /tmp/cckTBnVw.s:3967   .bss.key_timer:0000000000000000 key_timer
     /tmp/cckTBnVw.s:1688   .text.paste:0000000000000000 paste
     /tmp/cckTBnVw.s:1777   .text.mt_shift:0000000000000000 mt_shift
     /tmp/cckTBnVw.s:1887   .text.map_shift:0000000000000000 map_shift
     /tmp/cckTBnVw.s:1983   .text.double_shift:0000000000000000 double_shift
     /tmp/cckTBnVw.s:3872   .bss.dt_shift:0000000000000000 dt_shift
     /tmp/cckTBnVw.s:2016   .text.cap_lt:0000000000000000 cap_lt
     /tmp/cckTBnVw.s:3867   .bss.auto_cap:0000000000000000 auto_cap
     /tmp/cckTBnVw.s:2180   .text.backspace:0000000000000000 backspace
     /tmp/cckTBnVw.s:2218   .text.space:0000000000000000 space
     /tmp/cckTBnVw.s:2256   .text.tap_reset:0000000000000000 tap_reset
     /tmp/cckTBnVw.s:2304   .text.backspace_reset:0000000000000000 backspace_reset
     /tmp/cckTBnVw.s:2327   .text.space_reset:0000000000000000 space_reset
     /tmp/cckTBnVw.s:2350   .text.clear_layers:0000000000000000 clear_layers
     /tmp/cckTBnVw.s:3957   .bss.tt_keycode:0000000000000000 tt_keycode
     /tmp/cckTBnVw.s:2392   .text.tap_layer:0000000000000000 tap_layer
     /tmp/cckTBnVw.s:2422   .text.lt_shift:0000000000000000 lt_shift
     /tmp/cckTBnVw.s:2504   .text.raise_layer:0000000000000000 raise_layer
     /tmp/cckTBnVw.s:3862   .bss.double_key:0000000000000000 double_key
     /tmp/cckTBnVw.s:2585   .text.rolling_layer:0000000000000000 rolling_layer
     /tmp/cckTBnVw.s:3857   .bss.leftside:0000000000000000 leftside
     /tmp/cckTBnVw.s:3852   .bss.rightside:0000000000000000 rightside
     /tmp/cckTBnVw.s:2716   .text.toggle_plover:0000000000000000 toggle_plover
     /tmp/cckTBnVw.s:3847   .bss.plover:0000000000000000 plover
     /tmp/cckTBnVw.s:2771   .text.base_layer:0000000000000000 base_layer
     /tmp/cckTBnVw.s:2804   .text.tt_escape:0000000000000000 tt_escape
     /tmp/cckTBnVw.s:2891   .text.steno:0000000000000000 steno
     /tmp/cckTBnVw.s:2927   .text.process_record_user:0000000000000000 process_record_user
     /tmp/cckTBnVw.s:3842   .bss.down_punc:0000000000000000 down_punc
     /tmp/cckTBnVw.s:3837   .bss.dual_down:0000000000000000 dual_down
     /tmp/cckTBnVw.s:3808   .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/cckTBnVw.s:3878   .data.tap_dance_actions:0000000000000000 tap_dance_actions
     /tmp/cckTBnVw.s:3978   .progmem.data.keymaps:0000000000000000 keymaps

UNDEFINED SYMBOLS
unregister_code
send_string_P
reset_tap_dance
register_code
send_string
timer_elapsed
timer_read
layer_on
set_oneshot_layer
clear_oneshot_layer_state
layer_off
layer_invert
set_single_persistent_default_layer
steno_set_mode
__do_copy_data
__do_clear_bss
