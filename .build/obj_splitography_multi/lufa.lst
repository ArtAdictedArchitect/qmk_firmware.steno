   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB127:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:./tmk_core/protocol/lufa/lufa.c **** 
  58:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:./tmk_core/protocol/lufa/lufa.c **** 
  61:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:./tmk_core/protocol/lufa/lufa.c **** #endif
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** 
  65:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:./tmk_core/protocol/lufa/lufa.c **** #endif
  68:./tmk_core/protocol/lufa/lufa.c **** 
  69:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:./tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  71:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  72:./tmk_core/protocol/lufa/lufa.c ****   #else
  73:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  74:./tmk_core/protocol/lufa/lufa.c ****   #endif
  75:./tmk_core/protocol/lufa/lufa.c **** #endif
  76:./tmk_core/protocol/lufa/lufa.c **** 
  77:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  79:./tmk_core/protocol/lufa/lufa.c **** #endif
  80:./tmk_core/protocol/lufa/lufa.c **** 
  81:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  83:./tmk_core/protocol/lufa/lufa.c **** #endif
  84:./tmk_core/protocol/lufa/lufa.c **** 
  85:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:./tmk_core/protocol/lufa/lufa.c ****   #include "sysex_tools.h"
  87:./tmk_core/protocol/lufa/lufa.c **** #endif
  88:./tmk_core/protocol/lufa/lufa.c **** 
  89:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  91:./tmk_core/protocol/lufa/lufa.c **** #endif
  92:./tmk_core/protocol/lufa/lufa.c **** 
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  96:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:./tmk_core/protocol/lufa/lufa.c **** 
 100:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 101:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 102:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device);
 103:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device);
 104:./tmk_core/protocol/lufa/lufa.c **** #endif
 105:./tmk_core/protocol/lufa/lufa.c **** 
 106:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 107:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 108:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 109:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 110:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 111:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 112:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 113:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 114:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 115:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 116:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 117:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 118:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 119:./tmk_core/protocol/lufa/lufa.c ****     usb_send_func,
 120:./tmk_core/protocol/lufa/lufa.c ****     usb_get_midi,
 121:./tmk_core/protocol/lufa/lufa.c ****     midi_usb_init
 122:./tmk_core/protocol/lufa/lufa.c **** #endif
 123:./tmk_core/protocol/lufa/lufa.c **** };
 124:./tmk_core/protocol/lufa/lufa.c **** 
 125:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 126:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 127:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 128:./tmk_core/protocol/lufa/lufa.c **** 
 129:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 130:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 131:./tmk_core/protocol/lufa/lufa.c **** {
 132:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 133:./tmk_core/protocol/lufa/lufa.c ****   {
 134:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 135:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 136:./tmk_core/protocol/lufa/lufa.c ****     {
 137:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 138:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 139:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 140:./tmk_core/protocol/lufa/lufa.c ****     },
 141:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 142:./tmk_core/protocol/lufa/lufa.c ****     {
 143:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 144:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 145:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 146:./tmk_core/protocol/lufa/lufa.c ****     },
 147:./tmk_core/protocol/lufa/lufa.c ****   },
 148:./tmk_core/protocol/lufa/lufa.c **** };
 149:./tmk_core/protocol/lufa/lufa.c **** 
 150:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_START_OR_CONT 0x40
 151:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_1 0x50
 152:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_2 0x60
 153:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_3 0x70
 154:./tmk_core/protocol/lufa/lufa.c **** 
 155:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_1 0x50
 156:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_2 0x20
 157:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_3 0x30
 158:./tmk_core/protocol/lufa/lufa.c **** #endif
 159:./tmk_core/protocol/lufa/lufa.c **** 
 160:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 161:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 162:./tmk_core/protocol/lufa/lufa.c **** {
 163:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 164:./tmk_core/protocol/lufa/lufa.c ****   {
 165:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 166:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 167:./tmk_core/protocol/lufa/lufa.c ****     {
 168:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 169:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 170:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 171:./tmk_core/protocol/lufa/lufa.c ****     },
 172:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 173:./tmk_core/protocol/lufa/lufa.c ****     {
 174:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 175:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 176:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 177:./tmk_core/protocol/lufa/lufa.c ****     },
 178:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 179:./tmk_core/protocol/lufa/lufa.c ****     {
 180:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 181:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 182:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 183:./tmk_core/protocol/lufa/lufa.c ****     },
 184:./tmk_core/protocol/lufa/lufa.c ****   },
 185:./tmk_core/protocol/lufa/lufa.c **** };
 186:./tmk_core/protocol/lufa/lufa.c **** #endif
 187:./tmk_core/protocol/lufa/lufa.c **** 
 188:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 189:./tmk_core/protocol/lufa/lufa.c **** 
 190:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 191:./tmk_core/protocol/lufa/lufa.c **** {
 192:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 193:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 194:./tmk_core/protocol/lufa/lufa.c **** 	{
 195:./tmk_core/protocol/lufa/lufa.c **** 		return;
 196:./tmk_core/protocol/lufa/lufa.c **** 	}
 197:./tmk_core/protocol/lufa/lufa.c **** 
 198:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 199:./tmk_core/protocol/lufa/lufa.c **** 	{
 200:./tmk_core/protocol/lufa/lufa.c **** 		return;
 201:./tmk_core/protocol/lufa/lufa.c **** 	}
 202:./tmk_core/protocol/lufa/lufa.c **** 
 203:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 204:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 205:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 208:./tmk_core/protocol/lufa/lufa.c **** 
 209:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 210:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 211:./tmk_core/protocol/lufa/lufa.c **** 	{
 212:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 213:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 214:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 215:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 216:./tmk_core/protocol/lufa/lufa.c **** 	}
 217:./tmk_core/protocol/lufa/lufa.c **** 
 218:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 219:./tmk_core/protocol/lufa/lufa.c **** }
 220:./tmk_core/protocol/lufa/lufa.c **** 
 221:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 222:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 223:./tmk_core/protocol/lufa/lufa.c **** {
 224:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 225:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 226:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 227:./tmk_core/protocol/lufa/lufa.c **** }
 228:./tmk_core/protocol/lufa/lufa.c **** 
 229:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 230:./tmk_core/protocol/lufa/lufa.c **** {
 231:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 232:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 233:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 234:./tmk_core/protocol/lufa/lufa.c **** 
 235:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 236:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 237:./tmk_core/protocol/lufa/lufa.c **** 	return;
 238:./tmk_core/protocol/lufa/lufa.c **** 
 239:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 240:./tmk_core/protocol/lufa/lufa.c **** 
 241:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 242:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 243:./tmk_core/protocol/lufa/lufa.c **** 	{
 244:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 245:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 246:./tmk_core/protocol/lufa/lufa.c **** 		{
 247:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 248:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 249:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 250:./tmk_core/protocol/lufa/lufa.c **** 		}
 251:./tmk_core/protocol/lufa/lufa.c **** 
 252:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 253:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 254:./tmk_core/protocol/lufa/lufa.c **** 
 255:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 256:./tmk_core/protocol/lufa/lufa.c **** 		{
 257:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 258:./tmk_core/protocol/lufa/lufa.c **** 		}
 259:./tmk_core/protocol/lufa/lufa.c **** 	}
 260:./tmk_core/protocol/lufa/lufa.c **** }
 261:./tmk_core/protocol/lufa/lufa.c **** #endif
 262:./tmk_core/protocol/lufa/lufa.c **** 
 263:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 264:./tmk_core/protocol/lufa/lufa.c ****  * Console
 265:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 266:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 267:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 268:./tmk_core/protocol/lufa/lufa.c **** {
 269:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 270:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 271:./tmk_core/protocol/lufa/lufa.c ****         return;
 272:./tmk_core/protocol/lufa/lufa.c **** 
 273:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 274:./tmk_core/protocol/lufa/lufa.c **** 
 275:./tmk_core/protocol/lufa/lufa.c **** #if 0
 276:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 277:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 278:./tmk_core/protocol/lufa/lufa.c **** 
 279:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 280:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 281:./tmk_core/protocol/lufa/lufa.c ****     {
 282:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 283:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 284:./tmk_core/protocol/lufa/lufa.c ****         {
 285:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 286:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 287:./tmk_core/protocol/lufa/lufa.c **** 
 288:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 289:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 290:./tmk_core/protocol/lufa/lufa.c **** 
 291:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 292:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 293:./tmk_core/protocol/lufa/lufa.c ****         }
 294:./tmk_core/protocol/lufa/lufa.c **** 
 295:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 296:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 297:./tmk_core/protocol/lufa/lufa.c ****     }
 298:./tmk_core/protocol/lufa/lufa.c **** #endif
 299:./tmk_core/protocol/lufa/lufa.c **** 
 300:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 301:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 302:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 303:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 304:./tmk_core/protocol/lufa/lufa.c ****         return;
 305:./tmk_core/protocol/lufa/lufa.c ****     }
 306:./tmk_core/protocol/lufa/lufa.c **** 
 307:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 308:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 309:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 310:./tmk_core/protocol/lufa/lufa.c **** 
 311:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 312:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 313:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 314:./tmk_core/protocol/lufa/lufa.c ****     }
 315:./tmk_core/protocol/lufa/lufa.c **** 
 316:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 317:./tmk_core/protocol/lufa/lufa.c **** }
 318:./tmk_core/protocol/lufa/lufa.c **** #endif
 319:./tmk_core/protocol/lufa/lufa.c **** 
 320:./tmk_core/protocol/lufa/lufa.c **** 
 321:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 322:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 323:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 324:./tmk_core/protocol/lufa/lufa.c **** /*
 325:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 326:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 327:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 328:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 329:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 330:./tmk_core/protocol/lufa/lufa.c **** */
 331:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 332:./tmk_core/protocol/lufa/lufa.c **** {
 333:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 334:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 335:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 336:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 337:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 338:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 339:./tmk_core/protocol/lufa/lufa.c ****     }
 340:./tmk_core/protocol/lufa/lufa.c **** }
 341:./tmk_core/protocol/lufa/lufa.c **** 
 342:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 343:./tmk_core/protocol/lufa/lufa.c **** {
 344:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 345:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 346:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 347:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 348:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 349:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 350:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 351:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 352:./tmk_core/protocol/lufa/lufa.c ****     }
 353:./tmk_core/protocol/lufa/lufa.c **** */
 354:./tmk_core/protocol/lufa/lufa.c **** }
 355:./tmk_core/protocol/lufa/lufa.c **** 
 356:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 357:./tmk_core/protocol/lufa/lufa.c **** {
 358:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 359:./tmk_core/protocol/lufa/lufa.c **** }
 360:./tmk_core/protocol/lufa/lufa.c **** 
 361:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 362:./tmk_core/protocol/lufa/lufa.c **** {
 363:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 364:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 365:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 366:./tmk_core/protocol/lufa/lufa.c **** #endif
 367:./tmk_core/protocol/lufa/lufa.c **** }
 368:./tmk_core/protocol/lufa/lufa.c **** 
 369:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 370:./tmk_core/protocol/lufa/lufa.c **** {
 371:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 372:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 373:./tmk_core/protocol/lufa/lufa.c **** 
 374:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 375:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 376:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 377:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 378:./tmk_core/protocol/lufa/lufa.c **** #endif
 379:./tmk_core/protocol/lufa/lufa.c **** }
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** 
 382:./tmk_core/protocol/lufa/lufa.c **** 
 383:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 384:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 385:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 386:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 387:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 388:./tmk_core/protocol/lufa/lufa.c ****   } \
 389:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 390:./tmk_core/protocol/lufa/lufa.c **** 
 391:./tmk_core/protocol/lufa/lufa.c **** // called every 1ms
 392:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 393:./tmk_core/protocol/lufa/lufa.c **** {
 394:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 395:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 396:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 397:./tmk_core/protocol/lufa/lufa.c **** 
 398:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 399:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 400:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 401:./tmk_core/protocol/lufa/lufa.c **** }
 402:./tmk_core/protocol/lufa/lufa.c **** 
 403:./tmk_core/protocol/lufa/lufa.c **** #endif
 404:./tmk_core/protocol/lufa/lufa.c **** 
 405:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 406:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 407:./tmk_core/protocol/lufa/lufa.c ****  *
 408:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 409:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use singl bank for all endpoints.
 410:./tmk_core/protocol/lufa/lufa.c ****  */
 411:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 412:./tmk_core/protocol/lufa/lufa.c **** {
 413:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 414:./tmk_core/protocol/lufa/lufa.c **** 
 415:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 416:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 417:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 418:./tmk_core/protocol/lufa/lufa.c **** 
 419:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 420:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 421:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 422:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 423:./tmk_core/protocol/lufa/lufa.c **** #endif
 424:./tmk_core/protocol/lufa/lufa.c **** 
 425:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 426:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 427:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 428:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 429:./tmk_core/protocol/lufa/lufa.c **** #endif
 430:./tmk_core/protocol/lufa/lufa.c **** 
 431:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 432:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 433:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 434:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 435:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 436:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 437:./tmk_core/protocol/lufa/lufa.c **** #endif
 438:./tmk_core/protocol/lufa/lufa.c **** 
 439:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 440:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 441:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 442:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 443:./tmk_core/protocol/lufa/lufa.c **** #if 0
 444:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 445:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 446:./tmk_core/protocol/lufa/lufa.c **** #endif
 447:./tmk_core/protocol/lufa/lufa.c **** #endif
 448:./tmk_core/protocol/lufa/lufa.c **** 
 449:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 450:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 451:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 452:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 453:./tmk_core/protocol/lufa/lufa.c **** #endif
 454:./tmk_core/protocol/lufa/lufa.c **** 
 455:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 456:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 457:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 458:./tmk_core/protocol/lufa/lufa.c **** #endif
 459:./tmk_core/protocol/lufa/lufa.c **** 
 460:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 461:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 462:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 463:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 464:./tmk_core/protocol/lufa/lufa.c **** #endif
 465:./tmk_core/protocol/lufa/lufa.c **** }
 466:./tmk_core/protocol/lufa/lufa.c **** 
 467:./tmk_core/protocol/lufa/lufa.c **** /*
 468:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 469:./tmk_core/protocol/lufa/lufa.c **** 
 470:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 471:./tmk_core/protocol/lufa/lufa.c **** 
 472:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 473:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 474:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 475:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 476:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 477:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 478:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 479:./tmk_core/protocol/lufa/lufa.c **** */
 480:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 481:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 482:./tmk_core/protocol/lufa/lufa.c ****  */
 483:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 484:./tmk_core/protocol/lufa/lufa.c **** {
 485:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 486:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 487:./tmk_core/protocol/lufa/lufa.c **** 
 488:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 489:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 490:./tmk_core/protocol/lufa/lufa.c ****     {
 491:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 492:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 493:./tmk_core/protocol/lufa/lufa.c ****             {
 494:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 495:./tmk_core/protocol/lufa/lufa.c **** 
 496:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 497:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 498:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 499:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 500:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 501:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 502:./tmk_core/protocol/lufa/lufa.c ****                     break;
 503:./tmk_core/protocol/lufa/lufa.c ****                 }
 504:./tmk_core/protocol/lufa/lufa.c **** 
 505:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 506:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 507:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 508:./tmk_core/protocol/lufa/lufa.c ****             }
 509:./tmk_core/protocol/lufa/lufa.c **** 
 510:./tmk_core/protocol/lufa/lufa.c ****             break;
 511:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 512:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 513:./tmk_core/protocol/lufa/lufa.c ****             {
 514:./tmk_core/protocol/lufa/lufa.c **** 
 515:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 516:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 517:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 518:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 519:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 520:./tmk_core/protocol/lufa/lufa.c **** #endif
 521:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 522:./tmk_core/protocol/lufa/lufa.c **** 
 523:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 524:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 525:./tmk_core/protocol/lufa/lufa.c ****                           return;
 526:./tmk_core/protocol/lufa/lufa.c ****                     }
 527:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 528:./tmk_core/protocol/lufa/lufa.c **** 
 529:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 530:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 531:./tmk_core/protocol/lufa/lufa.c ****                     break;
 532:./tmk_core/protocol/lufa/lufa.c ****                 }
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****             }
 535:./tmk_core/protocol/lufa/lufa.c **** 
 536:./tmk_core/protocol/lufa/lufa.c ****             break;
 537:./tmk_core/protocol/lufa/lufa.c **** 
 538:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 539:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 540:./tmk_core/protocol/lufa/lufa.c ****             {
 541:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 543:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 544:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 545:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 546:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 547:./tmk_core/protocol/lufa/lufa.c ****                 }
 548:./tmk_core/protocol/lufa/lufa.c ****             }
 549:./tmk_core/protocol/lufa/lufa.c **** 
 550:./tmk_core/protocol/lufa/lufa.c ****             break;
 551:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 552:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 553:./tmk_core/protocol/lufa/lufa.c ****             {
 554:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 555:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 556:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 557:./tmk_core/protocol/lufa/lufa.c **** 
 558:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 559:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 560:./tmk_core/protocol/lufa/lufa.c ****                 }
 561:./tmk_core/protocol/lufa/lufa.c ****             }
 562:./tmk_core/protocol/lufa/lufa.c **** 
 563:./tmk_core/protocol/lufa/lufa.c ****             break;
 564:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 565:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 566:./tmk_core/protocol/lufa/lufa.c ****             {
 567:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 568:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 569:./tmk_core/protocol/lufa/lufa.c **** 
 570:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 571:./tmk_core/protocol/lufa/lufa.c ****             }
 572:./tmk_core/protocol/lufa/lufa.c **** 
 573:./tmk_core/protocol/lufa/lufa.c ****             break;
 574:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 575:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 576:./tmk_core/protocol/lufa/lufa.c ****             {
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 578:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 579:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 580:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 581:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 582:./tmk_core/protocol/lufa/lufa.c ****             }
 583:./tmk_core/protocol/lufa/lufa.c **** 
 584:./tmk_core/protocol/lufa/lufa.c ****             break;
 585:./tmk_core/protocol/lufa/lufa.c ****     }
 586:./tmk_core/protocol/lufa/lufa.c **** 
 587:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 588:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 589:./tmk_core/protocol/lufa/lufa.c **** #endif
 590:./tmk_core/protocol/lufa/lufa.c **** }
 591:./tmk_core/protocol/lufa/lufa.c **** 
 592:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 593:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 594:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 595:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 596:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 596 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 597:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 598:./tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 598 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23               	/* epilogue start */
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE127:
  28               		.section	.text.send_mouse,"ax",@progbits
  30               	send_mouse:
  31               	.LFB129:
 599:./tmk_core/protocol/lufa/lufa.c **** 
 600:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 601:./tmk_core/protocol/lufa/lufa.c **** {
 602:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 603:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 604:./tmk_core/protocol/lufa/lufa.c **** 
 605:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 606:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 607:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 608:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 609:./tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 610:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0xFD);
 611:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x09);
 612:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x01);
 613:./tmk_core/protocol/lufa/lufa.c ****        for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 614:./tmk_core/protocol/lufa/lufa.c ****          bluefruit_serial_send(report->raw[i]);
 615:./tmk_core/protocol/lufa/lufa.c ****        }
 616:./tmk_core/protocol/lufa/lufa.c ****     #else
 617:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 618:./tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 619:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 620:./tmk_core/protocol/lufa/lufa.c ****       }
 621:./tmk_core/protocol/lufa/lufa.c ****     #endif
 622:./tmk_core/protocol/lufa/lufa.c ****   }
 623:./tmk_core/protocol/lufa/lufa.c **** #endif
 624:./tmk_core/protocol/lufa/lufa.c **** 
 625:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 626:./tmk_core/protocol/lufa/lufa.c ****       return;
 627:./tmk_core/protocol/lufa/lufa.c ****     }
 628:./tmk_core/protocol/lufa/lufa.c **** 
 629:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 630:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 631:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 632:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 633:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 634:./tmk_core/protocol/lufa/lufa.c **** 
 635:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 636:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 637:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 638:./tmk_core/protocol/lufa/lufa.c **** 
 639:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 640:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 641:./tmk_core/protocol/lufa/lufa.c ****     }
 642:./tmk_core/protocol/lufa/lufa.c ****     else
 643:./tmk_core/protocol/lufa/lufa.c **** #endif
 644:./tmk_core/protocol/lufa/lufa.c ****     {
 645:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 646:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 647:./tmk_core/protocol/lufa/lufa.c **** 
 648:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 649:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 650:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 651:./tmk_core/protocol/lufa/lufa.c **** 
 652:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 653:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 654:./tmk_core/protocol/lufa/lufa.c ****     }
 655:./tmk_core/protocol/lufa/lufa.c **** 
 656:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 657:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 658:./tmk_core/protocol/lufa/lufa.c **** 
 659:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 660:./tmk_core/protocol/lufa/lufa.c **** }
 661:./tmk_core/protocol/lufa/lufa.c **** 
 662:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 663:./tmk_core/protocol/lufa/lufa.c **** {
  32               		.loc 1 663 0
  33               		.cfi_startproc
  34               	.LVL0:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39               	/* epilogue start */
 664:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 665:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 666:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 667:./tmk_core/protocol/lufa/lufa.c **** 
 668:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 669:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 670:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 671:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 672:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 673:./tmk_core/protocol/lufa/lufa.c ****     #else
 674:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 675:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 676:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 677:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 678:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 679:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 680:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 681:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 682:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 683:./tmk_core/protocol/lufa/lufa.c ****     #endif
 684:./tmk_core/protocol/lufa/lufa.c ****   }
 685:./tmk_core/protocol/lufa/lufa.c **** #endif
 686:./tmk_core/protocol/lufa/lufa.c **** 
 687:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 688:./tmk_core/protocol/lufa/lufa.c ****       return;
 689:./tmk_core/protocol/lufa/lufa.c ****     }
 690:./tmk_core/protocol/lufa/lufa.c **** 
 691:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 692:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 693:./tmk_core/protocol/lufa/lufa.c **** 
 694:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 695:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 696:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 697:./tmk_core/protocol/lufa/lufa.c **** 
 698:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 699:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 700:./tmk_core/protocol/lufa/lufa.c **** 
 701:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 702:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 703:./tmk_core/protocol/lufa/lufa.c **** #endif
 704:./tmk_core/protocol/lufa/lufa.c **** }
  40               		.loc 1 704 0
  41 0000 0895      		ret
  42               		.cfi_endproc
  43               	.LFE129:
  45               		.section	.text.send_consumer,"ax",@progbits
  47               	send_consumer:
  48               	.LFB131:
 705:./tmk_core/protocol/lufa/lufa.c **** 
 706:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 707:./tmk_core/protocol/lufa/lufa.c **** {
 708:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 709:./tmk_core/protocol/lufa/lufa.c **** 
 710:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 711:./tmk_core/protocol/lufa/lufa.c ****         return;
 712:./tmk_core/protocol/lufa/lufa.c **** 
 713:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 714:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 715:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 716:./tmk_core/protocol/lufa/lufa.c ****     };
 717:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 718:./tmk_core/protocol/lufa/lufa.c **** 
 719:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 720:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 721:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 722:./tmk_core/protocol/lufa/lufa.c **** 
 723:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 724:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 725:./tmk_core/protocol/lufa/lufa.c **** }
 726:./tmk_core/protocol/lufa/lufa.c **** 
 727:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 728:./tmk_core/protocol/lufa/lufa.c **** {
  49               		.loc 1 728 0
  50               		.cfi_startproc
  51               	.LVL1:
  52 0000 0F93      		push r16
  53               	.LCFI0:
  54               		.cfi_def_cfa_offset 3
  55               		.cfi_offset 16, -2
  56 0002 1F93      		push r17
  57               	.LCFI1:
  58               		.cfi_def_cfa_offset 4
  59               		.cfi_offset 17, -3
  60 0004 CF93      		push r28
  61               	.LCFI2:
  62               		.cfi_def_cfa_offset 5
  63               		.cfi_offset 28, -4
  64 0006 DF93      		push r29
  65               	.LCFI3:
  66               		.cfi_def_cfa_offset 6
  67               		.cfi_offset 29, -5
  68 0008 00D0      		rcall .
  69 000a 1F92      		push __zero_reg__
  70               	.LCFI4:
  71               		.cfi_def_cfa_offset 9
  72 000c CDB7      		in r28,__SP_L__
  73 000e DEB7      		in r29,__SP_H__
  74               	.LCFI5:
  75               		.cfi_def_cfa_register 28
  76               	/* prologue: function */
  77               	/* frame size = 3 */
  78               	/* stack size = 7 */
  79               	.L__stack_usage = 7
  80 0010 8C01      		movw r16,r24
  81               	.LVL2:
 729:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 730:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  82               		.loc 1 730 0
  83 0012 0E94 0000 		call where_to_send
  84               	.LVL3:
 731:./tmk_core/protocol/lufa/lufa.c **** 
 732:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 733:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 734:./tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 735:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 736:./tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 737:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 738:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 739:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 740:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 741:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 742:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 743:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 744:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 745:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 746:./tmk_core/protocol/lufa/lufa.c ****       #else
 747:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 748:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 749:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 750:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 751:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 752:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 753:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 754:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 755:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 756:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 757:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 758:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 759:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 760:./tmk_core/protocol/lufa/lufa.c ****       #endif
 761:./tmk_core/protocol/lufa/lufa.c ****     }
 762:./tmk_core/protocol/lufa/lufa.c **** #endif
 763:./tmk_core/protocol/lufa/lufa.c **** 
 764:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
  85               		.loc 1 764 0
  86 0016 8230      		cpi r24,lo8(2)
  87 0018 01F0      		breq .L4
  88               		.loc 1 764 0 is_stmt 0 discriminator 1
  89 001a 8430      		cpi r24,lo8(4)
  90 001c 01F4      		brne .L3
  91               	.L4:
 765:./tmk_core/protocol/lufa/lufa.c ****       return;
 766:./tmk_core/protocol/lufa/lufa.c ****     }
 767:./tmk_core/protocol/lufa/lufa.c **** 
 768:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  92               		.loc 1 768 0 is_stmt 1
  93 001e 83E0      		ldi r24,lo8(3)
  94               	.LVL4:
  95 0020 8983      		std Y+1,r24
  96 0022 1B83      		std Y+3,r17
  97 0024 0A83      		std Y+2,r16
  98               	.LVL5:
  99               	.LBB137:
 100               	.LBB138:
 101               		.file 2 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 102               		.loc 2 270 0
 103 0026 82E0      		ldi r24,lo8(2)
 104 0028 8093 E900 		sts 233,r24
 105               	.LVL6:
 106 002c 8FEF      		ldi r24,lo8(-1)
 107               	.LVL7:
 108               	.L6:
 109               	.LBE138:
 110               	.LBE137:
 111               	.LBB139:
 112               	.LBB140:
 271:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 113               		.loc 2 360 0
 114 002e 9091 E800 		lds r25,232
 115 0032 8150      		subi r24,lo8(-(-1))
 116               	.LVL8:
 117               	.LBE140:
 118               	.LBE139:
 769:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 770:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 771:./tmk_core/protocol/lufa/lufa.c ****     };
 772:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 773:./tmk_core/protocol/lufa/lufa.c **** 
 774:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 775:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 119               		.loc 1 775 0
 120 0034 95FD      		sbrc r25,5
 121 0036 00C0      		rjmp .L7
 122               	.LVL9:
 123               	.LBB141:
 124               	.LBB142:
 125               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 126               		.loc 3 276 0
 127 0038 95ED      		ldi r25,lo8(-43)
 128 003a 9A95      	1:	dec r25
 129 003c 01F4      		brne 1b
 130 003e 0000      		nop
 131               	.LVL10:
 132               	.LBE142:
 133               	.LBE141:
 134               		.loc 1 775 0
 135 0040 8111      		cpse r24,__zero_reg__
 136 0042 00C0      		rjmp .L6
 137               	.LVL11:
 138               	.L7:
 139               	.LBB143:
 140               	.LBB144:
 141               		.loc 2 360 0
 142 0044 8091 E800 		lds r24,232
 143               	.LBE144:
 144               	.LBE143:
 776:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 145               		.loc 1 776 0
 146 0048 85FF      		sbrs r24,5
 147 004a 00C0      		rjmp .L3
 777:./tmk_core/protocol/lufa/lufa.c **** 
 778:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 148               		.loc 1 778 0
 149 004c 50E0      		ldi r21,0
 150 004e 40E0      		ldi r20,0
 151 0050 63E0      		ldi r22,lo8(3)
 152 0052 70E0      		ldi r23,0
 153 0054 CE01      		movw r24,r28
 154 0056 0196      		adiw r24,1
 155 0058 0E94 0000 		call Endpoint_Write_Stream_LE
 156               	.LVL12:
 157               	.LBB145:
 158               	.LBB146:
 361:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 159               		.loc 2 456 0
 160 005c 8091 E800 		lds r24,232
 161 0060 8E77      		andi r24,lo8(126)
 162 0062 8093 E800 		sts 232,r24
 163               	.LVL13:
 164               	.L3:
 165               	/* epilogue start */
 166               	.LBE146:
 167               	.LBE145:
 779:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 780:./tmk_core/protocol/lufa/lufa.c **** }
 168               		.loc 1 780 0
 169 0066 0F90      		pop __tmp_reg__
 170 0068 0F90      		pop __tmp_reg__
 171 006a 0F90      		pop __tmp_reg__
 172 006c DF91      		pop r29
 173 006e CF91      		pop r28
 174 0070 1F91      		pop r17
 175 0072 0F91      		pop r16
 176               	.LVL14:
 177 0074 0895      		ret
 178               		.cfi_endproc
 179               	.LFE131:
 181               		.section	.text.send_system,"ax",@progbits
 183               	send_system:
 184               	.LFB130:
 707:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 185               		.loc 1 707 0
 186               		.cfi_startproc
 187               	.LVL15:
 188 0000 CF93      		push r28
 189               	.LCFI6:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 28, -2
 192 0002 DF93      		push r29
 193               	.LCFI7:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 29, -3
 196 0004 00D0      		rcall .
 197 0006 1F92      		push __zero_reg__
 198               	.LCFI8:
 199               		.cfi_def_cfa_offset 7
 200 0008 CDB7      		in r28,__SP_L__
 201 000a DEB7      		in r29,__SP_H__
 202               	.LCFI9:
 203               		.cfi_def_cfa_register 28
 204               	/* prologue: function */
 205               	/* frame size = 3 */
 206               	/* stack size = 5 */
 207               	.L__stack_usage = 5
 208               	.LVL16:
 710:./tmk_core/protocol/lufa/lufa.c ****         return;
 209               		.loc 1 710 0
 210 000c 2091 0000 		lds r18,USB_DeviceState
 211 0010 2430      		cpi r18,lo8(4)
 212 0012 01F4      		brne .L19
 713:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 213               		.loc 1 713 0
 214 0014 22E0      		ldi r18,lo8(2)
 215 0016 2983      		std Y+1,r18
 715:./tmk_core/protocol/lufa/lufa.c ****     };
 216               		.loc 1 715 0
 217 0018 8058      		subi r24,-128
 218 001a 9109      		sbc r25,__zero_reg__
 219               	.LVL17:
 713:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 220               		.loc 1 713 0
 221 001c 9B83      		std Y+3,r25
 222 001e 8A83      		std Y+2,r24
 223               	.LVL18:
 224               	.LBB147:
 225               	.LBB148:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 226               		.loc 2 270 0
 227 0020 2093 E900 		sts 233,r18
 228               	.LVL19:
 229 0024 8FEF      		ldi r24,lo8(-1)
 230               	.LVL20:
 231               	.L21:
 232               	.LBE148:
 233               	.LBE147:
 234               	.LBB149:
 235               	.LBB150:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 236               		.loc 2 360 0
 237 0026 9091 E800 		lds r25,232
 238 002a 8150      		subi r24,lo8(-(-1))
 239               	.LVL21:
 240               	.LBE150:
 241               	.LBE149:
 720:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 242               		.loc 1 720 0
 243 002c 95FD      		sbrc r25,5
 244 002e 00C0      		rjmp .L22
 245               	.LVL22:
 246               	.LBB151:
 247               	.LBB152:
 248               		.loc 3 276 0
 249 0030 95ED      		ldi r25,lo8(-43)
 250 0032 9A95      	1:	dec r25
 251 0034 01F4      		brne 1b
 252 0036 0000      		nop
 253               	.LVL23:
 254               	.LBE152:
 255               	.LBE151:
 720:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 256               		.loc 1 720 0
 257 0038 8111      		cpse r24,__zero_reg__
 258 003a 00C0      		rjmp .L21
 259               	.LVL24:
 260               	.L22:
 261               	.LBB153:
 262               	.LBB154:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 263               		.loc 2 360 0
 264 003c 8091 E800 		lds r24,232
 265               	.LBE154:
 266               	.LBE153:
 721:./tmk_core/protocol/lufa/lufa.c **** 
 267               		.loc 1 721 0
 268 0040 85FF      		sbrs r24,5
 269 0042 00C0      		rjmp .L19
 723:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 270               		.loc 1 723 0
 271 0044 50E0      		ldi r21,0
 272 0046 40E0      		ldi r20,0
 273 0048 63E0      		ldi r22,lo8(3)
 274 004a 70E0      		ldi r23,0
 275 004c CE01      		movw r24,r28
 276 004e 0196      		adiw r24,1
 277 0050 0E94 0000 		call Endpoint_Write_Stream_LE
 278               	.LVL25:
 279               	.LBB155:
 280               	.LBB156:
 281               		.loc 2 456 0
 282 0054 8091 E800 		lds r24,232
 283 0058 8E77      		andi r24,lo8(126)
 284 005a 8093 E800 		sts 232,r24
 285               	.LVL26:
 286               	.L19:
 287               	/* epilogue start */
 288               	.LBE156:
 289               	.LBE155:
 725:./tmk_core/protocol/lufa/lufa.c **** 
 290               		.loc 1 725 0
 291 005e 0F90      		pop __tmp_reg__
 292 0060 0F90      		pop __tmp_reg__
 293 0062 0F90      		pop __tmp_reg__
 294 0064 DF91      		pop r29
 295 0066 CF91      		pop r28
 296 0068 0895      		ret
 297               		.cfi_endproc
 298               	.LFE130:
 300               		.section	.text.send_keyboard,"ax",@progbits
 302               	send_keyboard:
 303               	.LFB128:
 601:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 304               		.loc 1 601 0
 305               		.cfi_startproc
 306               	.LVL27:
 307 0000 CF93      		push r28
 308               	.LCFI10:
 309               		.cfi_def_cfa_offset 3
 310               		.cfi_offset 28, -2
 311 0002 DF93      		push r29
 312               	.LCFI11:
 313               		.cfi_def_cfa_offset 4
 314               		.cfi_offset 29, -3
 315               	/* prologue: function */
 316               	/* frame size = 0 */
 317               	/* stack size = 2 */
 318               	.L__stack_usage = 2
 319 0004 EC01      		movw r28,r24
 320               	.LVL28:
 603:./tmk_core/protocol/lufa/lufa.c **** 
 321               		.loc 1 603 0
 322 0006 0E94 0000 		call where_to_send
 323               	.LVL29:
 625:./tmk_core/protocol/lufa/lufa.c ****       return;
 324               		.loc 1 625 0
 325 000a 8230      		cpi r24,lo8(2)
 326 000c 01F0      		breq .L32
 625:./tmk_core/protocol/lufa/lufa.c ****       return;
 327               		.loc 1 625 0 is_stmt 0 discriminator 1
 328 000e 8430      		cpi r24,lo8(4)
 329 0010 01F4      		brne .L31
 330               	.L32:
 631:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 331               		.loc 1 631 0 is_stmt 1
 332 0012 8091 0000 		lds r24,keyboard_protocol
 333               	.LVL30:
 334 0016 8823      		tst r24
 335 0018 01F0      		breq .L34
 631:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 336               		.loc 1 631 0 is_stmt 0 discriminator 1
 337 001a 8091 0000 		lds r24,keymap_config
 338 001e 87FF      		sbrs r24,7
 339 0020 00C0      		rjmp .L34
 340               	.LVL31:
 341               	.LBB157:
 342               	.LBB158:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 343               		.loc 2 270 0 is_stmt 1
 344 0022 83E0      		ldi r24,lo8(3)
 345 0024 8093 E900 		sts 233,r24
 346               	.LVL32:
 347 0028 8FEF      		ldi r24,lo8(-1)
 348               	.LVL33:
 349               	.L35:
 350               	.LBE158:
 351               	.LBE157:
 352               	.LBB159:
 353               	.LBB160:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 354               		.loc 2 360 0
 355 002a 9091 E800 		lds r25,232
 356 002e 8150      		subi r24,lo8(-(-1))
 357               	.LVL34:
 358               	.LBE160:
 359               	.LBE159:
 636:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 360               		.loc 1 636 0
 361 0030 95FD      		sbrc r25,5
 362 0032 00C0      		rjmp .L36
 363               	.LVL35:
 364               	.LBB161:
 365               	.LBB162:
 366               		.loc 3 276 0
 367 0034 95E1      		ldi r25,lo8(21)
 368 0036 9A95      	1:	dec r25
 369 0038 01F4      		brne 1b
 370 003a 0000      		nop
 371               	.LVL36:
 372               	.LBE162:
 373               	.LBE161:
 636:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 374               		.loc 1 636 0
 375 003c 8111      		cpse r24,__zero_reg__
 376 003e 00C0      		rjmp .L35
 377               	.LVL37:
 378               	.L36:
 379               	.LBB163:
 380               	.LBB164:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 381               		.loc 2 360 0
 382 0040 8091 E800 		lds r24,232
 383               	.LBE164:
 384               	.LBE163:
 640:./tmk_core/protocol/lufa/lufa.c ****     }
 385               		.loc 1 640 0
 386 0044 50E0      		ldi r21,0
 387 0046 40E0      		ldi r20,0
 388 0048 60E2      		ldi r22,lo8(32)
 389 004a 70E0      		ldi r23,0
 637:./tmk_core/protocol/lufa/lufa.c **** 
 390               		.loc 1 637 0
 391 004c 85FD      		sbrc r24,5
 392 004e 00C0      		rjmp .L64
 393               	.LVL38:
 394               	.L31:
 395               	/* epilogue start */
 660:./tmk_core/protocol/lufa/lufa.c **** 
 396               		.loc 1 660 0
 397 0050 DF91      		pop r29
 398 0052 CF91      		pop r28
 399               	.LVL39:
 400 0054 0895      		ret
 401               	.LVL40:
 402               	.L34:
 403               	.LBB165:
 404               	.LBB166:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 405               		.loc 2 270 0
 406 0056 81E0      		ldi r24,lo8(1)
 407 0058 8093 E900 		sts 233,r24
 408               	.LVL41:
 409 005c 8FEF      		ldi r24,lo8(-1)
 410               	.LVL42:
 411               	.L40:
 412               	.LBE166:
 413               	.LBE165:
 414               	.LBB167:
 415               	.LBB168:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 416               		.loc 2 360 0
 417 005e 9091 E800 		lds r25,232
 418 0062 8150      		subi r24,lo8(-(-1))
 419               	.LVL43:
 420               	.LBE168:
 421               	.LBE167:
 649:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 422               		.loc 1 649 0
 423 0064 95FD      		sbrc r25,5
 424 0066 00C0      		rjmp .L41
 425               	.LVL44:
 426               	.LBB169:
 427               	.LBB170:
 428               		.loc 3 276 0
 429 0068 95ED      		ldi r25,lo8(-43)
 430 006a 9A95      	1:	dec r25
 431 006c 01F4      		brne 1b
 432 006e 0000      		nop
 433               	.LVL45:
 434               	.LBE170:
 435               	.LBE169:
 649:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 436               		.loc 1 649 0
 437 0070 8111      		cpse r24,__zero_reg__
 438 0072 00C0      		rjmp .L40
 439               	.LVL46:
 440               	.L41:
 441               	.LBB171:
 442               	.LBB172:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 443               		.loc 2 360 0
 444 0074 8091 E800 		lds r24,232
 445               	.LBE172:
 446               	.LBE171:
 650:./tmk_core/protocol/lufa/lufa.c **** 
 447               		.loc 1 650 0
 448 0078 85FF      		sbrs r24,5
 449 007a 00C0      		rjmp .L31
 653:./tmk_core/protocol/lufa/lufa.c ****     }
 450               		.loc 1 653 0
 451 007c 50E0      		ldi r21,0
 452 007e 40E0      		ldi r20,0
 453 0080 68E0      		ldi r22,lo8(8)
 454 0082 70E0      		ldi r23,0
 455               	.LVL47:
 456               	.L64:
 457 0084 CE01      		movw r24,r28
 458 0086 0E94 0000 		call Endpoint_Write_Stream_LE
 459               	.LVL48:
 460               	.LBB173:
 461               	.LBB174:
 462               		.loc 2 456 0
 463 008a 8091 E800 		lds r24,232
 464 008e 8E77      		andi r24,lo8(126)
 465 0090 8093 E800 		sts 232,r24
 466               	.LBE174:
 467               	.LBE173:
 659:./tmk_core/protocol/lufa/lufa.c **** }
 468               		.loc 1 659 0
 469 0094 80E2      		ldi r24,lo8(32)
 470 0096 FE01      		movw r30,r28
 471 0098 A0E0      		ldi r26,lo8(keyboard_report_sent)
 472 009a B0E0      		ldi r27,hi8(keyboard_report_sent)
 473               		0:
 474 009c 0190      		ld r0,Z+
 475 009e 0D92      		st X+,r0
 476 00a0 8A95      		dec r24
 477 00a2 01F4      		brne 0b
 478 00a4 00C0      		rjmp .L31
 479               		.cfi_endproc
 480               	.LFE128:
 482               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 483               	.global	EVENT_USB_Device_Connect
 485               	EVENT_USB_Device_Connect:
 486               	.LFB120:
 332:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 487               		.loc 1 332 0
 488               		.cfi_startproc
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 0 */
 492               	.L__stack_usage = 0
 335:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 493               		.loc 1 335 0
 494 0000 8091 0000 		lds r24,USB_IsInitialized
 495 0004 8111      		cpse r24,__zero_reg__
 496 0006 00C0      		rjmp .L65
 336:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 497               		.loc 1 336 0
 498 0008 0E94 0000 		call USB_Disable
 499               	.LVL49:
 337:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 500               		.loc 1 337 0
 501 000c 0E94 0000 		call USB_Init
 502               	.LVL50:
 503               	.LBB175:
 504               	.LBB176:
 505               	.LBB177:
 506               		.file 4 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 507               		.loc 4 113 0
 508 0010 8091 E200 		lds r24,226
 509 0014 8460      		ori r24,lo8(4)
 510 0016 8093 E200 		sts 226,r24
 511               	.LVL51:
 512               	.L65:
 513               	/* epilogue start */
 514               	.LBE177:
 515               	.LBE176:
 516               	.LBE175:
 340:./tmk_core/protocol/lufa/lufa.c **** 
 517               		.loc 1 340 0
 518 001a 0895      		ret
 519               		.cfi_endproc
 520               	.LFE120:
 522               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 523               	.global	EVENT_USB_Device_Disconnect
 525               	EVENT_USB_Device_Disconnect:
 526               	.LFB121:
 343:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 527               		.loc 1 343 0
 528               		.cfi_startproc
 529               	/* prologue: function */
 530               	/* frame size = 0 */
 531               	/* stack size = 0 */
 532               	.L__stack_usage = 0
 346:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 533               		.loc 1 346 0
 534 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 535               	/* epilogue start */
 354:./tmk_core/protocol/lufa/lufa.c **** 
 536               		.loc 1 354 0
 537 0004 0895      		ret
 538               		.cfi_endproc
 539               	.LFE121:
 541               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 542               	.global	EVENT_USB_Device_Reset
 544               	EVENT_USB_Device_Reset:
 545               	.LFB141:
 546               		.cfi_startproc
 547               	/* prologue: function */
 548               	/* frame size = 0 */
 549               	/* stack size = 0 */
 550               	.L__stack_usage = 0
 551               	/* epilogue start */
 552 0000 0895      		ret
 553               		.cfi_endproc
 554               	.LFE141:
 556               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 557               	.global	EVENT_USB_Device_Suspend
 559               	EVENT_USB_Device_Suspend:
 560               	.LFB123:
 362:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 561               		.loc 1 362 0
 562               		.cfi_startproc
 563               	/* prologue: function */
 564               	/* frame size = 0 */
 565               	/* stack size = 0 */
 566               	.L__stack_usage = 0
 567               	/* epilogue start */
 367:./tmk_core/protocol/lufa/lufa.c **** 
 568               		.loc 1 367 0
 569 0000 0895      		ret
 570               		.cfi_endproc
 571               	.LFE123:
 573               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 574               	.global	EVENT_USB_Device_WakeUp
 576               	EVENT_USB_Device_WakeUp:
 577               	.LFB124:
 370:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 578               		.loc 1 370 0
 579               		.cfi_startproc
 580               	/* prologue: function */
 581               	/* frame size = 0 */
 582               	/* stack size = 0 */
 583               	.L__stack_usage = 0
 372:./tmk_core/protocol/lufa/lufa.c **** 
 584               		.loc 1 372 0
 585 0000 0C94 0000 		jmp suspend_wakeup_init
 586               	.LVL52:
 587               		.cfi_endproc
 588               	.LFE124:
 590               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 591               	.global	EVENT_USB_Device_ConfigurationChanged
 593               	EVENT_USB_Device_ConfigurationChanged:
 594               	.LFB125:
 412:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 595               		.loc 1 412 0
 596               		.cfi_startproc
 597               	/* prologue: function */
 598               	/* frame size = 0 */
 599               	/* stack size = 0 */
 600               	.L__stack_usage = 0
 601               	.LVL53:
 602               	.LBB178:
 603               	.LBB179:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 604               		.loc 2 210 0
 605 0000 42E0      		ldi r20,lo8(2)
 606 0002 61EC      		ldi r22,lo8(-63)
 607 0004 81E0      		ldi r24,lo8(1)
 608 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 609               	.LVL54:
 610               	.LBE179:
 611               	.LBE178:
 612               	.LBB180:
 613               	.LBB181:
 614 000a 42E0      		ldi r20,lo8(2)
 615 000c 61EC      		ldi r22,lo8(-63)
 616 000e 82E0      		ldi r24,lo8(2)
 617 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 618               	.LVL55:
 619               	.LBE181:
 620               	.LBE180:
 621               	.LBB182:
 622               	.LBB183:
 623 0014 42E2      		ldi r20,lo8(34)
 624 0016 61EC      		ldi r22,lo8(-63)
 625 0018 83E0      		ldi r24,lo8(3)
 626 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 627               	.LVL56:
 628               	.LBE183:
 629               	.LBE182:
 630               	.LBB184:
 631               	.LBB185:
 632 001e 42E0      		ldi r20,lo8(2)
 633 0020 61EC      		ldi r22,lo8(-63)
 634 0022 84E0      		ldi r24,lo8(4)
 635 0024 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 636               	.LVL57:
 637               	.LBE185:
 638               	.LBE184:
 639               	.LBB186:
 640               	.LBB187:
 641 0028 42E1      		ldi r20,lo8(18)
 642 002a 60E8      		ldi r22,lo8(-128)
 643 002c 86E0      		ldi r24,lo8(6)
 644 002e 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 645               	.LVL58:
 646               	.LBE187:
 647               	.LBE186:
 648               	.LBB188:
 649               	.LBB189:
 650 0032 42E1      		ldi r20,lo8(18)
 651 0034 61E8      		ldi r22,lo8(-127)
 652 0036 85E0      		ldi r24,lo8(5)
 653 0038 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 654               	.LVL59:
 655               	.LBE189:
 656               	.LBE188:
 657               		.cfi_endproc
 658               	.LFE125:
 660               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 661               	.global	EVENT_USB_Device_ControlRequest
 663               	EVENT_USB_Device_ControlRequest:
 664               	.LFB126:
 484:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 665               		.loc 1 484 0
 666               		.cfi_startproc
 667               	/* prologue: function */
 668               	/* frame size = 0 */
 669               	/* stack size = 0 */
 670               	.L__stack_usage = 0
 671               	.LVL60:
 489:./tmk_core/protocol/lufa/lufa.c ****     {
 672               		.loc 1 489 0
 673 0000 8091 0000 		lds r24,USB_ControlRequest+1
 674 0004 8330      		cpi r24,lo8(3)
 675 0006 01F4      		brne .+2
 676 0008 00C0      		rjmp .L74
 677 000a 00F4      		brsh .L75
 678 000c 8130      		cpi r24,lo8(1)
 679 000e 01F0      		breq .L76
 680 0010 8230      		cpi r24,lo8(2)
 681 0012 01F4      		brne .+2
 682 0014 00C0      		rjmp .L77
 683               	.LVL61:
 684               	.L73:
 588:./tmk_core/protocol/lufa/lufa.c **** #endif
 685               		.loc 1 588 0
 686 0016 80E0      		ldi r24,lo8(cdc_device)
 687 0018 90E0      		ldi r25,hi8(cdc_device)
 688 001a 0C94 0000 		jmp CDC_Device_ProcessControlRequest
 689               	.LVL62:
 690               	.L75:
 489:./tmk_core/protocol/lufa/lufa.c ****     {
 691               		.loc 1 489 0
 692 001e 8A30      		cpi r24,lo8(10)
 693 0020 01F4      		brne .+2
 694 0022 00C0      		rjmp .L78
 695 0024 8B30      		cpi r24,lo8(11)
 696 0026 01F4      		brne .+2
 697 0028 00C0      		rjmp .L79
 698 002a 8930      		cpi r24,lo8(9)
 699 002c 01F4      		brne .L73
 512:./tmk_core/protocol/lufa/lufa.c ****             {
 700               		.loc 1 512 0
 701 002e 8091 0000 		lds r24,USB_ControlRequest
 702 0032 8132      		cpi r24,lo8(33)
 703 0034 01F4      		brne .L73
 516:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 704               		.loc 1 516 0
 705 0036 8091 0000 		lds r24,USB_ControlRequest+4
 706 003a 9091 0000 		lds r25,USB_ControlRequest+4+1
 707 003e 0097      		sbiw r24,0
 708 0040 01F0      		breq .L83
 709 0042 0297      		sbiw r24,2
 710 0044 01F4      		brne .L73
 711               	.L83:
 712               	.LBB190:
 713               	.LBB191:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 714               		.loc 2 444 0
 715 0046 8091 E800 		lds r24,232
 716 004a 877F      		andi r24,lo8(-9)
 717 004c 8093 E800 		sts 232,r24
 718               	.L84:
 719               	.LBE191:
 720               	.LBE190:
 721               	.LBB192:
 722               	.LBB193:
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 723               		.loc 2 419 0
 724 0050 8091 E800 		lds r24,232
 725               	.LBE193:
 726               	.LBE192:
 523:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 727               		.loc 1 523 0
 728 0054 82FF      		sbrs r24,2
 729 0056 00C0      		rjmp .L86
 730               	.LBB194:
 731               	.LBB195:
 457:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 732               		.loc 2 542 0
 733 0058 8091 F100 		lds r24,241
 734               	.LBE195:
 735               	.LBE194:
 527:./tmk_core/protocol/lufa/lufa.c **** 
 736               		.loc 1 527 0
 737 005c 8093 0000 		sts keyboard_led_stats,r24
 738               	.LBB196:
 739               	.LBB197:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 740               		.loc 2 471 0
 741 0060 8091 E800 		lds r24,232
 742 0064 8B77      		andi r24,lo8(123)
 743               	.L101:
 744               	.LBE197:
 745               	.LBE196:
 746               	.LBB198:
 747               	.LBB199:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 748               		.loc 2 456 0
 749 0066 8093 E800 		sts 232,r24
 750               	.LBE199:
 751               	.LBE198:
 581:./tmk_core/protocol/lufa/lufa.c ****             }
 752               		.loc 1 581 0
 753 006a 0E94 0000 		call Endpoint_ClearStatusStage
 754               	.LVL63:
 755 006e 00C0      		rjmp .L73
 756               	.L76:
 492:./tmk_core/protocol/lufa/lufa.c ****             {
 757               		.loc 1 492 0
 758 0070 8091 0000 		lds r24,USB_ControlRequest
 759 0074 813A      		cpi r24,lo8(-95)
 760 0076 01F4      		brne .L73
 761               	.LBB201:
 762               	.LBB202:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 763               		.loc 2 444 0
 764 0078 8091 E800 		lds r24,232
 765 007c 877F      		andi r24,lo8(-9)
 766 007e 8093 E800 		sts 232,r24
 767               	.LBE202:
 768               	.LBE201:
 497:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 769               		.loc 1 497 0
 770 0082 8091 0000 		lds r24,USB_ControlRequest+4
 771 0086 9091 0000 		lds r25,USB_ControlRequest+4+1
 772 008a 892B      		or r24,r25
 773 008c 01F4      		brne .L100
 501:./tmk_core/protocol/lufa/lufa.c ****                     break;
 774               		.loc 1 501 0
 775 008e 60E2      		ldi r22,lo8(32)
 500:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 776               		.loc 1 500 0
 777 0090 80E0      		ldi r24,lo8(keyboard_report_sent)
 778 0092 90E0      		ldi r25,hi8(keyboard_report_sent)
 779               	.L81:
 780               	.LVL64:
 506:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 781               		.loc 1 506 0
 782 0094 70E0      		ldi r23,0
 783 0096 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 784               	.LVL65:
 785               	.LBB203:
 786               	.LBB204:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 787               		.loc 2 471 0
 788 009a 8091 E800 		lds r24,232
 789 009e 8B77      		andi r24,lo8(123)
 790 00a0 8093 E800 		sts 232,r24
 791 00a4 00C0      		rjmp .L73
 792               	.LVL66:
 793               	.L100:
 794               	.LBE204:
 795               	.LBE203:
 486:./tmk_core/protocol/lufa/lufa.c **** 
 796               		.loc 1 486 0
 797 00a6 60E0      		ldi r22,0
 485:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 798               		.loc 1 485 0
 799 00a8 90E0      		ldi r25,0
 800 00aa 80E0      		ldi r24,0
 801 00ac 00C0      		rjmp .L81
 802               	.L86:
 524:./tmk_core/protocol/lufa/lufa.c ****                           return;
 803               		.loc 1 524 0
 804 00ae 8091 0000 		lds r24,USB_DeviceState
 805 00b2 8111      		cpse r24,__zero_reg__
 806 00b4 00C0      		rjmp .L84
 807               	/* epilogue start */
 590:./tmk_core/protocol/lufa/lufa.c **** 
 808               		.loc 1 590 0
 809 00b6 0895      		ret
 810               	.L74:
 539:./tmk_core/protocol/lufa/lufa.c ****             {
 811               		.loc 1 539 0
 812 00b8 8091 0000 		lds r24,USB_ControlRequest
 813 00bc 813A      		cpi r24,lo8(-95)
 814 00be 01F0      		breq .+2
 815 00c0 00C0      		rjmp .L73
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 816               		.loc 1 541 0
 817 00c2 8091 0000 		lds r24,USB_ControlRequest+4
 818 00c6 9091 0000 		lds r25,USB_ControlRequest+4+1
 819 00ca 892B      		or r24,r25
 820 00cc 01F0      		breq .+2
 821 00ce 00C0      		rjmp .L73
 822               	.LBB205:
 823               	.LBB206:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 824               		.loc 2 444 0
 825 00d0 8091 E800 		lds r24,232
 826 00d4 877F      		andi r24,lo8(-9)
 827 00d6 8093 E800 		sts 232,r24
 828               	.L87:
 829               	.LBE206:
 830               	.LBE205:
 831               	.LBB207:
 832               	.LBB208:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 833               		.loc 2 407 0 discriminator 1
 834 00da 8091 E800 		lds r24,232
 835               	.LBE208:
 836               	.LBE207:
 543:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 837               		.loc 1 543 0 discriminator 1
 838 00de 80FF      		sbrs r24,0
 839 00e0 00C0      		rjmp .L87
 544:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 840               		.loc 1 544 0
 841 00e2 8091 0000 		lds r24,keyboard_protocol
 842               	.LVL67:
 843               	.L102:
 844               	.LBB209:
 845               	.LBB210:
 543:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 846               		.loc 2 554 0
 847 00e6 8093 F100 		sts 241,r24
 848               	.LVL68:
 849               	.LBE210:
 850               	.LBE209:
 851               	.LBB211:
 852               	.LBB200:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 853               		.loc 2 456 0
 854 00ea 8091 E800 		lds r24,232
 855 00ee 8E77      		andi r24,lo8(126)
 856 00f0 00C0      		rjmp .L101
 857               	.L79:
 858               	.LBE200:
 859               	.LBE211:
 552:./tmk_core/protocol/lufa/lufa.c ****             {
 860               		.loc 1 552 0
 861 00f2 8091 0000 		lds r24,USB_ControlRequest
 862 00f6 8132      		cpi r24,lo8(33)
 863 00f8 01F0      		breq .+2
 864 00fa 00C0      		rjmp .L73
 554:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 865               		.loc 1 554 0
 866 00fc 8091 0000 		lds r24,USB_ControlRequest+4
 867 0100 9091 0000 		lds r25,USB_ControlRequest+4+1
 868 0104 892B      		or r24,r25
 869 0106 01F0      		breq .+2
 870 0108 00C0      		rjmp .L73
 871               	.LBB212:
 872               	.LBB213:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 873               		.loc 2 444 0
 874 010a 8091 E800 		lds r24,232
 875 010e 877F      		andi r24,lo8(-9)
 876 0110 8093 E800 		sts 232,r24
 877               	.LBE213:
 878               	.LBE212:
 556:./tmk_core/protocol/lufa/lufa.c **** 
 879               		.loc 1 556 0
 880 0114 0E94 0000 		call Endpoint_ClearStatusStage
 881               	.LVL69:
 558:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 882               		.loc 1 558 0
 883 0118 8091 0000 		lds r24,USB_ControlRequest+2
 884 011c 8093 0000 		sts keyboard_protocol,r24
 559:./tmk_core/protocol/lufa/lufa.c ****                 }
 885               		.loc 1 559 0
 886 0120 0E94 0000 		call clear_keyboard
 887               	.LVL70:
 888 0124 00C0      		rjmp .L73
 889               	.L78:
 565:./tmk_core/protocol/lufa/lufa.c ****             {
 890               		.loc 1 565 0
 891 0126 8091 0000 		lds r24,USB_ControlRequest
 892 012a 8132      		cpi r24,lo8(33)
 893 012c 01F0      		breq .+2
 894 012e 00C0      		rjmp .L73
 895               	.LBB214:
 896               	.LBB215:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 897               		.loc 2 444 0
 898 0130 8091 E800 		lds r24,232
 899 0134 877F      		andi r24,lo8(-9)
 900 0136 8093 E800 		sts 232,r24
 901               	.LBE215:
 902               	.LBE214:
 568:./tmk_core/protocol/lufa/lufa.c **** 
 903               		.loc 1 568 0
 904 013a 0E94 0000 		call Endpoint_ClearStatusStage
 905               	.LVL71:
 570:./tmk_core/protocol/lufa/lufa.c ****             }
 906               		.loc 1 570 0
 907 013e 8091 0000 		lds r24,USB_ControlRequest+3
 908 0142 8093 0000 		sts keyboard_idle,r24
 909 0146 00C0      		rjmp .L73
 910               	.L77:
 575:./tmk_core/protocol/lufa/lufa.c ****             {
 911               		.loc 1 575 0
 912 0148 8091 0000 		lds r24,USB_ControlRequest
 913 014c 813A      		cpi r24,lo8(-95)
 914 014e 01F0      		breq .+2
 915 0150 00C0      		rjmp .L73
 916               	.LBB216:
 917               	.LBB217:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 918               		.loc 2 444 0
 919 0152 8091 E800 		lds r24,232
 920 0156 877F      		andi r24,lo8(-9)
 921 0158 8093 E800 		sts 232,r24
 922               	.L88:
 923               	.LBE217:
 924               	.LBE216:
 925               	.LBB218:
 926               	.LBB219:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 927               		.loc 2 407 0 discriminator 1
 928 015c 8091 E800 		lds r24,232
 929               	.LBE219:
 930               	.LBE218:
 578:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 931               		.loc 1 578 0 discriminator 1
 932 0160 80FF      		sbrs r24,0
 933 0162 00C0      		rjmp .L88
 579:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 934               		.loc 1 579 0
 935 0164 8091 0000 		lds r24,keyboard_idle
 936 0168 00C0      		rjmp .L102
 937               		.cfi_endproc
 938               	.LFE126:
 940               		.section	.text.sendchar,"ax",@progbits
 941               	.global	sendchar
 943               	sendchar:
 944               	.LFB132:
 781:./tmk_core/protocol/lufa/lufa.c **** 
 782:./tmk_core/protocol/lufa/lufa.c **** 
 783:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 784:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 785:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 786:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 787:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 788:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 789:./tmk_core/protocol/lufa/lufa.c **** {
 790:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 791:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 792:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 793:./tmk_core/protocol/lufa/lufa.c **** 
 794:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 795:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 796:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 797:./tmk_core/protocol/lufa/lufa.c **** 
 798:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 799:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 800:./tmk_core/protocol/lufa/lufa.c **** 
 801:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 802:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 803:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 804:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 805:./tmk_core/protocol/lufa/lufa.c ****     }
 806:./tmk_core/protocol/lufa/lufa.c **** 
 807:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 808:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 809:./tmk_core/protocol/lufa/lufa.c ****     }
 810:./tmk_core/protocol/lufa/lufa.c **** 
 811:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 812:./tmk_core/protocol/lufa/lufa.c **** 
 813:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 814:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 815:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 816:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 817:./tmk_core/protocol/lufa/lufa.c ****         }
 818:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 819:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 820:./tmk_core/protocol/lufa/lufa.c ****         }
 821:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 822:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 823:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 824:./tmk_core/protocol/lufa/lufa.c ****         }
 825:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 826:./tmk_core/protocol/lufa/lufa.c ****     }
 827:./tmk_core/protocol/lufa/lufa.c **** 
 828:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 829:./tmk_core/protocol/lufa/lufa.c **** 
 830:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 831:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 832:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 833:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 834:./tmk_core/protocol/lufa/lufa.c ****     } else {
 835:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 836:./tmk_core/protocol/lufa/lufa.c ****     }
 837:./tmk_core/protocol/lufa/lufa.c **** 
 838:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 839:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 840:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 841:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 842:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 843:./tmk_core/protocol/lufa/lufa.c **** }
 844:./tmk_core/protocol/lufa/lufa.c **** #else
 845:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 846:./tmk_core/protocol/lufa/lufa.c **** {
 945               		.loc 1 846 0
 946               		.cfi_startproc
 947               	.LVL72:
 948               	/* prologue: function */
 949               	/* frame size = 0 */
 950               	/* stack size = 0 */
 951               	.L__stack_usage = 0
 847:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 848:./tmk_core/protocol/lufa/lufa.c **** }
 952               		.loc 1 848 0
 953 0000 80E0      		ldi r24,0
 954               	.LVL73:
 955               	/* epilogue start */
 956 0002 0895      		ret
 957               		.cfi_endproc
 958               	.LFE132:
 960               		.section	.text.virtser_init,"ax",@progbits
 961               	.global	virtser_init
 963               	virtser_init:
 964               	.LFB133:
 849:./tmk_core/protocol/lufa/lufa.c **** #endif
 850:./tmk_core/protocol/lufa/lufa.c **** 
 851:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 852:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 853:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 854:./tmk_core/protocol/lufa/lufa.c **** 
 855:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 856:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 857:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 858:./tmk_core/protocol/lufa/lufa.c ****   event.Data1 = byte0;
 859:./tmk_core/protocol/lufa/lufa.c ****   event.Data2 = byte1;
 860:./tmk_core/protocol/lufa/lufa.c ****   event.Data3 = byte2;
 861:./tmk_core/protocol/lufa/lufa.c **** 
 862:./tmk_core/protocol/lufa/lufa.c ****   uint8_t cable = 0;
 863:./tmk_core/protocol/lufa/lufa.c **** 
 864:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);
 865:./tmk_core/protocol/lufa/lufa.c **** 
 866:./tmk_core/protocol/lufa/lufa.c ****   //if the length is undefined we assume it is a SYSEX message
 867:./tmk_core/protocol/lufa/lufa.c ****   if (midi_packet_length(byte0) == UNDEFINED) {
 868:./tmk_core/protocol/lufa/lufa.c ****     switch(cnt) {
 869:./tmk_core/protocol/lufa/lufa.c ****       case 3:
 870:./tmk_core/protocol/lufa/lufa.c ****         if (byte2 == SYSEX_END)
 871:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_3);
 872:./tmk_core/protocol/lufa/lufa.c ****         else
 873:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 874:./tmk_core/protocol/lufa/lufa.c ****         break;
 875:./tmk_core/protocol/lufa/lufa.c ****       case 2:
 876:./tmk_core/protocol/lufa/lufa.c ****         if (byte1 == SYSEX_END)
 877:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_2);
 878:./tmk_core/protocol/lufa/lufa.c ****         else
 879:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 880:./tmk_core/protocol/lufa/lufa.c ****         break;
 881:./tmk_core/protocol/lufa/lufa.c ****       case 1:
 882:./tmk_core/protocol/lufa/lufa.c ****         if (byte0 == SYSEX_END)
 883:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_1);
 884:./tmk_core/protocol/lufa/lufa.c ****         else
 885:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 886:./tmk_core/protocol/lufa/lufa.c ****         break;
 887:./tmk_core/protocol/lufa/lufa.c ****       default:
 888:./tmk_core/protocol/lufa/lufa.c ****         return; //invalid cnt
 889:./tmk_core/protocol/lufa/lufa.c ****     }
 890:./tmk_core/protocol/lufa/lufa.c ****   } else {
 891:./tmk_core/protocol/lufa/lufa.c ****     //deal with 'system common' messages
 892:./tmk_core/protocol/lufa/lufa.c ****     //TODO are there any more?
 893:./tmk_core/protocol/lufa/lufa.c ****     switch(byte0 & 0xF0){
 894:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGPOSITION:
 895:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_3);
 896:./tmk_core/protocol/lufa/lufa.c ****         break;
 897:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGSELECT:
 898:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_TC_QUARTERFRAME:
 899:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_2);
 900:./tmk_core/protocol/lufa/lufa.c ****         break;
 901:./tmk_core/protocol/lufa/lufa.c ****       default:
 902:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, byte0);
 903:./tmk_core/protocol/lufa/lufa.c ****         break;
 904:./tmk_core/protocol/lufa/lufa.c ****     }
 905:./tmk_core/protocol/lufa/lufa.c ****   }
 906:./tmk_core/protocol/lufa/lufa.c **** 
 907:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_Write_Stream_LE(&event, sizeof(event), NULL);
 908:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_ClearIN();
 909:./tmk_core/protocol/lufa/lufa.c **** 
 910:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, &event);
 911:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_Flush(&USB_MIDI_Interface);
 912:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 913:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 914:./tmk_core/protocol/lufa/lufa.c **** }
 915:./tmk_core/protocol/lufa/lufa.c **** 
 916:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device) {
 917:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 918:./tmk_core/protocol/lufa/lufa.c ****   while (MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, &event)) {
 919:./tmk_core/protocol/lufa/lufa.c **** 
 920:./tmk_core/protocol/lufa/lufa.c ****     midi_packet_length_t length = midi_packet_length(event.Data1);
 921:./tmk_core/protocol/lufa/lufa.c ****     uint8_t input[3];
 922:./tmk_core/protocol/lufa/lufa.c ****     input[0] = event.Data1;
 923:./tmk_core/protocol/lufa/lufa.c ****     input[1] = event.Data2;
 924:./tmk_core/protocol/lufa/lufa.c ****     input[2] = event.Data3;
 925:./tmk_core/protocol/lufa/lufa.c ****     if (length == UNDEFINED) {
 926:./tmk_core/protocol/lufa/lufa.c ****       //sysex
 927:./tmk_core/protocol/lufa/lufa.c ****       if (event.Event == MIDI_EVENT(0, SYSEX_START_OR_CONT) || event.Event == MIDI_EVENT(0, SYSEX_E
 928:./tmk_core/protocol/lufa/lufa.c ****         length = 3;
 929:./tmk_core/protocol/lufa/lufa.c ****       } else if (event.Event == MIDI_EVENT(0, SYSEX_ENDS_IN_2)) {
 930:./tmk_core/protocol/lufa/lufa.c ****         length = 2;
 931:./tmk_core/protocol/lufa/lufa.c ****       } else if(event.Event ==  MIDI_EVENT(0, SYSEX_ENDS_IN_1)) {
 932:./tmk_core/protocol/lufa/lufa.c ****         length = 1;
 933:./tmk_core/protocol/lufa/lufa.c ****       } else {
 934:./tmk_core/protocol/lufa/lufa.c ****         //XXX what to do?
 935:./tmk_core/protocol/lufa/lufa.c ****       }
 936:./tmk_core/protocol/lufa/lufa.c ****     }
 937:./tmk_core/protocol/lufa/lufa.c **** 
 938:./tmk_core/protocol/lufa/lufa.c ****     //pass the data to the device input function
 939:./tmk_core/protocol/lufa/lufa.c ****     if (length != UNDEFINED)
 940:./tmk_core/protocol/lufa/lufa.c ****       midi_device_input(device, length, input);
 941:./tmk_core/protocol/lufa/lufa.c ****   }
 942:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 943:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 944:./tmk_core/protocol/lufa/lufa.c **** }
 945:./tmk_core/protocol/lufa/lufa.c **** 
 946:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device){
 947:./tmk_core/protocol/lufa/lufa.c ****   midi_device_init(device);
 948:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_send_func(device, usb_send_func);
 949:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_pre_input_process_func(device, usb_get_midi);
 950:./tmk_core/protocol/lufa/lufa.c **** 
 951:./tmk_core/protocol/lufa/lufa.c ****   // SetupHardware();
 952:./tmk_core/protocol/lufa/lufa.c ****   sei();
 953:./tmk_core/protocol/lufa/lufa.c **** }
 954:./tmk_core/protocol/lufa/lufa.c **** 
 955:./tmk_core/protocol/lufa/lufa.c **** void MIDI_Task(void)
 956:./tmk_core/protocol/lufa/lufa.c **** {
 957:./tmk_core/protocol/lufa/lufa.c **** 
 958:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 959:./tmk_core/protocol/lufa/lufa.c ****     dprint("in MIDI_TASK\n");
 960:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 961:./tmk_core/protocol/lufa/lufa.c ****       return;
 962:./tmk_core/protocol/lufa/lufa.c ****     dprint("continuing in MIDI_TASK\n");
 963:./tmk_core/protocol/lufa/lufa.c **** 
 964:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);
 965:./tmk_core/protocol/lufa/lufa.c **** 
 966:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady())
 967:./tmk_core/protocol/lufa/lufa.c ****     {
 968:./tmk_core/protocol/lufa/lufa.c **** 
 969:./tmk_core/protocol/lufa/lufa.c ****         dprint("Endpoint is ready\n");
 970:./tmk_core/protocol/lufa/lufa.c **** 
 971:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDICommand = 0;
 972:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDIPitch;
 973:./tmk_core/protocol/lufa/lufa.c **** 
 974:./tmk_core/protocol/lufa/lufa.c ****         /* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 
 975:./tmk_core/protocol/lufa/lufa.c ****         uint8_t Channel = MIDI_CHANNEL(1);
 976:./tmk_core/protocol/lufa/lufa.c **** 
 977:./tmk_core/protocol/lufa/lufa.c ****         MIDICommand = MIDI_COMMAND_NOTE_ON;
 978:./tmk_core/protocol/lufa/lufa.c ****         MIDIPitch   = 0x3E;
 979:./tmk_core/protocol/lufa/lufa.c **** 
 980:./tmk_core/protocol/lufa/lufa.c ****         /* Check if a MIDI command is to be sent */
 981:./tmk_core/protocol/lufa/lufa.c ****         if (MIDICommand)
 982:./tmk_core/protocol/lufa/lufa.c ****         {
 983:./tmk_core/protocol/lufa/lufa.c ****             dprint("Command exists\n");
 984:./tmk_core/protocol/lufa/lufa.c ****             MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 985:./tmk_core/protocol/lufa/lufa.c ****                 {
 986:./tmk_core/protocol/lufa/lufa.c ****                     .Event       = MIDI_EVENT(0, MIDICommand),
 987:./tmk_core/protocol/lufa/lufa.c **** 
 988:./tmk_core/protocol/lufa/lufa.c ****                     .Data1       = MIDICommand | Channel,
 989:./tmk_core/protocol/lufa/lufa.c ****                     .Data2       = MIDIPitch,
 990:./tmk_core/protocol/lufa/lufa.c ****                     .Data3       = MIDI_STANDARD_VELOCITY,
 991:./tmk_core/protocol/lufa/lufa.c ****                 };
 992:./tmk_core/protocol/lufa/lufa.c **** 
 993:./tmk_core/protocol/lufa/lufa.c ****             /* Write the MIDI event packet to the endpoint */
 994:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 995:./tmk_core/protocol/lufa/lufa.c **** 
 996:./tmk_core/protocol/lufa/lufa.c ****             /* Send the data in the endpoint to the host */
 997:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
 998:./tmk_core/protocol/lufa/lufa.c ****         }
 999:./tmk_core/protocol/lufa/lufa.c ****     }
1000:./tmk_core/protocol/lufa/lufa.c **** 
1001:./tmk_core/protocol/lufa/lufa.c **** 
1002:./tmk_core/protocol/lufa/lufa.c ****     /* Select the MIDI OUT stream */
1003:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);
1004:./tmk_core/protocol/lufa/lufa.c **** 
1005:./tmk_core/protocol/lufa/lufa.c ****     /* Check if a MIDI command has been received */
1006:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
1007:./tmk_core/protocol/lufa/lufa.c ****     {
1008:./tmk_core/protocol/lufa/lufa.c ****         MIDI_EventPacket_t MIDIEvent;
1009:./tmk_core/protocol/lufa/lufa.c **** 
1010:./tmk_core/protocol/lufa/lufa.c ****         /* Read the MIDI event packet from the endpoint */
1011:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
1012:./tmk_core/protocol/lufa/lufa.c **** 
1013:./tmk_core/protocol/lufa/lufa.c ****         /* If the endpoint is now empty, clear the bank */
1014:./tmk_core/protocol/lufa/lufa.c ****         if (!(Endpoint_BytesInEndpoint()))
1015:./tmk_core/protocol/lufa/lufa.c ****         {
1016:./tmk_core/protocol/lufa/lufa.c ****             /* Clear the endpoint ready for new packet */
1017:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearOUT();
1018:./tmk_core/protocol/lufa/lufa.c ****         }
1019:./tmk_core/protocol/lufa/lufa.c ****     }
1020:./tmk_core/protocol/lufa/lufa.c **** }
1021:./tmk_core/protocol/lufa/lufa.c **** 
1022:./tmk_core/protocol/lufa/lufa.c **** #endif
1023:./tmk_core/protocol/lufa/lufa.c **** 
1024:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1025:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
1026:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1027:./tmk_core/protocol/lufa/lufa.c **** 
1028:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1029:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
1030:./tmk_core/protocol/lufa/lufa.c **** {
 965               		.loc 1 1030 0
 966               		.cfi_startproc
 967               	/* prologue: function */
 968               	/* frame size = 0 */
 969               	/* stack size = 0 */
 970               	.L__stack_usage = 0
1031:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 971               		.loc 1 1031 0
 972 0000 82E0      		ldi r24,lo8(2)
 973 0002 90E0      		ldi r25,0
 974 0004 9093 0000 		sts cdc_device+18+1,r25
 975 0008 8093 0000 		sts cdc_device+18,r24
1032:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 976               		.loc 1 1032 0
 977 000c 80E0      		ldi r24,lo8(cdc_device)
 978 000e 90E0      		ldi r25,hi8(cdc_device)
 979 0010 0C94 0000 		jmp CDC_Device_SendControlLineStateChange
 980               	.LVL74:
 981               		.cfi_endproc
 982               	.LFE133:
 984               		.section	.text.virtser_recv,"ax",@progbits
 985               		.weak	virtser_recv
 987               	virtser_recv:
 988               	.LFB134:
1033:./tmk_core/protocol/lufa/lufa.c **** }
1034:./tmk_core/protocol/lufa/lufa.c **** 
1035:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
1036:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
1037:./tmk_core/protocol/lufa/lufa.c **** {
 989               		.loc 1 1037 0
 990               		.cfi_startproc
 991               	.LVL75:
 992               	/* prologue: function */
 993               	/* frame size = 0 */
 994               	/* stack size = 0 */
 995               	.L__stack_usage = 0
 996               	/* epilogue start */
1038:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
1039:./tmk_core/protocol/lufa/lufa.c **** }
 997               		.loc 1 1039 0
 998 0000 0895      		ret
 999               		.cfi_endproc
 1000               	.LFE134:
 1002               		.section	.text.virtser_task,"ax",@progbits
 1003               	.global	virtser_task
 1005               	virtser_task:
 1006               	.LFB135:
1040:./tmk_core/protocol/lufa/lufa.c **** 
1041:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
1042:./tmk_core/protocol/lufa/lufa.c **** {
 1007               		.loc 1 1042 0
 1008               		.cfi_startproc
 1009               	/* prologue: function */
 1010               	/* frame size = 0 */
 1011               	/* stack size = 0 */
 1012               	.L__stack_usage = 0
1043:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 1013               		.loc 1 1043 0
 1014 0000 80E0      		ldi r24,lo8(cdc_device)
 1015 0002 90E0      		ldi r25,hi8(cdc_device)
 1016 0004 0E94 0000 		call CDC_Device_BytesReceived
 1017               	.LVL76:
1044:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
1045:./tmk_core/protocol/lufa/lufa.c ****   if (count)
 1018               		.loc 1 1045 0
 1019 0008 892B      		or r24,r25
 1020 000a 01F0      		breq .L106
1046:./tmk_core/protocol/lufa/lufa.c ****   {
1047:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 1021               		.loc 1 1047 0
 1022 000c 80E0      		ldi r24,lo8(cdc_device)
 1023 000e 90E0      		ldi r25,hi8(cdc_device)
 1024               	.LVL77:
 1025 0010 0E94 0000 		call CDC_Device_ReceiveByte
 1026               	.LVL78:
1048:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 1027               		.loc 1 1048 0
 1028 0014 0C94 0000 		jmp virtser_recv
 1029               	.LVL79:
 1030               	.L106:
 1031               	/* epilogue start */
1049:./tmk_core/protocol/lufa/lufa.c ****   }
1050:./tmk_core/protocol/lufa/lufa.c **** }
 1032               		.loc 1 1050 0
 1033 0018 0895      		ret
 1034               		.cfi_endproc
 1035               	.LFE135:
 1037               		.section	.text.virtser_send,"ax",@progbits
 1038               	.global	virtser_send
 1040               	virtser_send:
 1041               	.LFB136:
1051:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
1052:./tmk_core/protocol/lufa/lufa.c **** {
 1042               		.loc 1 1052 0
 1043               		.cfi_startproc
 1044               	.LVL80:
 1045 0000 CF93      		push r28
 1046               	.LCFI12:
 1047               		.cfi_def_cfa_offset 3
 1048               		.cfi_offset 28, -2
 1049               	/* prologue: function */
 1050               	/* frame size = 0 */
 1051               	/* stack size = 1 */
 1052               	.L__stack_usage = 1
 1053               	.LVL81:
 1054               	.LBB220:
 1055               	.LBB221:
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1056               		.loc 2 253 0
 1057 0002 C091 E900 		lds r28,233
 1058               	.LBB222:
 1059               	.LBB223:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1060               		.loc 2 240 0
 1061 0006 9091 EC00 		lds r25,236
 1062 000a 90FD      		sbrc r25,0
 1063 000c 00C0      		rjmp .L116
 1064 000e 90E0      		ldi r25,0
 1065               	.L109:
 1066               	.LBE223:
 1067               	.LBE222:
 1068               	.LBE221:
 1069               	.LBE220:
1053:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
1054:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
1055:./tmk_core/protocol/lufa/lufa.c **** 
1056:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 1070               		.loc 1 1056 0
 1071 0010 2091 0000 		lds r18,cdc_device+16
 1072 0014 20FF      		sbrs r18,0
 1073 0016 00C0      		rjmp .L108
 1074               	.LBB228:
 1075               	.LBB226:
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1076               		.loc 2 253 0
 1077 0018 CF70      		andi r28,lo8(15)
 1078 001a C92B      		or r28,r25
 1079               	.LVL82:
 1080               	.LBE226:
 1081               	.LBE228:
 1082               	.LBB229:
 1083               	.LBB230:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1084               		.loc 2 270 0
 1085 001c 9091 0000 		lds r25,cdc_device+1
 1086 0020 9F70      		andi r25,lo8(15)
 1087 0022 9093 E900 		sts 233,r25
 1088               	.LVL83:
 1089               	.LBE230:
 1090               	.LBE229:
 1091               	.LBB231:
 1092               	.LBB232:
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1093               		.loc 2 313 0
 1094 0026 9091 EB00 		lds r25,235
 1095               	.LBE232:
 1096               	.LBE231:
1057:./tmk_core/protocol/lufa/lufa.c ****   {
1058:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
1059:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
1060:./tmk_core/protocol/lufa/lufa.c **** 
1061:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 1097               		.loc 1 1061 0
 1098 002a 90FF      		sbrs r25,0
 1099 002c 00C0      		rjmp .L115
 1100               	.LBB233:
 1101               	.LBB234:
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1102               		.loc 2 370 0
 1103 002e 9091 EE00 		lds r25,238
 1104               	.LBE234:
 1105               	.LBE233:
 1106               		.loc 1 1061 0
 1107 0032 97FD      		sbrc r25,7
 1108 0034 00C0      		rjmp .L117
 1109               	.LVL84:
 1110               	.L115:
 1111               	.LBB235:
 1112               	.LBB236:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1113               		.loc 2 270 0
 1114 0036 CF70      		andi r28,lo8(15)
 1115 0038 C093 E900 		sts 233,r28
 1116               	.L108:
 1117               	/* epilogue start */
 1118               	.LBE236:
 1119               	.LBE235:
1062:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
1063:./tmk_core/protocol/lufa/lufa.c ****         return;
1064:./tmk_core/protocol/lufa/lufa.c ****     }
1065:./tmk_core/protocol/lufa/lufa.c **** 
1066:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
1067:./tmk_core/protocol/lufa/lufa.c **** 
1068:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
1069:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
1072:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
1073:./tmk_core/protocol/lufa/lufa.c ****     }
1074:./tmk_core/protocol/lufa/lufa.c **** 
1075:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
1076:./tmk_core/protocol/lufa/lufa.c ****   }
1077:./tmk_core/protocol/lufa/lufa.c **** }
 1120               		.loc 1 1077 0
 1121 003c CF91      		pop r28
 1122 003e 0895      		ret
 1123               	.LVL85:
 1124               	.L116:
 1125               	.LBB237:
 1126               	.LBB227:
 1127               	.LBB225:
 1128               	.LBB224:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1129               		.loc 2 240 0
 1130 0040 90E8      		ldi r25,lo8(-128)
 1131 0042 00C0      		rjmp .L109
 1132               	.L117:
 1133               	.LBE224:
 1134               	.LBE225:
 1135               	.LBE227:
 1136               	.LBE237:
 1137 0044 9FEF      		ldi r25,lo8(-1)
 1138               	.LVL86:
 1139               	.L112:
 1140               	.LBB238:
 1141               	.LBB239:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1142               		.loc 2 360 0
 1143 0046 2091 E800 		lds r18,232
 1144 004a 9150      		subi r25,lo8(-(-1))
 1145               	.LVL87:
 1146               	.LBE239:
 1147               	.LBE238:
1066:./tmk_core/protocol/lufa/lufa.c **** 
 1148               		.loc 1 1066 0
 1149 004c 25FD      		sbrc r18,5
 1150 004e 00C0      		rjmp .L113
 1151               	.LVL88:
 1152               	.LBB240:
 1153               	.LBB241:
 1154               		.loc 3 276 0
 1155 0050 25ED      		ldi r18,lo8(-43)
 1156 0052 2A95      	1:	dec r18
 1157 0054 01F4      		brne 1b
 1158 0056 0000      		nop
 1159               	.LVL89:
 1160               	.LBE241:
 1161               	.LBE240:
1066:./tmk_core/protocol/lufa/lufa.c **** 
 1162               		.loc 1 1066 0
 1163 0058 9111      		cpse r25,__zero_reg__
 1164 005a 00C0      		rjmp .L112
 1165               	.LVL90:
 1166               	.L113:
 1167               	.LBB242:
 1168               	.LBB243:
 1169               		.loc 2 554 0
 1170 005c 8093 F100 		sts 241,r24
 1171               	.LVL91:
 1172               	.LBE243:
 1173               	.LBE242:
1069:./tmk_core/protocol/lufa/lufa.c **** 
 1174               		.loc 1 1069 0
 1175 0060 80E0      		ldi r24,lo8(cdc_device)
 1176 0062 90E0      		ldi r25,hi8(cdc_device)
 1177               	.LVL92:
 1178 0064 0E94 0000 		call CDC_Device_Flush
 1179               	.LVL93:
 1180               	.LBB244:
 1181               	.LBB245:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1182               		.loc 2 407 0
 1183 0068 8091 E800 		lds r24,232
 1184               	.LBE245:
 1185               	.LBE244:
1071:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 1186               		.loc 1 1071 0
 1187 006c 80FF      		sbrs r24,0
 1188 006e 00C0      		rjmp .L115
 1189               	.LBB246:
 1190               	.LBB247:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1191               		.loc 2 456 0
 1192 0070 8091 E800 		lds r24,232
 1193 0074 8E77      		andi r24,lo8(126)
 1194 0076 8093 E800 		sts 232,r24
 1195 007a 00C0      		rjmp .L115
 1196               	.LBE247:
 1197               	.LBE246:
 1198               		.cfi_endproc
 1199               	.LFE136:
 1201               		.section	.text.startup.main,"ax",@progbits
 1202               		.weak	main
 1204               	main:
 1205               	.LFB139:
1078:./tmk_core/protocol/lufa/lufa.c **** #endif
1079:./tmk_core/protocol/lufa/lufa.c **** 
1080:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1081:./tmk_core/protocol/lufa/lufa.c ****  * main
1082:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1083:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
1084:./tmk_core/protocol/lufa/lufa.c **** {
1085:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
1086:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
1087:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
1088:./tmk_core/protocol/lufa/lufa.c **** 
1089:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
1090:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
1091:./tmk_core/protocol/lufa/lufa.c **** 
1092:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
1093:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
1094:./tmk_core/protocol/lufa/lufa.c **** }
1095:./tmk_core/protocol/lufa/lufa.c **** 
1096:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1097:./tmk_core/protocol/lufa/lufa.c **** {
1098:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1099:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1100:./tmk_core/protocol/lufa/lufa.c **** 
1101:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1102:./tmk_core/protocol/lufa/lufa.c **** 
1103:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1104:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1105:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1106:./tmk_core/protocol/lufa/lufa.c **** }
1107:./tmk_core/protocol/lufa/lufa.c **** 
1108:./tmk_core/protocol/lufa/lufa.c **** 
1109:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1110:./tmk_core/protocol/lufa/lufa.c **** void fallthrough_callback(MidiDevice * device,
1111:./tmk_core/protocol/lufa/lufa.c ****     uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
1112:./tmk_core/protocol/lufa/lufa.c **** void cc_callback(MidiDevice * device,
1113:./tmk_core/protocol/lufa/lufa.c ****     uint8_t chan, uint8_t num, uint8_t val);
1114:./tmk_core/protocol/lufa/lufa.c **** void sysex_callback(MidiDevice * device,
1115:./tmk_core/protocol/lufa/lufa.c ****     uint16_t start, uint8_t length, uint8_t * data);
1116:./tmk_core/protocol/lufa/lufa.c **** 
1117:./tmk_core/protocol/lufa/lufa.c **** void setup_midi(void)
1118:./tmk_core/protocol/lufa/lufa.c **** {
1119:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ADVANCED
1120:./tmk_core/protocol/lufa/lufa.c **** 	midi_init();
1121:./tmk_core/protocol/lufa/lufa.c **** #endif
1122:./tmk_core/protocol/lufa/lufa.c **** 	midi_device_init(&midi_device);
1123:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_send_func(&midi_device, usb_send_func);
1124:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
1125:./tmk_core/protocol/lufa/lufa.c **** }
1126:./tmk_core/protocol/lufa/lufa.c **** #endif
1127:./tmk_core/protocol/lufa/lufa.c **** 
1128:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1129:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1130:./tmk_core/protocol/lufa/lufa.c **** {
 1206               		.loc 1 1130 0
 1207               		.cfi_startproc
 1208               	/* prologue: function */
 1209               	/* frame size = 0 */
 1210               	/* stack size = 0 */
 1211               	.L__stack_usage = 0
 1212               	.LBB257:
 1213               	.LBB258:
1086:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1214               		.loc 1 1086 0
 1215 0000 84B7      		in r24,0x34
 1216 0002 877F      		andi r24,lo8(-9)
 1217 0004 84BF      		out 0x34,r24
 1218               	.LBB259:
 1219               	.LBB260:
 1220               		.file 5 "/usr/avr/include/avr/wdt.h"
   1:/usr/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/avr/include/avr/wdt.h **** 
   5:/usr/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/avr/wdt.h **** 
   8:/usr/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/avr/wdt.h **** 
  11:/usr/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/wdt.h ****      distribution.
  15:/usr/avr/include/avr/wdt.h **** 
  16:/usr/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/avr/wdt.h **** 
  20:/usr/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/avr/wdt.h **** 
  32:/usr/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/avr/include/avr/wdt.h **** 
  34:/usr/avr/include/avr/wdt.h **** /*
  35:/usr/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/avr/include/avr/wdt.h ****  */
  37:/usr/avr/include/avr/wdt.h **** 
  38:/usr/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/avr/include/avr/wdt.h **** 
  41:/usr/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/avr/include/avr/wdt.h **** 
  44:/usr/avr/include/avr/wdt.h **** /** \file */
  45:/usr/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/avr/include/avr/wdt.h **** 
  48:/usr/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/avr/include/avr/wdt.h **** 
  57:/usr/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/avr/include/avr/wdt.h **** 
  61:/usr/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/avr/include/avr/wdt.h ****     the following:
  68:/usr/avr/include/avr/wdt.h **** 
  69:/usr/avr/include/avr/wdt.h ****     \code
  70:/usr/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/avr/include/avr/wdt.h **** 
  73:/usr/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/avr/include/avr/wdt.h **** 
  75:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/avr/include/avr/wdt.h ****     {
  80:/usr/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/avr/include/avr/wdt.h ****     }
  84:/usr/avr/include/avr/wdt.h ****     \endcode
  85:/usr/avr/include/avr/wdt.h **** 
  86:/usr/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/avr/include/avr/wdt.h **** */
  91:/usr/avr/include/avr/wdt.h **** 
  92:/usr/avr/include/avr/wdt.h **** /**
  93:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/avr/include/avr/wdt.h **** */
  98:/usr/avr/include/avr/wdt.h **** 
  99:/usr/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/avr/include/avr/wdt.h **** 
 101:/usr/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/avr/include/avr/wdt.h **** 
 103:/usr/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/avr/include/avr/wdt.h **** #else
 106:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/avr/include/avr/wdt.h **** #endif
 108:/usr/avr/include/avr/wdt.h **** 
 109:/usr/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/avr/include/avr/wdt.h **** #else
 114:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/avr/include/avr/wdt.h **** #endif
 116:/usr/avr/include/avr/wdt.h **** 
 117:/usr/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/avr/include/avr/wdt.h **** #else
 120:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/avr/include/avr/wdt.h **** #endif
 122:/usr/avr/include/avr/wdt.h **** 
 123:/usr/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/avr/include/avr/wdt.h **** 
 125:/usr/avr/include/avr/wdt.h **** 
 126:/usr/avr/include/avr/wdt.h **** /**
 127:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/avr/include/avr/wdt.h **** 
 134:/usr/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/avr/include/avr/wdt.h **** */
 136:/usr/avr/include/avr/wdt.h **** 
 137:/usr/avr/include/avr/wdt.h **** 
 138:/usr/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/avr/include/avr/wdt.h **** 
 140:/usr/avr/include/avr/wdt.h **** /*
 141:/usr/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/avr/include/avr/wdt.h **** */
 152:/usr/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/avr/include/avr/wdt.h **** do { \
 154:/usr/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/avr/include/avr/wdt.h **** ); \
 174:/usr/avr/include/avr/wdt.h **** } while(0)
 175:/usr/avr/include/avr/wdt.h **** 
 176:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/avr/include/avr/wdt.h ****     : \
 184:/usr/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/avr/include/avr/wdt.h **** );
 191:/usr/avr/include/avr/wdt.h **** 
 192:/usr/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/avr/include/avr/wdt.h **** 
 194:/usr/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/avr/include/avr/wdt.h **** )
 210:/usr/avr/include/avr/wdt.h **** 
 211:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/avr/include/avr/wdt.h **** do { \
 213:/usr/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/avr/include/avr/wdt.h **** ); \
 231:/usr/avr/include/avr/wdt.h **** }while(0)
 232:/usr/avr/include/avr/wdt.h **** 
 233:/usr/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/avr/include/avr/wdt.h **** 
 235:/usr/avr/include/avr/wdt.h **** static __inline__
 236:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/avr/include/avr/wdt.h **** {
 239:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/avr/include/avr/wdt.h **** 	{
 241:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/avr/include/avr/wdt.h **** 			);
 256:/usr/avr/include/avr/wdt.h **** 	}
 257:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/avr/include/avr/wdt.h **** 	{
 259:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/avr/include/avr/wdt.h **** 			);
 274:/usr/avr/include/avr/wdt.h **** 	}
 275:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/avr/include/avr/wdt.h **** 	{
 277:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/avr/include/avr/wdt.h **** 			);
 292:/usr/avr/include/avr/wdt.h **** 	}
 293:/usr/avr/include/avr/wdt.h **** 	else
 294:/usr/avr/include/avr/wdt.h ****  	{
 295:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/avr/include/avr/wdt.h **** 			);
 310:/usr/avr/include/avr/wdt.h **** 	}
 311:/usr/avr/include/avr/wdt.h **** }
 312:/usr/avr/include/avr/wdt.h **** 
 313:/usr/avr/include/avr/wdt.h **** static __inline__
 314:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/avr/include/avr/wdt.h **** {
 317:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/avr/include/avr/wdt.h **** 	{
 319:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/avr/include/avr/wdt.h **** 				);
 337:/usr/avr/include/avr/wdt.h **** 	}
 338:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/avr/include/avr/wdt.h **** 	{
 340:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/avr/include/avr/wdt.h **** 				);
 358:/usr/avr/include/avr/wdt.h **** 	}
 359:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/avr/include/avr/wdt.h **** 	{
 361:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/avr/include/avr/wdt.h **** 				);
 379:/usr/avr/include/avr/wdt.h **** 	}
 380:/usr/avr/include/avr/wdt.h **** 	else
 381:/usr/avr/include/avr/wdt.h **** 	{
 382:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/avr/include/avr/wdt.h **** 				);
 400:/usr/avr/include/avr/wdt.h **** 	}
 401:/usr/avr/include/avr/wdt.h **** }
 402:/usr/avr/include/avr/wdt.h **** 
 403:/usr/avr/include/avr/wdt.h **** #else
 404:/usr/avr/include/avr/wdt.h **** 
 405:/usr/avr/include/avr/wdt.h **** static __inline__
 406:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/avr/include/avr/wdt.h **** {
 409:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/avr/include/avr/wdt.h **** 	{
 411:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/avr/include/avr/wdt.h **** 		);
 425:/usr/avr/include/avr/wdt.h **** 	}
 426:/usr/avr/include/avr/wdt.h **** 	else
 427:/usr/avr/include/avr/wdt.h **** 	{
 428:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/avr/include/avr/wdt.h **** 		);
 442:/usr/avr/include/avr/wdt.h **** 	}
 443:/usr/avr/include/avr/wdt.h **** }
 444:/usr/avr/include/avr/wdt.h **** 
 445:/usr/avr/include/avr/wdt.h **** static __inline__
 446:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 448:/usr/avr/include/avr/wdt.h **** {
 449:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 450:/usr/avr/include/avr/wdt.h **** 	{
 451:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/avr/include/avr/wdt.h **** 		);
 466:/usr/avr/include/avr/wdt.h **** 	}
 467:/usr/avr/include/avr/wdt.h **** 	else
 468:/usr/avr/include/avr/wdt.h **** 	{
 469:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 470:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1221               		.loc 5 470 0
 1222               	/* #APP */
 1223               	 ;  470 "/usr/avr/include/avr/wdt.h" 1
 1224 0006 0FB6      		in __tmp_reg__,__SREG__
 1225 0008 F894      		cli
 1226 000a A895      		wdr
 1227 000c 8091 6000 		lds r24,96
 1228 0010 8861      		ori r24,24
 1229 0012 8093 6000 		sts 96,r24
 1230 0016 1092 6000 		sts 96,__zero_reg__
 1231 001a 0FBE      		out __SREG__,__tmp_reg__
 1232               		
 1233               	 ;  0 "" 2
 1234               	/* #NOAPP */
 1235               	.LBE260:
 1236               	.LBE259:
1092:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1237               		.loc 1 1092 0
 1238 001c 80E8      		ldi r24,lo8(-128)
 1239 001e 8093 6100 		sts 97,r24
1093:./tmk_core/protocol/lufa/lufa.c **** }
 1240               		.loc 1 1093 0
 1241 0022 1092 6100 		sts 97,__zero_reg__
 1242               	.LBE258:
 1243               	.LBE257:
1131:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1132:./tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1133:./tmk_core/protocol/lufa/lufa.c **** #endif
1134:./tmk_core/protocol/lufa/lufa.c **** 
1135:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1136:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1244               		.loc 1 1136 0
 1245 0026 0E94 0000 		call keyboard_setup
 1246               	.LVL94:
 1247               	.LBB261:
 1248               	.LBB262:
1099:./tmk_core/protocol/lufa/lufa.c **** 
 1249               		.loc 1 1099 0
 1250 002a 0E94 0000 		call USB_Disable
 1251               	.LVL95:
1101:./tmk_core/protocol/lufa/lufa.c **** 
 1252               		.loc 1 1101 0
 1253 002e 0E94 0000 		call USB_Init
 1254               	.LVL96:
 1255               	.LBB263:
 1256               	.LBB264:
 1257               	.LBB265:
 1258               		.loc 4 113 0
 1259 0032 8091 E200 		lds r24,226
 1260 0036 8460      		ori r24,lo8(4)
 1261 0038 8093 E200 		sts 226,r24
 1262               	.LVL97:
 1263               	.LBE265:
 1264               	.LBE264:
 1265               	.LBE263:
 1266               	.LBE262:
 1267               	.LBE261:
1137:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1138:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1268               		.loc 1 1138 0
 1269               	/* #APP */
 1270               	 ;  1138 "./tmk_core/protocol/lufa/lufa.c" 1
 1271 003c 7894      		sei
 1272               	 ;  0 "" 2
1139:./tmk_core/protocol/lufa/lufa.c **** 
1140:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1141:./tmk_core/protocol/lufa/lufa.c ****     midi_register_fallthrough_callback(&midi_device, fallthrough_callback);
1142:./tmk_core/protocol/lufa/lufa.c ****     midi_register_cc_callback(&midi_device, cc_callback);
1143:./tmk_core/protocol/lufa/lufa.c ****     midi_register_sysex_callback(&midi_device, sysex_callback);
1144:./tmk_core/protocol/lufa/lufa.c **** 
1145:./tmk_core/protocol/lufa/lufa.c ****     // init_notes();
1146:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 0, 1, 2);
1147:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 15, 1, 0);
1148:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteon(&midi_device, 0, 64, 127);
1149:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteoff(&midi_device, 0, 64, 127);
1150:./tmk_core/protocol/lufa/lufa.c **** #endif
1151:./tmk_core/protocol/lufa/lufa.c **** 
1152:./tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1153:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1154:./tmk_core/protocol/lufa/lufa.c **** #endif
1155:./tmk_core/protocol/lufa/lufa.c **** 
1156:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1157:./tmk_core/protocol/lufa/lufa.c **** 
1158:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1159:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1160:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1161:./tmk_core/protocol/lufa/lufa.c ****             ;
1162:./tmk_core/protocol/lufa/lufa.c ****     #else
1163:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1164:./tmk_core/protocol/lufa/lufa.c ****     #endif
1165:./tmk_core/protocol/lufa/lufa.c ****     }
1166:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1167:./tmk_core/protocol/lufa/lufa.c **** #else
1168:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1273               		.loc 1 1168 0
 1274               	/* #NOAPP */
 1275 003e 0E94 0000 		call USB_USBTask
 1276               	.LVL98:
1169:./tmk_core/protocol/lufa/lufa.c **** #endif
1170:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1171:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1277               		.loc 1 1171 0
 1278 0042 0E94 0000 		call keyboard_init
 1279               	.LVL99:
1172:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1280               		.loc 1 1172 0
 1281 0046 80E0      		ldi r24,lo8(lufa_driver)
 1282 0048 90E0      		ldi r25,hi8(lufa_driver)
 1283 004a 0E94 0000 		call host_set_driver
 1284               	.LVL100:
1173:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1174:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1175:./tmk_core/protocol/lufa/lufa.c **** #endif
1176:./tmk_core/protocol/lufa/lufa.c **** 
1177:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1178:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
 1285               		.loc 1 1178 0
 1286 004e 0E94 0000 		call virtser_init
 1287               	.LVL101:
 1288               	.L131:
1179:./tmk_core/protocol/lufa/lufa.c **** #endif
1180:./tmk_core/protocol/lufa/lufa.c **** 
1181:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1182:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1183:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1184:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1289               		.loc 1 1184 0
 1290 0052 8091 0000 		lds r24,USB_DeviceState
 1291 0056 8530      		cpi r24,lo8(5)
 1292 0058 01F0      		breq .L135
1185:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1186:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
1187:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
1188:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
1189:./tmk_core/protocol/lufa/lufa.c ****             }
1190:./tmk_core/protocol/lufa/lufa.c ****         }
1191:./tmk_core/protocol/lufa/lufa.c ****         #endif
1192:./tmk_core/protocol/lufa/lufa.c **** 
1193:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1293               		.loc 1 1193 0
 1294 005a 0E94 0000 		call keyboard_task
 1295               	.LVL102:
1194:./tmk_core/protocol/lufa/lufa.c **** 
1195:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1196:./tmk_core/protocol/lufa/lufa.c ****         midi_device_process(&midi_device);
1197:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ADVANCED
1198:./tmk_core/protocol/lufa/lufa.c ****         midi_task();
1199:./tmk_core/protocol/lufa/lufa.c **** #endif
1200:./tmk_core/protocol/lufa/lufa.c **** #endif
1201:./tmk_core/protocol/lufa/lufa.c **** 
1202:./tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1203:./tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
1204:./tmk_core/protocol/lufa/lufa.c **** #endif
1205:./tmk_core/protocol/lufa/lufa.c **** 
1206:./tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1207:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1208:./tmk_core/protocol/lufa/lufa.c **** #endif
1209:./tmk_core/protocol/lufa/lufa.c **** 
1210:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1211:./tmk_core/protocol/lufa/lufa.c ****         virtser_task();
 1296               		.loc 1 1211 0
 1297 005e 0E94 0000 		call virtser_task
 1298               	.LVL103:
1212:./tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
 1299               		.loc 1 1212 0
 1300 0062 80E0      		ldi r24,lo8(cdc_device)
 1301 0064 90E0      		ldi r25,hi8(cdc_device)
 1302 0066 0E94 0000 		call CDC_Device_USBTask
 1303               	.LVL104:
1184:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1304               		.loc 1 1184 0
 1305 006a 00C0      		rjmp .L131
 1306               	.L135:
1186:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1307               		.loc 1 1186 0
 1308 006c 0E94 0000 		call suspend_power_down
 1309               	.LVL105:
1187:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1310               		.loc 1 1187 0
 1311 0070 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1312 0074 8823      		tst r24
 1313 0076 01F0      		breq .L131
1187:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1314               		.loc 1 1187 0 is_stmt 0 discriminator 1
 1315 0078 0E94 0000 		call suspend_wakeup_condition
 1316               	.LVL106:
 1317 007c 8823      		tst r24
 1318 007e 01F0      		breq .L131
1188:./tmk_core/protocol/lufa/lufa.c ****             }
 1319               		.loc 1 1188 0 is_stmt 1
 1320 0080 0E94 0000 		call USB_Device_SendRemoteWakeup
 1321               	.LVL107:
 1322 0084 00C0      		rjmp .L131
 1323               		.cfi_endproc
 1324               	.LFE139:
 1326               	.global	cdc_device
 1327               		.section	.data.cdc_device,"aw",@progbits
 1330               	cdc_device:
 1331 0000 03        		.byte	3
 1332 0001 85        		.byte	-123
 1333 0002 1000      		.word	16
 1334 0004 00        		.zero	1
 1335 0005 01        		.byte	1
 1336 0006 06        		.byte	6
 1337 0007 1000      		.word	16
 1338 0009 00        		.zero	1
 1339 000a 01        		.byte	1
 1340 000b 84        		.byte	-124
 1341 000c 0800      		.word	8
 1342 000e 00        		.zero	1
 1343 000f 01        		.byte	1
 1344 0010 0000 0000 		.zero	11
 1344      0000 0000 
 1344      0000 00
 1345               	.global	lufa_driver
 1346               		.section	.data.lufa_driver,"aw",@progbits
 1349               	lufa_driver:
 1350 0000 0000      		.word	gs(keyboard_leds)
 1351 0002 0000      		.word	gs(send_keyboard)
 1352 0004 0000      		.word	gs(send_mouse)
 1353 0006 0000      		.word	gs(send_system)
 1354 0008 0000      		.word	gs(send_consumer)
 1355               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1358               	keyboard_report_sent:
 1359 0000 0000 0000 		.zero	32
 1359      0000 0000 
 1359      0000 0000 
 1359      0000 0000 
 1359      0000 0000 
 1360               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1363               	keyboard_led_stats:
 1364 0000 00        		.zero	1
 1365               	.global	keyboard_protocol
 1366               		.section	.data.keyboard_protocol,"aw",@progbits
 1369               	keyboard_protocol:
 1370 0000 01        		.byte	1
 1371               	.global	keyboard_idle
 1372               		.section	.bss.keyboard_idle,"aw",@nobits
 1375               	keyboard_idle:
 1376 0000 00        		.zero	1
 1377               		.text
 1378               	.Letext0:
 1379               		.file 6 "/usr/avr/include/stdint.h"
 1380               		.file 7 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1381               		.file 8 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Endpoint.h"
 1382               		.file 9 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1383               		.file 10 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1384               		.file 11 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1385               		.file 12 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1386               		.file 13 "./lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1387               		.file 14 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/CDCClassCommon.h"
 1388               		.file 15 "/usr/avr/include/stdio.h"
 1389               		.file 16 "./lib/lufa/LUFA/Drivers/USB/Class/Device/CDCClassDevice.h"
 1390               		.file 17 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1391               		.file 18 "./tmk_core/common/report.h"
 1392               		.file 19 "./tmk_core/common/host_driver.h"
 1393               		.file 20 "./tmk_core/common/host.h"
 1394               		.file 21 "./tmk_core/common/action.h"
 1395               		.file 22 "./tmk_core/common/debug.h"
 1396               		.file 23 "./tmk_core/protocol/lufa/lufa.h"
 1397               		.file 24 "./quantum/keycode_config.h"
 1398               		.file 25 "./quantum/keymap.h"
 1399               		.file 26 "./tmk_core/common/action_layer.h"
 1400               		.file 27 "./tmk_core/common/timer.h"
 1401               		.file 28 "./tmk_core/common/action_util.h"
 1402               		.file 29 "/usr/avr/include/stdlib.h"
 1403               		.file 30 "./quantum/quantum.h"
 1404               		.file 31 "./tmk_core/protocol/lufa/outputselect.h"
 1405               		.file 32 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1406               		.file 33 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1407               		.file 34 "./tmk_core/common/keyboard.h"
 1408               		.file 35 "./tmk_core/common/suspend.h"
 1409               		.file 36 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccpt4Naw.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccpt4Naw.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccpt4Naw.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccpt4Naw.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccpt4Naw.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccpt4Naw.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccpt4Naw.s:1363   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/ccpt4Naw.s:30     .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccpt4Naw.s:47     .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccpt4Naw.s:183    .text.send_system:0000000000000000 send_system
     /tmp/ccpt4Naw.s:302    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccpt4Naw.s:1369   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/ccpt4Naw.s:1358   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/ccpt4Naw.s:485    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccpt4Naw.s:525    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccpt4Naw.s:544    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccpt4Naw.s:559    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccpt4Naw.s:576    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccpt4Naw.s:593    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccpt4Naw.s:663    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccpt4Naw.s:1330   .data.cdc_device:0000000000000000 cdc_device
     /tmp/ccpt4Naw.s:1375   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/ccpt4Naw.s:943    .text.sendchar:0000000000000000 sendchar
     /tmp/ccpt4Naw.s:963    .text.virtser_init:0000000000000000 virtser_init
     /tmp/ccpt4Naw.s:987    .text.virtser_recv:0000000000000000 virtser_recv
     /tmp/ccpt4Naw.s:1005   .text.virtser_task:0000000000000000 virtser_task
     /tmp/ccpt4Naw.s:1040   .text.virtser_send:0000000000000000 virtser_send
     /tmp/ccpt4Naw.s:1204   .text.startup.main:0000000000000000 main
     /tmp/ccpt4Naw.s:1349   .data.lufa_driver:0000000000000000 lufa_driver

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_DeviceState
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
CDC_Device_ProcessControlRequest
Endpoint_ClearStatusStage
Endpoint_Write_Control_Stream_LE
clear_keyboard
CDC_Device_SendControlLineStateChange
CDC_Device_BytesReceived
CDC_Device_ReceiveByte
CDC_Device_Flush
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
CDC_Device_USBTask
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
__do_copy_data
__do_clear_bss
