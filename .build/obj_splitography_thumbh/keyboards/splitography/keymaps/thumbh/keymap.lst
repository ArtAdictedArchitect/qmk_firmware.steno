   1               		.file	"keymap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.equal_reset,"ax",@progbits
  11               	.global	equal_reset
  13               	equal_reset:
  14               	.LFB130:
  15               		.file 1 "/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c"
   1:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
   2:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // ................................................................... Mod Masks
   3:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
   4:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // tap dance persistant mods, see process_record_user()
   5:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // keyboard_report->mods (?) appears to be cleared by tap dance
   6:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint8_t mods = 0;
   7:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
   8:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tap_mods(keyrecord_t *record, uint16_t keycode)
   9:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  10:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) { mods |= MOD_BIT(keycode); }
  11:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else                       { mods &= ~(MOD_BIT(keycode)); }
  12:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  13:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  14:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // (un)register modifiers
  15:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void modifier(void (*f)(uint8_t))
  16:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  17:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LCTL)) { f(KC_LCTL); }
  18:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LGUI)) { f(KC_LGUI); }
  19:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LALT)) { f(KC_LALT); }
  20:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LSFT)) { f(KC_LSFT); }
  21:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_RSFT)) { f(KC_RSFT); }  // note: qmk macros all use left modifiers
  22:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  23:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  24:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // .......................................................... Keycode Primitives
  25:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  26:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // register shift keycode
  27:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void register_shift(uint16_t keycode)
  28:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  29:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code(KC_LSFT);
  30:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code(keycode);
  31:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  32:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  33:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // unregister shift keycode
  34:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void unregister_shift(uint16_t keycode)
  35:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  36:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(keycode);
  37:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(KC_LSFT);
  38:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  39:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  40:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // register simple key press
  41:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tap_key(uint16_t keycode)
  42:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  43:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code  (keycode);
  44:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(keycode);
  45:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  46:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  47:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void shift_key(uint16_t keycode)
  48:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  49:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code  (KC_LSFT);
  50:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_key        (keycode);
  51:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(KC_LSFT);
  52:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  53:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  54:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define SHIFT   1
  55:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define NOSHIFT 0
  56:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  57:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint16_t key_timer = 0;
  58:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  59:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // key press for thumb_roll() and lt_shift() macros
  60:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** bool key_press(uint8_t shift, uint16_t keycode)
  61:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  62:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (keycode) {
  63:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) {
  64:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (shift) { shift_key(keycode); }
  65:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       else       { tap_key(keycode); }
  66:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       return true;
  67:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
  68:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
  69:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   return false;
  70:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  71:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  72:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // ALT_T, CTL_T, GUI_T, SFT_T for shifted keycodes
  73:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void mt_shift(keyrecord_t *record, uint16_t modifier, uint16_t modifier2, uint16_t keycode)
  74:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  75:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) {
  76:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = timer_read();
  77:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     register_code(modifier);
  78:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (modifier2) { register_code(modifier2); }
  79:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
  80:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else {
  81:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     unregister_code(modifier);
  82:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (modifier2) { unregister_code(modifier2); }
  83:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { shift_key(keycode); }
  84:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
  85:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
  86:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  87:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
  88:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // mapped non-shifted keycodes to home row shift toggle
  89:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** bool map_shift(keyrecord_t *record, uint16_t shift_key, uint8_t shift, uint16_t keycode)
  90:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  91:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   // if modifier and only shift modifier and base layer..
  92:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods && ((mods & MOD_BIT(shift_key)) == mods) && (biton32(layer_state) == _BASE)) {
  93:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (record->event.pressed) {
  94:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (!shift) { unregister_code(KC_LSFT); }  // in event of unshifted keycode
  95:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       register_code(keycode);
  96:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
  97:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else {
  98:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       unregister_code(keycode);
  99:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (!shift) { register_code(KC_LSFT); }    // restore SFT_T
 100:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 101:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return true;                                 // see process_record_user()
 102:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 103:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { return false; }
 104:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 105:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 106:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // .................................................... Triple Dance Shift/Layer
 107:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 108:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint8_t dt_shift = 0;
 109:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 110:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void double_shift(uint16_t keycode, uint8_t layer)
 111:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 112:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_key (keycode);
 113:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (DT_SHIFT) {
 114:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     // set_oneshot_mods(MOD_LSFT);
 115:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     // layer_on(layer);
 116:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_on         (_SHIFT);
 117:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     set_oneshot_layer(_SHIFT, ONESHOT_START);
 118:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     dt_shift = 1;
 119:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 120:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { layer_on(layer); }
 121:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 122:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 123:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint8_t tap_rule = 0;                        // down_rule persistance, see process_record_us
 124:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 125:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // tap dance LT (LAYER, KEY) emulation with <KEY><DOWN> -> <KEY><SHIFT> and auto-repeat extensions!
 126:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tap_lt(qk_tap_dance_state_t *state, uint16_t keycode, uint8_t triple, uint8_t layer, uint8_t r
 127:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 128:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 129:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 2) {
 130:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_code(keycode); } // double tap plus down -> keycode...
 131:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == triple) {              // triple tap -> double keycode + shift
 132:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       tap_key     (keycode);
 133:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       double_shift(keycode, layer);
 134:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 135:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_key(keycode); }
 136:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 137:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else if (state->count > 1) {
 138:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->count == triple - 1) {               // triple tap -> double keycode + shift
 139:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (rule == 2) { tap_key(keycode); }          // see down_rule, process_record_user()
 140:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       double_shift(keycode, layer);
 141:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 142:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else { double_shift(keycode, layer); }          // tap plus down or double tap -> keycode + shi
 143:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 144:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else if (state->pressed) { layer_on(layer); }     // down: shift
 145:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else switch (rule) {                              // see process_record_user()
 146:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   case 0:
 147:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     modifier(register_code);
 148:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     tap_key (keycode);
 149:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     modifier(unregister_code);
 150:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return;
 151:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   case 1:
 152:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (altcode) { tap_key (altcode); }
 153:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return;
 154:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   case 2:
 155:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     double_shift(keycode, layer);
 156:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 157:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 158:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 159:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tap_reset(uint16_t keycode, uint8_t layer)
 160:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 161:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(keycode);
 162:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (DT_SHIFT && dt_shift) {
 163:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     clear_oneshot_layer_state(ONESHOT_PRESSED);
 164:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     dt_shift = 0;
 165:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 166:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { layer_off(layer); }
 167:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_rule = 0;                                     // clear retained down_rule, see process_record
 168:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 169:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 170:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define REPEATING    0
 171:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define TRIPLE       3
 172:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifndef ENTER_TOGGLE
 173:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define ENTER_TOGGLE _RSHIFT
 174:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 175:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 176:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // augment pseudo LT (_RSHIFT, KC_ENT) handling below for rapid <ENTER><SHIFT> sequences
 177:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void enter(qk_tap_dance_state_t *state, void *user_data)
 178:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 179:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_lt(state, KC_ENT, TRIPLE, ENTER_TOGGLE, tap_rule, 0);  // triple tap -> double enter + shift,
 180:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 181:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 182:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void enter_reset(qk_tap_dance_state_t *state, void *user_data)
 183:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 184:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_reset(KC_ENT, _RSHIFT);
 185:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 186:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 187:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // augment pseudo LT (_LSHIFT, KC_SPC) handling below for rapid <SPACE><SHIFT> sequences
 188:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void space(qk_tap_dance_state_t *state, void *user_data)
 189:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 190:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_lt(state, KC_SPC, REPEATING, _RSHIFT, tap_rule, KC_ENT); // triple tap down -> space...
 191:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 192:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 193:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void space_reset(qk_tap_dance_state_t *state, void *user_data)
 194:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 195:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_reset(KC_SPC, _RSHIFT);
 196:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 197:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 198:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // ......................................................... Triple Dance Insert
 199:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 200:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void double_max(uint8_t count, uint8_t shift, uint16_t keycode)
 201:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 202:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (shift) {
 203:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     shift_key(keycode);
 204:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (count > 1) { shift_key(keycode); }
 205:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 206:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else {
 207:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     tap_key(keycode);
 208:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (count > 1) { tap_key(keycode); }
 209:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 210:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 211:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 212:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void colon(qk_tap_dance_state_t *state, void *user_data)
 213:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 214:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 215:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 2) {
 216:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_SCLN); }
 217:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" :: "); }
 218:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_SCLN); }
 219:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 220:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else if (state->pressed) { register_shift(KC_SCLN); }
 221:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_SCLN); }
 222:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 223:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 224:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 225:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void colon_reset(qk_tap_dance_state_t *state, void *user_data)
 226:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 227:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_SCLN);
 228:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 229:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 230:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifndef EQL_LT
 231:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define EQL_LT _EDIT
 232:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 233:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 234:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void equal(qk_tap_dance_state_t *state, void *user_data)
 235:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 236:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 237:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 2) {
 238:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_code(KC_EQL); }
 239:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" /= "); }
 240:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_key(KC_EQL); }
 241:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 242:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else if (state->pressed) { layer_on(EQL_LT); }  // down: edit layer
 243:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, NOSHIFT, KC_EQL); }
 244:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 245:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 246:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 247:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void equal_reset(qk_tap_dance_state_t *state, void *user_data)
 248:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  16               		.loc 1 248 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 249:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(KC_EQL);
  23               		.loc 1 249 0
  24 0000 8EE2      		ldi r24,lo8(46)
  25               	.LVL1:
  26 0002 0E94 0000 		call unregister_code
  27               	.LVL2:
 250:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   layer_off(EQL_LT);
  28               		.loc 1 250 0
  29 0006 8AE0      		ldi r24,lo8(10)
  30 0008 0C94 0000 		jmp layer_off
  31               	.LVL3:
  32               		.cfi_endproc
  33               	.LFE130:
  35               		.section	.text.private,"ax",@progbits
  36               	.global	private
  38               	private:
  39               	.LFB140:
 251:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 252:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 253:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void greater(qk_tap_dance_state_t *state, void *user_data)
 254:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 255:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 256:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 2) {
 257:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_DOT); }
 258:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" -> "); }
 259:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_DOT); }
 260:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 261:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LSFT); }  // down: shift
 262:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_DOT); }
 263:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 264:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 265:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 266:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void greater_reset(qk_tap_dance_state_t *state, void *user_data)
 267:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 268:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_DOT);
 269:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 270:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 271:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void lesser(qk_tap_dance_state_t *state, void *user_data)
 272:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 273:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 274:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 2) {
 275:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_COMM); }
 276:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" <- "); }
 277:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_COMM); }
 278:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 279:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else if (state->pressed) { register_code(KC_LCTL); }  // down: ctrl
 280:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_COMM); }
 281:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 282:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 283:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 284:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void lesser_reset(qk_tap_dance_state_t *state, void *user_data)
 285:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 286:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_COMM);
 287:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(KC_LCTL);
 288:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 289:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 290:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tilde(qk_tap_dance_state_t *state, void *user_data)
 291:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 292:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 293:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) {
 294:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_GRV); }
 295:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 2) { send_string("~/"); }
 296:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_GRV); }
 297:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 298:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else if (state->pressed) { register_shift(KC_GRV); }
 299:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { shift_key(KC_GRV); }
 300:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 301:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 302:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 303:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tilde_reset(qk_tap_dance_state_t *state, void *user_data)
 304:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 305:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_GRV);
 306:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 307:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 308:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // ............................................................ Tap Dance Insert
 309:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 310:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void asterisk(qk_tap_dance_state_t *state, void *user_data)
 311:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 312:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_DOT); }
 313:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   shift_key(KC_8);
 314:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 315:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 316:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 317:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void comma(qk_tap_dance_state_t *state, void *user_data)
 318:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 319:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_key(KC_COMM);
 320:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_SPC); }
 321:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 322:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 323:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 324:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void dot(qk_tap_dance_state_t *state, void *user_data)
 325:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 326:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) { shift_key(KC_COLN); }
 327:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else                  { tap_key(KC_DOT); }
 328:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 329:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 330:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 331:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // compile time macro string, see functions/hardware planck script
 332:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void private(qk_tap_dance_state_t *state, void *user_data)
 333:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  40               		.loc 1 333 0
  41               		.cfi_startproc
  42               	.LVL4:
  43 0000 CF93      		push r28
  44               	.LCFI0:
  45               		.cfi_def_cfa_offset 3
  46               		.cfi_offset 28, -2
  47 0002 DF93      		push r29
  48               	.LCFI1:
  49               		.cfi_def_cfa_offset 4
  50               		.cfi_offset 29, -3
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 2 */
  54               	.L__stack_usage = 2
  55 0004 EC01      		movw r28,r24
 334:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifdef PRIVATE_STRING
 335:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) {
  56               		.loc 1 335 0
  57 0006 8881      		ld r24,Y
  58               	.LVL5:
  59 0008 8230      		cpi r24,lo8(2)
  60 000a 00F0      		brlo .L3
  61               		.file 2 "keyboards/splitography/keymaps/thumbh/private_string.h"
   1:keyboards/splitography/keymaps/thumbh/private_string.h **** SEND_STRING("the keys of enoch");
  62               		.loc 2 1 0
  63 000c 80E0      		ldi r24,lo8(__c.5764)
  64 000e 90E0      		ldi r25,hi8(__c.5764)
  65 0010 0E94 0000 		call send_string_P
  66               	.LVL6:
  67               	.L3:
 336:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #include "private_string.h"
 337:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 338:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 339:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
  68               		.loc 1 339 0
  69 0014 CE01      		movw r24,r28
  70               	/* epilogue start */
 340:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  71               		.loc 1 340 0
  72 0016 DF91      		pop r29
  73 0018 CF91      		pop r28
  74               	.LVL7:
 339:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
  75               		.loc 1 339 0
  76 001a 0C94 0000 		jmp reset_tap_dance
  77               	.LVL8:
  78               		.cfi_endproc
  79               	.LFE140:
  81               		.section	.text.send,"ax",@progbits
  82               	.global	send
  84               	send:
  85               	.LFB141:
 341:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 342:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // config.h defined string
 343:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void send(qk_tap_dance_state_t *state, void *user_data)
 344:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
  86               		.loc 1 344 0
  87               		.cfi_startproc
  88               	.LVL9:
  89 0000 CF93      		push r28
  90               	.LCFI2:
  91               		.cfi_def_cfa_offset 3
  92               		.cfi_offset 28, -2
  93 0002 DF93      		push r29
  94               	.LCFI3:
  95               		.cfi_def_cfa_offset 4
  96               		.cfi_offset 29, -3
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 2 */
 100               	.L__stack_usage = 2
 101 0004 EC01      		movw r28,r24
 345:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) { SEND_STRING(PUBLIC_STRING); }
 102               		.loc 1 345 0
 103 0006 8881      		ld r24,Y
 104               	.LVL10:
 105 0008 8230      		cpi r24,lo8(2)
 106 000a 00F0      		brlo .L5
 107               		.loc 1 345 0 is_stmt 0 discriminator 1
 108 000c 80E0      		ldi r24,lo8(__c.5770)
 109 000e 90E0      		ldi r25,hi8(__c.5770)
 110 0010 0E94 0000 		call send_string_P
 111               	.LVL11:
 112               	.L5:
 346:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 113               		.loc 1 346 0 is_stmt 1
 114 0014 CE01      		movw r24,r28
 115               	/* epilogue start */
 347:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 116               		.loc 1 347 0
 117 0016 DF91      		pop r29
 118 0018 CF91      		pop r28
 119               	.LVL12:
 346:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 120               		.loc 1 346 0
 121 001a 0C94 0000 		jmp reset_tap_dance
 122               	.LVL13:
 123               		.cfi_endproc
 124               	.LFE141:
 126               		.section	.text.tap_mods,"ax",@progbits
 127               	.global	tap_mods
 129               	tap_mods:
 130               	.LFB110:
   9:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) { mods |= MOD_BIT(keycode); }
 131               		.loc 1 9 0
 132               		.cfi_startproc
 133               	.LVL14:
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
 138 0000 6770      		andi r22,7
 139 0002 7727      		clr r23
 140               	.LVL15:
 141 0004 21E0      		ldi r18,lo8(1)
 142 0006 30E0      		ldi r19,0
 143 0008 00C0      		rjmp 2f
 144               		1:
 145 000a 220F      		lsl r18
 146               		2:
 147 000c 6A95      		dec r22
 148 000e 02F4      		brpl 1b
 149 0010 4091 0000 		lds r20,mods
  10:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else                       { mods &= ~(MOD_BIT(keycode)); }
 150               		.loc 1 10 0
 151 0014 FC01      		movw r30,r24
 152 0016 8281      		ldd r24,Z+2
 153               	.LVL16:
 154 0018 8823      		tst r24
 155 001a 01F0      		breq .L7
  10:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else                       { mods &= ~(MOD_BIT(keycode)); }
 156               		.loc 1 10 0 is_stmt 0 discriminator 1
 157 001c 242B      		or r18,r20
 158               	.L9:
  11:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 159               		.loc 1 11 0 is_stmt 1
 160 001e 2093 0000 		sts mods,r18
 161               	/* epilogue start */
  12:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 162               		.loc 1 12 0
 163 0022 0895      		ret
 164               	.L7:
  11:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 165               		.loc 1 11 0
 166 0024 2095      		com r18
 167 0026 2423      		and r18,r20
 168 0028 00C0      		rjmp .L9
 169               		.cfi_endproc
 170               	.LFE110:
 172               		.section	.text.modifier,"ax",@progbits
 173               	.global	modifier
 175               	modifier:
 176               	.LFB111:
  16:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LCTL)) { f(KC_LCTL); }
 177               		.loc 1 16 0
 178               		.cfi_startproc
 179               	.LVL17:
 180 0000 CF93      		push r28
 181               	.LCFI4:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 28, -2
 184 0002 DF93      		push r29
 185               	.LCFI5:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 29, -3
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 2 */
 191               	.L__stack_usage = 2
 192 0004 EC01      		movw r28,r24
  17:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LGUI)) { f(KC_LGUI); }
 193               		.loc 1 17 0
 194 0006 8091 0000 		lds r24,mods
 195               	.LVL18:
 196 000a 80FF      		sbrs r24,0
 197 000c 00C0      		rjmp .L11
  17:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LGUI)) { f(KC_LGUI); }
 198               		.loc 1 17 0 is_stmt 0 discriminator 1
 199 000e 80EE      		ldi r24,lo8(-32)
 200 0010 FE01      		movw r30,r28
 201 0012 0995      		icall
 202               	.LVL19:
 203               	.L11:
  18:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LALT)) { f(KC_LALT); }
 204               		.loc 1 18 0 is_stmt 1
 205 0014 8091 0000 		lds r24,mods
 206 0018 83FF      		sbrs r24,3
 207 001a 00C0      		rjmp .L12
  18:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LALT)) { f(KC_LALT); }
 208               		.loc 1 18 0 is_stmt 0 discriminator 1
 209 001c 83EE      		ldi r24,lo8(-29)
 210 001e FE01      		movw r30,r28
 211 0020 0995      		icall
 212               	.LVL20:
 213               	.L12:
  19:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LSFT)) { f(KC_LSFT); }
 214               		.loc 1 19 0 is_stmt 1
 215 0022 8091 0000 		lds r24,mods
 216 0026 82FF      		sbrs r24,2
 217 0028 00C0      		rjmp .L13
  19:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_LSFT)) { f(KC_LSFT); }
 218               		.loc 1 19 0 is_stmt 0 discriminator 1
 219 002a 82EE      		ldi r24,lo8(-30)
 220 002c FE01      		movw r30,r28
 221 002e 0995      		icall
 222               	.LVL21:
 223               	.L13:
  20:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_RSFT)) { f(KC_RSFT); }  // note: qmk macros all use left modifiers
 224               		.loc 1 20 0 is_stmt 1
 225 0030 8091 0000 		lds r24,mods
 226 0034 81FF      		sbrs r24,1
 227 0036 00C0      		rjmp .L14
  20:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (mods & MOD_BIT(KC_RSFT)) { f(KC_RSFT); }  // note: qmk macros all use left modifiers
 228               		.loc 1 20 0 is_stmt 0 discriminator 1
 229 0038 81EE      		ldi r24,lo8(-31)
 230 003a FE01      		movw r30,r28
 231 003c 0995      		icall
 232               	.LVL22:
 233               	.L14:
  21:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 234               		.loc 1 21 0 is_stmt 1
 235 003e 8091 0000 		lds r24,mods
 236 0042 85FF      		sbrs r24,5
 237 0044 00C0      		rjmp .L10
  21:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 238               		.loc 1 21 0 is_stmt 0 discriminator 1
 239 0046 85EE      		ldi r24,lo8(-27)
 240 0048 FE01      		movw r30,r28
 241               	/* epilogue start */
  22:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 242               		.loc 1 22 0 is_stmt 1 discriminator 1
 243 004a DF91      		pop r29
 244 004c CF91      		pop r28
 245               	.LVL23:
  21:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 246               		.loc 1 21 0 discriminator 1
 247 004e 0994      		ijmp
 248               	.LVL24:
 249               	.L10:
 250               	/* epilogue start */
  22:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 251               		.loc 1 22 0
 252 0050 DF91      		pop r29
 253 0052 CF91      		pop r28
 254               	.LVL25:
 255 0054 0895      		ret
 256               		.cfi_endproc
 257               	.LFE111:
 259               		.section	.text.register_shift,"ax",@progbits
 260               	.global	register_shift
 262               	register_shift:
 263               	.LFB112:
  28:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code(KC_LSFT);
 264               		.loc 1 28 0
 265               		.cfi_startproc
 266               	.LVL26:
 267 0000 CF93      		push r28
 268               	.LCFI6:
 269               		.cfi_def_cfa_offset 3
 270               		.cfi_offset 28, -2
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 1 */
 274               	.L__stack_usage = 1
 275 0002 C82F      		mov r28,r24
  29:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code(keycode);
 276               		.loc 1 29 0
 277 0004 81EE      		ldi r24,lo8(-31)
 278               	.LVL27:
 279 0006 0E94 0000 		call register_code
 280               	.LVL28:
  30:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 281               		.loc 1 30 0
 282 000a 8C2F      		mov r24,r28
 283               	/* epilogue start */
  31:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 284               		.loc 1 31 0
 285 000c CF91      		pop r28
  30:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 286               		.loc 1 30 0
 287 000e 0C94 0000 		jmp register_code
 288               	.LVL29:
 289               		.cfi_endproc
 290               	.LFE112:
 292               		.section	.text.unregister_shift,"ax",@progbits
 293               	.global	unregister_shift
 295               	unregister_shift:
 296               	.LFB113:
  35:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(keycode);
 297               		.loc 1 35 0
 298               		.cfi_startproc
 299               	.LVL30:
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 0 */
 303               	.L__stack_usage = 0
  36:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(KC_LSFT);
 304               		.loc 1 36 0
 305 0000 0E94 0000 		call unregister_code
 306               	.LVL31:
  37:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 307               		.loc 1 37 0
 308 0004 81EE      		ldi r24,lo8(-31)
 309 0006 0C94 0000 		jmp unregister_code
 310               	.LVL32:
 311               		.cfi_endproc
 312               	.LFE113:
 314               		.section	.text.colon_reset,"ax",@progbits
 315               	.global	colon_reset
 317               	colon_reset:
 318               	.LFB128:
 226:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_SCLN);
 319               		.loc 1 226 0
 320               		.cfi_startproc
 321               	.LVL33:
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 227:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 326               		.loc 1 227 0
 327 0000 83E3      		ldi r24,lo8(51)
 328 0002 90E0      		ldi r25,0
 329               	.LVL34:
 330 0004 0C94 0000 		jmp unregister_shift
 331               	.LVL35:
 332               		.cfi_endproc
 333               	.LFE128:
 335               		.section	.text.greater_reset,"ax",@progbits
 336               	.global	greater_reset
 338               	greater_reset:
 339               	.LFB132:
 267:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_DOT);
 340               		.loc 1 267 0
 341               		.cfi_startproc
 342               	.LVL36:
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 268:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 347               		.loc 1 268 0
 348 0000 87E3      		ldi r24,lo8(55)
 349 0002 90E0      		ldi r25,0
 350               	.LVL37:
 351 0004 0C94 0000 		jmp unregister_shift
 352               	.LVL38:
 353               		.cfi_endproc
 354               	.LFE132:
 356               		.section	.text.lesser_reset,"ax",@progbits
 357               	.global	lesser_reset
 359               	lesser_reset:
 360               	.LFB134:
 285:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_COMM);
 361               		.loc 1 285 0
 362               		.cfi_startproc
 363               	.LVL39:
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 0 */
 367               	.L__stack_usage = 0
 286:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(KC_LCTL);
 368               		.loc 1 286 0
 369 0000 86E3      		ldi r24,lo8(54)
 370 0002 90E0      		ldi r25,0
 371               	.LVL40:
 372 0004 0E94 0000 		call unregister_shift
 373               	.LVL41:
 287:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 374               		.loc 1 287 0
 375 0008 80EE      		ldi r24,lo8(-32)
 376 000a 0C94 0000 		jmp unregister_code
 377               	.LVL42:
 378               		.cfi_endproc
 379               	.LFE134:
 381               		.section	.text.tilde_reset,"ax",@progbits
 382               	.global	tilde_reset
 384               	tilde_reset:
 385               	.LFB136:
 304:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_shift(KC_GRV);
 386               		.loc 1 304 0
 387               		.cfi_startproc
 388               	.LVL43:
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 0 */
 392               	.L__stack_usage = 0
 305:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 393               		.loc 1 305 0
 394 0000 85E3      		ldi r24,lo8(53)
 395 0002 90E0      		ldi r25,0
 396               	.LVL44:
 397 0004 0C94 0000 		jmp unregister_shift
 398               	.LVL45:
 399               		.cfi_endproc
 400               	.LFE136:
 402               		.section	.text.tap_key,"ax",@progbits
 403               	.global	tap_key
 405               	tap_key:
 406               	.LFB114:
  42:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code  (keycode);
 407               		.loc 1 42 0
 408               		.cfi_startproc
 409               	.LVL46:
 410 0000 CF93      		push r28
 411               	.LCFI7:
 412               		.cfi_def_cfa_offset 3
 413               		.cfi_offset 28, -2
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 1 */
 417               	.L__stack_usage = 1
 418 0002 C82F      		mov r28,r24
  43:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(keycode);
 419               		.loc 1 43 0
 420 0004 0E94 0000 		call register_code
 421               	.LVL47:
  44:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 422               		.loc 1 44 0
 423 0008 8C2F      		mov r24,r28
 424               	/* epilogue start */
  45:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 425               		.loc 1 45 0
 426 000a CF91      		pop r28
  44:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 427               		.loc 1 44 0
 428 000c 0C94 0000 		jmp unregister_code
 429               	.LVL48:
 430               		.cfi_endproc
 431               	.LFE114:
 433               		.section	.text.comma,"ax",@progbits
 434               	.global	comma
 436               	comma:
 437               	.LFB138:
 318:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_key(KC_COMM);
 438               		.loc 1 318 0
 439               		.cfi_startproc
 440               	.LVL49:
 441 0000 CF93      		push r28
 442               	.LCFI8:
 443               		.cfi_def_cfa_offset 3
 444               		.cfi_offset 28, -2
 445 0002 DF93      		push r29
 446               	.LCFI9:
 447               		.cfi_def_cfa_offset 4
 448               		.cfi_offset 29, -3
 449               	/* prologue: function */
 450               	/* frame size = 0 */
 451               	/* stack size = 2 */
 452               	.L__stack_usage = 2
 453 0004 EC01      		movw r28,r24
 319:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_SPC); }
 454               		.loc 1 319 0
 455 0006 86E3      		ldi r24,lo8(54)
 456 0008 90E0      		ldi r25,0
 457               	.LVL50:
 458 000a 0E94 0000 		call tap_key
 459               	.LVL51:
 320:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 460               		.loc 1 320 0
 461 000e 8881      		ld r24,Y
 462 0010 8230      		cpi r24,lo8(2)
 463 0012 00F0      		brlo .L36
 320:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 464               		.loc 1 320 0 is_stmt 0 discriminator 1
 465 0014 8CE2      		ldi r24,lo8(44)
 466 0016 90E0      		ldi r25,0
 467 0018 0E94 0000 		call tap_key
 468               	.LVL52:
 469               	.L36:
 321:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 470               		.loc 1 321 0 is_stmt 1
 471 001c CE01      		movw r24,r28
 472               	/* epilogue start */
 322:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 473               		.loc 1 322 0
 474 001e DF91      		pop r29
 475 0020 CF91      		pop r28
 476               	.LVL53:
 321:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 477               		.loc 1 321 0
 478 0022 0C94 0000 		jmp reset_tap_dance
 479               	.LVL54:
 480               		.cfi_endproc
 481               	.LFE138:
 483               		.section	.text.shift_key,"ax",@progbits
 484               	.global	shift_key
 486               	shift_key:
 487               	.LFB115:
  48:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   register_code  (KC_LSFT);
 488               		.loc 1 48 0
 489               		.cfi_startproc
 490               	.LVL55:
 491 0000 CF93      		push r28
 492               	.LCFI10:
 493               		.cfi_def_cfa_offset 3
 494               		.cfi_offset 28, -2
 495 0002 DF93      		push r29
 496               	.LCFI11:
 497               		.cfi_def_cfa_offset 4
 498               		.cfi_offset 29, -3
 499               	/* prologue: function */
 500               	/* frame size = 0 */
 501               	/* stack size = 2 */
 502               	.L__stack_usage = 2
 503 0004 EC01      		movw r28,r24
  49:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_key        (keycode);
 504               		.loc 1 49 0
 505 0006 81EE      		ldi r24,lo8(-31)
 506               	.LVL56:
 507 0008 0E94 0000 		call register_code
 508               	.LVL57:
  50:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(KC_LSFT);
 509               		.loc 1 50 0
 510 000c CE01      		movw r24,r28
 511 000e 0E94 0000 		call tap_key
 512               	.LVL58:
  51:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 513               		.loc 1 51 0
 514 0012 81EE      		ldi r24,lo8(-31)
 515               	/* epilogue start */
  52:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 516               		.loc 1 52 0
 517 0014 DF91      		pop r29
 518 0016 CF91      		pop r28
 519               	.LVL59:
  51:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 520               		.loc 1 51 0
 521 0018 0C94 0000 		jmp unregister_code
 522               	.LVL60:
 523               		.cfi_endproc
 524               	.LFE115:
 526               		.section	.rodata.tilde.str1.1,"aMS",@progbits,1
 527               	.LC0:
 528 0000 7E2F 00   		.string	"~/"
 529               		.section	.text.tilde,"ax",@progbits
 530               	.global	tilde
 532               	tilde:
 533               	.LFB135:
 291:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 534               		.loc 1 291 0
 535               		.cfi_startproc
 536               	.LVL61:
 537 0000 1F93      		push r17
 538               	.LCFI12:
 539               		.cfi_def_cfa_offset 3
 540               		.cfi_offset 17, -2
 541 0002 CF93      		push r28
 542               	.LCFI13:
 543               		.cfi_def_cfa_offset 4
 544               		.cfi_offset 28, -3
 545 0004 DF93      		push r29
 546               	.LCFI14:
 547               		.cfi_def_cfa_offset 5
 548               		.cfi_offset 29, -4
 549               	/* prologue: function */
 550               	/* frame size = 0 */
 551               	/* stack size = 3 */
 552               	.L__stack_usage = 3
 553 0006 EC01      		movw r28,r24
 293:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_GRV); }
 554               		.loc 1 293 0
 555 0008 9881      		ld r25,Y
 556 000a 8F81      		ldd r24,Y+7
 557               	.LVL62:
 558 000c 9230      		cpi r25,lo8(2)
 559 000e 00F0      		brlo .L39
 294:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 2) { send_string("~/"); }
 560               		.loc 1 294 0
 561 0010 8823      		tst r24
 562 0012 01F0      		breq .L40
 563               	.L44:
 294:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 2) { send_string("~/"); }
 564               		.loc 1 294 0 is_stmt 0 discriminator 1
 565 0014 85E3      		ldi r24,lo8(53)
 566 0016 90E0      		ldi r25,0
 567 0018 0E94 0000 		call register_shift
 568               	.LVL63:
 569               	.L41:
 300:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 570               		.loc 1 300 0 is_stmt 1
 571 001c CE01      		movw r24,r28
 572               	/* epilogue start */
 301:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 573               		.loc 1 301 0
 574 001e DF91      		pop r29
 575 0020 CF91      		pop r28
 576               	.LVL64:
 577 0022 1F91      		pop r17
 300:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 578               		.loc 1 300 0
 579 0024 0C94 0000 		jmp reset_tap_dance
 580               	.LVL65:
 581               	.L40:
 296:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 582               		.loc 1 296 0
 583 0028 10E0      		ldi r17,0
 295:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_GRV); }
 584               		.loc 1 295 0
 585 002a 9230      		cpi r25,lo8(2)
 586 002c 01F4      		brne .L42
 295:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_GRV); }
 587               		.loc 1 295 0 is_stmt 0 discriminator 1
 588 002e 80E0      		ldi r24,lo8(.LC0)
 589 0030 90E0      		ldi r25,hi8(.LC0)
 590 0032 0E94 0000 		call send_string
 591               	.LVL66:
 592 0036 00C0      		rjmp .L41
 593               	.LVL67:
 594               	.L43:
 296:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 595               		.loc 1 296 0 is_stmt 1 discriminator 3
 596 0038 85E3      		ldi r24,lo8(53)
 597 003a 90E0      		ldi r25,0
 598 003c 0E94 0000 		call shift_key
 599               	.LVL68:
 600 0040 1F5F      		subi r17,lo8(-(1))
 601               	.LVL69:
 602               	.L42:
 296:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 603               		.loc 1 296 0 is_stmt 0 discriminator 1
 604 0042 8881      		ld r24,Y
 605 0044 1817      		cp r17,r24
 606 0046 00F0      		brlo .L43
 607 0048 00C0      		rjmp .L41
 608               	.LVL70:
 609               	.L39:
 298:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { shift_key(KC_GRV); }
 610               		.loc 1 298 0 is_stmt 1
 611 004a 8111      		cpse r24,__zero_reg__
 612 004c 00C0      		rjmp .L44
 299:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 613               		.loc 1 299 0
 614 004e 85E3      		ldi r24,lo8(53)
 615 0050 90E0      		ldi r25,0
 616 0052 0E94 0000 		call shift_key
 617               	.LVL71:
 618 0056 00C0      		rjmp .L41
 619               		.cfi_endproc
 620               	.LFE135:
 622               		.section	.text.asterisk,"ax",@progbits
 623               	.global	asterisk
 625               	asterisk:
 626               	.LFB137:
 311:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) { tap_key(KC_DOT); }
 627               		.loc 1 311 0
 628               		.cfi_startproc
 629               	.LVL72:
 630 0000 CF93      		push r28
 631               	.LCFI15:
 632               		.cfi_def_cfa_offset 3
 633               		.cfi_offset 28, -2
 634 0002 DF93      		push r29
 635               	.LCFI16:
 636               		.cfi_def_cfa_offset 4
 637               		.cfi_offset 29, -3
 638               	/* prologue: function */
 639               	/* frame size = 0 */
 640               	/* stack size = 2 */
 641               	.L__stack_usage = 2
 642 0004 EC01      		movw r28,r24
 312:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   shift_key(KC_8);
 643               		.loc 1 312 0
 644 0006 8881      		ld r24,Y
 645               	.LVL73:
 646 0008 8230      		cpi r24,lo8(2)
 647 000a 00F0      		brlo .L47
 312:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   shift_key(KC_8);
 648               		.loc 1 312 0 is_stmt 0 discriminator 1
 649 000c 87E3      		ldi r24,lo8(55)
 650 000e 90E0      		ldi r25,0
 651 0010 0E94 0000 		call tap_key
 652               	.LVL74:
 653               	.L47:
 313:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 654               		.loc 1 313 0 is_stmt 1
 655 0014 85E2      		ldi r24,lo8(37)
 656 0016 90E0      		ldi r25,0
 657 0018 0E94 0000 		call shift_key
 658               	.LVL75:
 314:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 659               		.loc 1 314 0
 660 001c CE01      		movw r24,r28
 661               	/* epilogue start */
 315:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 662               		.loc 1 315 0
 663 001e DF91      		pop r29
 664 0020 CF91      		pop r28
 665               	.LVL76:
 314:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 666               		.loc 1 314 0
 667 0022 0C94 0000 		jmp reset_tap_dance
 668               	.LVL77:
 669               		.cfi_endproc
 670               	.LFE137:
 672               		.section	.text.dot,"ax",@progbits
 673               	.global	dot
 675               	dot:
 676               	.LFB139:
 325:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (state->count > 1) { shift_key(KC_COLN); }
 677               		.loc 1 325 0
 678               		.cfi_startproc
 679               	.LVL78:
 680 0000 CF93      		push r28
 681               	.LCFI17:
 682               		.cfi_def_cfa_offset 3
 683               		.cfi_offset 28, -2
 684 0002 DF93      		push r29
 685               	.LCFI18:
 686               		.cfi_def_cfa_offset 4
 687               		.cfi_offset 29, -3
 688               	/* prologue: function */
 689               	/* frame size = 0 */
 690               	/* stack size = 2 */
 691               	.L__stack_usage = 2
 692 0004 EC01      		movw r28,r24
 326:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else                  { tap_key(KC_DOT); }
 693               		.loc 1 326 0
 694 0006 8881      		ld r24,Y
 695               	.LVL79:
 696 0008 8230      		cpi r24,lo8(2)
 697 000a 00F0      		brlo .L49
 326:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else                  { tap_key(KC_DOT); }
 698               		.loc 1 326 0 is_stmt 0 discriminator 1
 699 000c 83E3      		ldi r24,lo8(51)
 700 000e 92E0      		ldi r25,lo8(2)
 701 0010 0E94 0000 		call shift_key
 702               	.LVL80:
 703               	.L50:
 328:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 704               		.loc 1 328 0 is_stmt 1
 705 0014 CE01      		movw r24,r28
 706               	/* epilogue start */
 329:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 707               		.loc 1 329 0
 708 0016 DF91      		pop r29
 709 0018 CF91      		pop r28
 710               	.LVL81:
 328:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 711               		.loc 1 328 0
 712 001a 0C94 0000 		jmp reset_tap_dance
 713               	.LVL82:
 714               	.L49:
 327:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 715               		.loc 1 327 0
 716 001e 87E3      		ldi r24,lo8(55)
 717 0020 90E0      		ldi r25,0
 718 0022 0E94 0000 		call tap_key
 719               	.LVL83:
 720 0026 00C0      		rjmp .L50
 721               		.cfi_endproc
 722               	.LFE139:
 724               		.section	.text.key_press,"ax",@progbits
 725               	.global	key_press
 727               	key_press:
 728               	.LFB116:
  61:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (keycode) {
 729               		.loc 1 61 0
 730               		.cfi_startproc
 731               	.LVL84:
 732 0000 1F93      		push r17
 733               	.LCFI19:
 734               		.cfi_def_cfa_offset 3
 735               		.cfi_offset 17, -2
 736 0002 CF93      		push r28
 737               	.LCFI20:
 738               		.cfi_def_cfa_offset 4
 739               		.cfi_offset 28, -3
 740 0004 DF93      		push r29
 741               	.LCFI21:
 742               		.cfi_def_cfa_offset 5
 743               		.cfi_offset 29, -4
 744               	/* prologue: function */
 745               	/* frame size = 0 */
 746               	/* stack size = 3 */
 747               	.L__stack_usage = 3
 748 0006 182F      		mov r17,r24
 749 0008 EB01      		movw r28,r22
  62:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) {
 750               		.loc 1 62 0
 751 000a 2097      		sbiw r28,0
 752 000c 01F4      		brne .L52
 753               	.LVL85:
 754               	.L54:
  69:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 755               		.loc 1 69 0
 756 000e 80E0      		ldi r24,0
 757               	.L51:
 758               	/* epilogue start */
  70:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 759               		.loc 1 70 0
 760 0010 DF91      		pop r29
 761 0012 CF91      		pop r28
 762               	.LVL86:
 763 0014 1F91      		pop r17
 764               	.LVL87:
 765 0016 0895      		ret
 766               	.LVL88:
 767               	.L52:
  63:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (shift) { shift_key(keycode); }
 768               		.loc 1 63 0
 769 0018 8091 0000 		lds r24,key_timer
 770 001c 9091 0000 		lds r25,key_timer+1
 771 0020 0E94 0000 		call timer_elapsed
 772               	.LVL89:
 773 0024 8A3F      		cpi r24,-6
 774 0026 9105      		cpc r25,__zero_reg__
 775 0028 00F4      		brsh .L54
  64:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       else       { tap_key(keycode); }
 776               		.loc 1 64 0
 777 002a CE01      		movw r24,r28
 778 002c 1123      		tst r17
 779 002e 01F0      		breq .L55
 780               	.LVL90:
  64:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       else       { tap_key(keycode); }
 781               		.loc 1 64 0 is_stmt 0 discriminator 1
 782 0030 0E94 0000 		call shift_key
 783               	.LVL91:
 784               	.L56:
  66:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 785               		.loc 1 66 0 is_stmt 1
 786 0034 81E0      		ldi r24,lo8(1)
 787 0036 00C0      		rjmp .L51
 788               	.LVL92:
 789               	.L55:
  65:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       return true;
 790               		.loc 1 65 0
 791 0038 0E94 0000 		call tap_key
 792               	.LVL93:
 793 003c 00C0      		rjmp .L56
 794               		.cfi_endproc
 795               	.LFE116:
 797               		.section	.text.mt_shift,"ax",@progbits
 798               	.global	mt_shift
 800               	mt_shift:
 801               	.LFB117:
  74:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) {
 802               		.loc 1 74 0
 803               		.cfi_startproc
 804               	.LVL94:
 805 0000 EF92      		push r14
 806               	.LCFI22:
 807               		.cfi_def_cfa_offset 3
 808               		.cfi_offset 14, -2
 809 0002 FF92      		push r15
 810               	.LCFI23:
 811               		.cfi_def_cfa_offset 4
 812               		.cfi_offset 15, -3
 813 0004 1F93      		push r17
 814               	.LCFI24:
 815               		.cfi_def_cfa_offset 5
 816               		.cfi_offset 17, -4
 817 0006 CF93      		push r28
 818               	.LCFI25:
 819               		.cfi_def_cfa_offset 6
 820               		.cfi_offset 28, -5
 821 0008 DF93      		push r29
 822               	.LCFI26:
 823               		.cfi_def_cfa_offset 7
 824               		.cfi_offset 29, -6
 825               	/* prologue: function */
 826               	/* frame size = 0 */
 827               	/* stack size = 5 */
 828               	.L__stack_usage = 5
 829 000a 162F      		mov r17,r22
 830 000c EA01      		movw r28,r20
 831 000e 7901      		movw r14,r18
  75:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = timer_read();
 832               		.loc 1 75 0
 833 0010 FC01      		movw r30,r24
 834 0012 8281      		ldd r24,Z+2
 835               	.LVL95:
 836 0014 8823      		tst r24
 837 0016 01F0      		breq .L58
  76:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     register_code(modifier);
 838               		.loc 1 76 0
 839 0018 0E94 0000 		call timer_read
 840               	.LVL96:
 841 001c 9093 0000 		sts key_timer+1,r25
 842 0020 8093 0000 		sts key_timer,r24
  77:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (modifier2) { register_code(modifier2); }
 843               		.loc 1 77 0
 844 0024 812F      		mov r24,r17
 845 0026 0E94 0000 		call register_code
 846               	.LVL97:
  78:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 847               		.loc 1 78 0
 848 002a 2097      		sbiw r28,0
 849 002c 01F0      		breq .L57
  78:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 850               		.loc 1 78 0 is_stmt 0 discriminator 1
 851 002e 8C2F      		mov r24,r28
 852               	/* epilogue start */
  86:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 853               		.loc 1 86 0 is_stmt 1 discriminator 1
 854 0030 DF91      		pop r29
 855 0032 CF91      		pop r28
 856               	.LVL98:
 857 0034 1F91      		pop r17
 858 0036 FF90      		pop r15
 859 0038 EF90      		pop r14
 860               	.LVL99:
  78:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 861               		.loc 1 78 0 discriminator 1
 862 003a 0C94 0000 		jmp register_code
 863               	.LVL100:
 864               	.L58:
  81:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (modifier2) { unregister_code(modifier2); }
 865               		.loc 1 81 0
 866 003e 862F      		mov r24,r22
 867 0040 0E94 0000 		call unregister_code
 868               	.LVL101:
  82:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { shift_key(keycode); }
 869               		.loc 1 82 0
 870 0044 2097      		sbiw r28,0
 871 0046 01F0      		breq .L60
  82:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { shift_key(keycode); }
 872               		.loc 1 82 0 is_stmt 0 discriminator 1
 873 0048 8C2F      		mov r24,r28
 874 004a 0E94 0000 		call unregister_code
 875               	.LVL102:
 876               	.L60:
  83:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
 877               		.loc 1 83 0 is_stmt 1
 878 004e 8091 0000 		lds r24,key_timer
 879 0052 9091 0000 		lds r25,key_timer+1
 880 0056 0E94 0000 		call timer_elapsed
 881               	.LVL103:
 882 005a 8A3F      		cpi r24,-6
 883 005c 9105      		cpc r25,__zero_reg__
 884 005e 00F4      		brsh .L61
  83:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
 885               		.loc 1 83 0 is_stmt 0 discriminator 1
 886 0060 C701      		movw r24,r14
 887 0062 0E94 0000 		call shift_key
 888               	.LVL104:
 889               	.L61:
  84:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 890               		.loc 1 84 0 is_stmt 1
 891 0066 1092 0000 		sts key_timer+1,__zero_reg__
 892 006a 1092 0000 		sts key_timer,__zero_reg__
 893               	.L57:
 894               	/* epilogue start */
  86:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 895               		.loc 1 86 0
 896 006e DF91      		pop r29
 897 0070 CF91      		pop r28
 898               	.LVL105:
 899 0072 1F91      		pop r17
 900 0074 FF90      		pop r15
 901 0076 EF90      		pop r14
 902               	.LVL106:
 903 0078 0895      		ret
 904               		.cfi_endproc
 905               	.LFE117:
 907               		.section	.text.map_shift,"ax",@progbits
 908               	.global	map_shift
 910               	map_shift:
 911               	.LFB118:
  90:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   // if modifier and only shift modifier and base layer..
 912               		.loc 1 90 0
 913               		.cfi_startproc
 914               	.LVL107:
 915 0000 0F93      		push r16
 916               	.LCFI27:
 917               		.cfi_def_cfa_offset 3
 918               		.cfi_offset 16, -2
 919 0002 1F93      		push r17
 920               	.LCFI28:
 921               		.cfi_def_cfa_offset 4
 922               		.cfi_offset 17, -3
 923 0004 CF93      		push r28
 924               	.LCFI29:
 925               		.cfi_def_cfa_offset 5
 926               		.cfi_offset 28, -4
 927 0006 DF93      		push r29
 928               	.LCFI30:
 929               		.cfi_def_cfa_offset 6
 930               		.cfi_offset 29, -5
 931               	/* prologue: function */
 932               	/* frame size = 0 */
 933               	/* stack size = 4 */
 934               	.L__stack_usage = 4
 935 0008 EC01      		movw r28,r24
 936 000a 142F      		mov r17,r20
 937 000c 022F      		mov r16,r18
  92:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (record->event.pressed) {
 938               		.loc 1 92 0
 939 000e 2091 0000 		lds r18,mods
 940               	.LVL108:
 941 0012 2111      		cpse r18,__zero_reg__
 942 0014 00C0      		rjmp .L69
 943               	.LVL109:
 944               	.L71:
 103:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 945               		.loc 1 103 0
 946 0016 C0E0      		ldi r28,0
 947               	.LVL110:
 948               	.L68:
 104:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 949               		.loc 1 104 0
 950 0018 8C2F      		mov r24,r28
 951               	/* epilogue start */
 952 001a DF91      		pop r29
 953 001c CF91      		pop r28
 954 001e 1F91      		pop r17
 955               	.LVL111:
 956 0020 0F91      		pop r16
 957 0022 0895      		ret
 958               	.LVL112:
 959               	.L69:
  92:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (record->event.pressed) {
 960               		.loc 1 92 0 discriminator 1
 961 0024 30E0      		ldi r19,0
 962 0026 6770      		andi r22,7
 963 0028 7727      		clr r23
 964               	.LVL113:
 965 002a 81E0      		ldi r24,lo8(1)
 966 002c 90E0      		ldi r25,0
 967               	.LVL114:
 968 002e 00C0      		rjmp 2f
 969               		1:
 970 0030 880F      		lsl r24
 971 0032 991F      		rol r25
 972               		2:
 973 0034 6A95      		dec r22
 974 0036 02F4      		brpl 1b
 975 0038 8223      		and r24,r18
 976 003a 9323      		and r25,r19
 977 003c 2817      		cp r18,r24
 978 003e 3907      		cpc r19,r25
 979 0040 01F4      		brne .L71
  92:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (record->event.pressed) {
 980               		.loc 1 92 0 is_stmt 0 discriminator 2
 981 0042 6091 0000 		lds r22,layer_state
 982 0046 7091 0000 		lds r23,layer_state+1
 983 004a 8091 0000 		lds r24,layer_state+2
 984 004e 9091 0000 		lds r25,layer_state+3
 985 0052 0E94 0000 		call biton32
 986               	.LVL115:
 987 0056 8111      		cpse r24,__zero_reg__
 988 0058 00C0      		rjmp .L71
  93:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (!shift) { unregister_code(KC_LSFT); }  // in event of unshifted keycode
 989               		.loc 1 93 0 is_stmt 1
 990 005a CA81      		ldd r28,Y+2
 991               	.LVL116:
 992 005c CC23      		tst r28
 993 005e 01F0      		breq .L72
  94:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       register_code(keycode);
 994               		.loc 1 94 0
 995 0060 1111      		cpse r17,__zero_reg__
 996 0062 00C0      		rjmp .L73
  94:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       register_code(keycode);
 997               		.loc 1 94 0 is_stmt 0 discriminator 1
 998 0064 81EE      		ldi r24,lo8(-31)
 999 0066 0E94 0000 		call unregister_code
 1000               	.LVL117:
 1001               	.L73:
  95:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 1002               		.loc 1 95 0 is_stmt 1
 1003 006a 802F      		mov r24,r16
 1004 006c 0E94 0000 		call register_code
 1005               	.LVL118:
 1006 0070 00C0      		rjmp .L68
 1007               	.L72:
  98:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (!shift) { register_code(KC_LSFT); }    // restore SFT_T
 1008               		.loc 1 98 0
 1009 0072 802F      		mov r24,r16
 1010 0074 0E94 0000 		call unregister_code
 1011               	.LVL119:
  99:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 1012               		.loc 1 99 0
 1013 0078 1111      		cpse r17,__zero_reg__
 1014 007a 00C0      		rjmp .L74
  99:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 1015               		.loc 1 99 0 is_stmt 0 discriminator 1
 1016 007c 81EE      		ldi r24,lo8(-31)
 1017 007e 0E94 0000 		call register_code
 1018               	.LVL120:
 1019               	.L74:
 101:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1020               		.loc 1 101 0 is_stmt 1
 1021 0082 C1E0      		ldi r28,lo8(1)
 1022 0084 00C0      		rjmp .L68
 1023               		.cfi_endproc
 1024               	.LFE118:
 1026               		.section	.text.double_shift,"ax",@progbits
 1027               	.global	double_shift
 1029               	double_shift:
 1030               	.LFB119:
 111:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_key (keycode);
 1031               		.loc 1 111 0
 1032               		.cfi_startproc
 1033               	.LVL121:
 1034               	/* prologue: function */
 1035               	/* frame size = 0 */
 1036               	/* stack size = 0 */
 1037               	.L__stack_usage = 0
 112:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (DT_SHIFT) {
 1038               		.loc 1 112 0
 1039 0000 0E94 0000 		call tap_key
 1040               	.LVL122:
 116:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     set_oneshot_layer(_SHIFT, ONESHOT_START);
 1041               		.loc 1 116 0
 1042 0004 81E0      		ldi r24,lo8(1)
 1043 0006 0E94 0000 		call layer_on
 1044               	.LVL123:
 117:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     dt_shift = 1;
 1045               		.loc 1 117 0
 1046 000a 63E0      		ldi r22,lo8(3)
 1047 000c 81E0      		ldi r24,lo8(1)
 1048 000e 0E94 0000 		call set_oneshot_layer
 1049               	.LVL124:
 118:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1050               		.loc 1 118 0
 1051 0012 81E0      		ldi r24,lo8(1)
 1052 0014 8093 0000 		sts dt_shift,r24
 1053               	/* epilogue start */
 121:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1054               		.loc 1 121 0
 1055 0018 0895      		ret
 1056               		.cfi_endproc
 1057               	.LFE119:
 1059               		.section	.text.tap_lt,"ax",@progbits
 1060               	.global	tap_lt
 1062               	tap_lt:
 1063               	.LFB120:
 127:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 1064               		.loc 1 127 0
 1065               		.cfi_startproc
 1066               	.LVL125:
 1067 0000 CF92      		push r12
 1068               	.LCFI31:
 1069               		.cfi_def_cfa_offset 3
 1070               		.cfi_offset 12, -2
 1071 0002 DF92      		push r13
 1072               	.LCFI32:
 1073               		.cfi_def_cfa_offset 4
 1074               		.cfi_offset 13, -3
 1075 0004 EF92      		push r14
 1076               	.LCFI33:
 1077               		.cfi_def_cfa_offset 5
 1078               		.cfi_offset 14, -4
 1079 0006 FF92      		push r15
 1080               	.LCFI34:
 1081               		.cfi_def_cfa_offset 6
 1082               		.cfi_offset 15, -5
 1083 0008 0F93      		push r16
 1084               	.LCFI35:
 1085               		.cfi_def_cfa_offset 7
 1086               		.cfi_offset 16, -6
 1087 000a 1F93      		push r17
 1088               	.LCFI36:
 1089               		.cfi_def_cfa_offset 8
 1090               		.cfi_offset 17, -7
 1091 000c CF93      		push r28
 1092               	.LCFI37:
 1093               		.cfi_def_cfa_offset 9
 1094               		.cfi_offset 28, -8
 1095 000e DF93      		push r29
 1096               	.LCFI38:
 1097               		.cfi_def_cfa_offset 10
 1098               		.cfi_offset 29, -9
 1099               	/* prologue: function */
 1100               	/* frame size = 0 */
 1101               	/* stack size = 8 */
 1102               	.L__stack_usage = 8
 1103 0010 6C01      		movw r12,r24
 1104 0012 EB01      		movw r28,r22
 1105 0014 122F      		mov r17,r18
 129:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_code(keycode); } // double tap plus down -> keycode...
 1106               		.loc 1 129 0
 1107 0016 FC01      		movw r30,r24
 1108 0018 9081      		ld r25,Z
 1109 001a 9330      		cpi r25,lo8(3)
 1110 001c 00F0      		brlo .L77
 130:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == triple) {              // triple tap -> double keycode + shift
 1111               		.loc 1 130 0
 1112 001e 8781      		ldd r24,Z+7
 1113               	.LVL126:
 1114 0020 8823      		tst r24
 1115 0022 01F0      		breq .L78
 130:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == triple) {              // triple tap -> double keycode + shift
 1116               		.loc 1 130 0 is_stmt 0 discriminator 1
 1117 0024 862F      		mov r24,r22
 1118               	/* epilogue start */
 157:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1119               		.loc 1 157 0 is_stmt 1 discriminator 1
 1120 0026 DF91      		pop r29
 1121 0028 CF91      		pop r28
 1122 002a 1F91      		pop r17
 1123 002c 0F91      		pop r16
 1124               	.LVL127:
 1125 002e FF90      		pop r15
 1126 0030 EF90      		pop r14
 1127               	.LVL128:
 1128 0032 DF90      		pop r13
 1129 0034 CF90      		pop r12
 1130               	.LVL129:
 130:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == triple) {              // triple tap -> double keycode + shift
 1131               		.loc 1 130 0 discriminator 1
 1132 0036 0C94 0000 		jmp register_code
 1133               	.LVL130:
 1134               	.L78:
 131:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       tap_key     (keycode);
 1135               		.loc 1 131 0
 1136 003a 9413      		cpse r25,r20
 1137 003c 00C0      		rjmp .L89
 1138               	.L93:
 139:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       double_shift(keycode, layer);
 1139               		.loc 1 139 0 discriminator 1
 1140 003e CE01      		movw r24,r28
 1141 0040 0E94 0000 		call tap_key
 1142               	.LVL131:
 1143 0044 00C0      		rjmp .L87
 1144               	.LVL132:
 1145               	.L80:
 135:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1146               		.loc 1 135 0 discriminator 3
 1147 0046 CE01      		movw r24,r28
 1148 0048 0E94 0000 		call tap_key
 1149               	.LVL133:
 1150 004c 1F5F      		subi r17,lo8(-(1))
 1151               	.LVL134:
 1152               	.L79:
 135:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1153               		.loc 1 135 0 is_stmt 0 discriminator 1
 1154 004e F601      		movw r30,r12
 1155 0050 8081      		ld r24,Z
 1156 0052 1817      		cp r17,r24
 1157 0054 00F0      		brlo .L80
 1158               	.LVL135:
 1159               	.L76:
 1160               	/* epilogue start */
 157:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1161               		.loc 1 157 0 is_stmt 1
 1162 0056 DF91      		pop r29
 1163 0058 CF91      		pop r28
 1164               	.LVL136:
 1165 005a 1F91      		pop r17
 1166 005c 0F91      		pop r16
 1167               	.LVL137:
 1168 005e FF90      		pop r15
 1169 0060 EF90      		pop r14
 1170               	.LVL138:
 1171 0062 DF90      		pop r13
 1172 0064 CF90      		pop r12
 1173               	.LVL139:
 1174 0066 0895      		ret
 1175               	.LVL140:
 1176               	.L89:
 135:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1177               		.loc 1 135 0
 1178 0068 10E0      		ldi r17,0
 1179               	.LVL141:
 1180 006a 00C0      		rjmp .L79
 1181               	.LVL142:
 1182               	.L77:
 137:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->count == triple - 1) {               // triple tap -> double keycode + shift
 1183               		.loc 1 137 0
 1184 006c 9230      		cpi r25,lo8(2)
 1185 006e 01F4      		brne .L82
 138:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (rule == 2) { tap_key(keycode); }          // see down_rule, process_record_user()
 1186               		.loc 1 138 0
 1187 0070 4330      		cpi r20,lo8(3)
 1188 0072 01F4      		brne .L87
 139:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       double_shift(keycode, layer);
 1189               		.loc 1 139 0
 1190 0074 0230      		cpi r16,lo8(2)
 1191 0076 01F0      		breq .L93
 1192               	.LVL143:
 1193               	.L87:
 155:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1194               		.loc 1 155 0
 1195 0078 612F      		mov r22,r17
 1196 007a CE01      		movw r24,r28
 1197               	/* epilogue start */
 157:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1198               		.loc 1 157 0
 1199 007c DF91      		pop r29
 1200 007e CF91      		pop r28
 1201               	.LVL144:
 1202 0080 1F91      		pop r17
 1203               	.LVL145:
 1204 0082 0F91      		pop r16
 1205               	.LVL146:
 1206 0084 FF90      		pop r15
 1207 0086 EF90      		pop r14
 1208               	.LVL147:
 1209 0088 DF90      		pop r13
 1210 008a CF90      		pop r12
 1211               	.LVL148:
 155:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1212               		.loc 1 155 0
 1213 008c 0C94 0000 		jmp double_shift
 1214               	.LVL149:
 1215               	.L82:
 144:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else switch (rule) {                              // see process_record_user()
 1216               		.loc 1 144 0
 1217 0090 8781      		ldd r24,Z+7
 1218 0092 8823      		tst r24
 1219 0094 01F0      		breq .L84
 144:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else switch (rule) {                              // see process_record_user()
 1220               		.loc 1 144 0 is_stmt 0 discriminator 1
 1221 0096 822F      		mov r24,r18
 1222               	/* epilogue start */
 157:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1223               		.loc 1 157 0 is_stmt 1 discriminator 1
 1224 0098 DF91      		pop r29
 1225 009a CF91      		pop r28
 1226 009c 1F91      		pop r17
 1227               	.LVL150:
 1228 009e 0F91      		pop r16
 1229               	.LVL151:
 1230 00a0 FF90      		pop r15
 1231 00a2 EF90      		pop r14
 1232               	.LVL152:
 1233 00a4 DF90      		pop r13
 1234 00a6 CF90      		pop r12
 1235               	.LVL153:
 144:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else switch (rule) {                              // see process_record_user()
 1236               		.loc 1 144 0 discriminator 1
 1237 00a8 0C94 0000 		jmp layer_on
 1238               	.LVL154:
 1239               	.L84:
 145:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   case 0:
 1240               		.loc 1 145 0
 1241 00ac 0130      		cpi r16,lo8(1)
 1242 00ae 01F0      		breq .L85
 1243 00b0 00F0      		brlo .L86
 1244 00b2 0230      		cpi r16,lo8(2)
 1245 00b4 01F0      		breq .L87
 1246 00b6 00C0      		rjmp .L76
 1247               	.L86:
 147:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     tap_key (keycode);
 1248               		.loc 1 147 0
 1249 00b8 80E0      		ldi r24,lo8(gs(register_code))
 1250 00ba 90E0      		ldi r25,hi8(gs(register_code))
 1251 00bc 0E94 0000 		call modifier
 1252               	.LVL155:
 148:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     modifier(unregister_code);
 1253               		.loc 1 148 0
 1254 00c0 CE01      		movw r24,r28
 1255 00c2 0E94 0000 		call tap_key
 1256               	.LVL156:
 149:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return;
 1257               		.loc 1 149 0
 1258 00c6 80E0      		ldi r24,lo8(gs(unregister_code))
 1259 00c8 90E0      		ldi r25,hi8(gs(unregister_code))
 1260               	/* epilogue start */
 157:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1261               		.loc 1 157 0
 1262 00ca DF91      		pop r29
 1263 00cc CF91      		pop r28
 1264               	.LVL157:
 1265 00ce 1F91      		pop r17
 1266               	.LVL158:
 1267 00d0 0F91      		pop r16
 1268               	.LVL159:
 1269 00d2 FF90      		pop r15
 1270 00d4 EF90      		pop r14
 1271               	.LVL160:
 1272 00d6 DF90      		pop r13
 1273 00d8 CF90      		pop r12
 1274               	.LVL161:
 149:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return;
 1275               		.loc 1 149 0
 1276 00da 0C94 0000 		jmp modifier
 1277               	.LVL162:
 1278               	.L85:
 152:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return;
 1279               		.loc 1 152 0
 1280 00de E114      		cp r14,__zero_reg__
 1281 00e0 F104      		cpc r15,__zero_reg__
 1282 00e2 01F4      		brne .+2
 1283 00e4 00C0      		rjmp .L76
 152:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return;
 1284               		.loc 1 152 0 is_stmt 0 discriminator 1
 1285 00e6 C701      		movw r24,r14
 1286               	/* epilogue start */
 157:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1287               		.loc 1 157 0 is_stmt 1 discriminator 1
 1288 00e8 DF91      		pop r29
 1289 00ea CF91      		pop r28
 1290 00ec 1F91      		pop r17
 1291               	.LVL163:
 1292 00ee 0F91      		pop r16
 1293               	.LVL164:
 1294 00f0 FF90      		pop r15
 1295 00f2 EF90      		pop r14
 1296               	.LVL165:
 1297 00f4 DF90      		pop r13
 1298 00f6 CF90      		pop r12
 1299               	.LVL166:
 152:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     return;
 1300               		.loc 1 152 0 discriminator 1
 1301 00f8 0C94 0000 		jmp tap_key
 1302               	.LVL167:
 1303               		.cfi_endproc
 1304               	.LFE120:
 1306               		.section	.text.enter,"ax",@progbits
 1307               	.global	enter
 1309               	enter:
 1310               	.LFB122:
 178:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_lt(state, KC_ENT, TRIPLE, ENTER_TOGGLE, tap_rule, 0);  // triple tap -> double enter + shift,
 1311               		.loc 1 178 0
 1312               		.cfi_startproc
 1313               	.LVL168:
 1314 0000 EF92      		push r14
 1315               	.LCFI39:
 1316               		.cfi_def_cfa_offset 3
 1317               		.cfi_offset 14, -2
 1318 0002 FF92      		push r15
 1319               	.LCFI40:
 1320               		.cfi_def_cfa_offset 4
 1321               		.cfi_offset 15, -3
 1322 0004 0F93      		push r16
 1323               	.LCFI41:
 1324               		.cfi_def_cfa_offset 5
 1325               		.cfi_offset 16, -4
 1326               	/* prologue: function */
 1327               	/* frame size = 0 */
 1328               	/* stack size = 3 */
 1329               	.L__stack_usage = 3
 179:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1330               		.loc 1 179 0
 1331 0006 F12C      		mov r15,__zero_reg__
 1332 0008 E12C      		mov r14,__zero_reg__
 1333 000a 0091 0000 		lds r16,tap_rule
 1334 000e 23E0      		ldi r18,lo8(3)
 1335 0010 43E0      		ldi r20,lo8(3)
 1336 0012 68E2      		ldi r22,lo8(40)
 1337 0014 70E0      		ldi r23,0
 1338               	.LVL169:
 1339 0016 0E94 0000 		call tap_lt
 1340               	.LVL170:
 1341               	/* epilogue start */
 180:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1342               		.loc 1 180 0
 1343 001a 0F91      		pop r16
 1344 001c FF90      		pop r15
 1345 001e EF90      		pop r14
 1346 0020 0895      		ret
 1347               		.cfi_endproc
 1348               	.LFE122:
 1350               		.section	.text.space,"ax",@progbits
 1351               	.global	space
 1353               	space:
 1354               	.LFB124:
 189:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_lt(state, KC_SPC, REPEATING, _RSHIFT, tap_rule, KC_ENT); // triple tap down -> space...
 1355               		.loc 1 189 0
 1356               		.cfi_startproc
 1357               	.LVL171:
 1358 0000 EF92      		push r14
 1359               	.LCFI42:
 1360               		.cfi_def_cfa_offset 3
 1361               		.cfi_offset 14, -2
 1362 0002 FF92      		push r15
 1363               	.LCFI43:
 1364               		.cfi_def_cfa_offset 4
 1365               		.cfi_offset 15, -3
 1366 0004 0F93      		push r16
 1367               	.LCFI44:
 1368               		.cfi_def_cfa_offset 5
 1369               		.cfi_offset 16, -4
 1370               	/* prologue: function */
 1371               	/* frame size = 0 */
 1372               	/* stack size = 3 */
 1373               	.L__stack_usage = 3
 190:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1374               		.loc 1 190 0
 1375 0006 28E2      		ldi r18,lo8(40)
 1376 0008 E22E      		mov r14,r18
 1377 000a F12C      		mov r15,__zero_reg__
 1378 000c 0091 0000 		lds r16,tap_rule
 1379 0010 23E0      		ldi r18,lo8(3)
 1380 0012 40E0      		ldi r20,0
 1381 0014 6CE2      		ldi r22,lo8(44)
 1382 0016 70E0      		ldi r23,0
 1383               	.LVL172:
 1384 0018 0E94 0000 		call tap_lt
 1385               	.LVL173:
 1386               	/* epilogue start */
 191:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1387               		.loc 1 191 0
 1388 001c 0F91      		pop r16
 1389 001e FF90      		pop r15
 1390 0020 EF90      		pop r14
 1391 0022 0895      		ret
 1392               		.cfi_endproc
 1393               	.LFE124:
 1395               		.section	.text.tap_reset,"ax",@progbits
 1396               	.global	tap_reset
 1398               	tap_reset:
 1399               	.LFB121:
 160:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   unregister_code(keycode);
 1400               		.loc 1 160 0
 1401               		.cfi_startproc
 1402               	.LVL174:
 1403 0000 CF93      		push r28
 1404               	.LCFI45:
 1405               		.cfi_def_cfa_offset 3
 1406               		.cfi_offset 28, -2
 1407               	/* prologue: function */
 1408               	/* frame size = 0 */
 1409               	/* stack size = 1 */
 1410               	.L__stack_usage = 1
 1411 0002 C62F      		mov r28,r22
 161:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (DT_SHIFT && dt_shift) {
 1412               		.loc 1 161 0
 1413 0004 0E94 0000 		call unregister_code
 1414               	.LVL175:
 162:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     clear_oneshot_layer_state(ONESHOT_PRESSED);
 1415               		.loc 1 162 0
 1416 0008 8091 0000 		lds r24,dt_shift
 1417 000c 8823      		tst r24
 1418 000e 01F0      		breq .L97
 163:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     dt_shift = 0;
 1419               		.loc 1 163 0
 1420 0010 81E0      		ldi r24,lo8(1)
 1421 0012 0E94 0000 		call clear_oneshot_layer_state
 1422               	.LVL176:
 164:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1423               		.loc 1 164 0
 1424 0016 1092 0000 		sts dt_shift,__zero_reg__
 1425               	.L98:
 167:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1426               		.loc 1 167 0
 1427 001a 1092 0000 		sts tap_rule,__zero_reg__
 1428               	/* epilogue start */
 168:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1429               		.loc 1 168 0
 1430 001e CF91      		pop r28
 1431               	.LVL177:
 1432 0020 0895      		ret
 1433               	.LVL178:
 1434               	.L97:
 166:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_rule = 0;                                     // clear retained down_rule, see process_record
 1435               		.loc 1 166 0
 1436 0022 8C2F      		mov r24,r28
 1437 0024 0E94 0000 		call layer_off
 1438               	.LVL179:
 1439 0028 00C0      		rjmp .L98
 1440               		.cfi_endproc
 1441               	.LFE121:
 1443               		.section	.text.enter_reset,"ax",@progbits
 1444               	.global	enter_reset
 1446               	enter_reset:
 1447               	.LFB123:
 183:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_reset(KC_ENT, _RSHIFT);
 1448               		.loc 1 183 0
 1449               		.cfi_startproc
 1450               	.LVL180:
 1451               	/* prologue: function */
 1452               	/* frame size = 0 */
 1453               	/* stack size = 0 */
 1454               	.L__stack_usage = 0
 184:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1455               		.loc 1 184 0
 1456 0000 63E0      		ldi r22,lo8(3)
 1457               	.LVL181:
 1458 0002 88E2      		ldi r24,lo8(40)
 1459 0004 90E0      		ldi r25,0
 1460               	.LVL182:
 1461 0006 0C94 0000 		jmp tap_reset
 1462               	.LVL183:
 1463               		.cfi_endproc
 1464               	.LFE123:
 1466               		.section	.text.space_reset,"ax",@progbits
 1467               	.global	space_reset
 1469               	space_reset:
 1470               	.LFB125:
 194:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tap_reset(KC_SPC, _RSHIFT);
 1471               		.loc 1 194 0
 1472               		.cfi_startproc
 1473               	.LVL184:
 1474               	/* prologue: function */
 1475               	/* frame size = 0 */
 1476               	/* stack size = 0 */
 1477               	.L__stack_usage = 0
 195:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1478               		.loc 1 195 0
 1479 0000 63E0      		ldi r22,lo8(3)
 1480               	.LVL185:
 1481 0002 8CE2      		ldi r24,lo8(44)
 1482 0004 90E0      		ldi r25,0
 1483               	.LVL186:
 1484 0006 0C94 0000 		jmp tap_reset
 1485               	.LVL187:
 1486               		.cfi_endproc
 1487               	.LFE125:
 1489               		.section	.text.double_max,"ax",@progbits
 1490               	.global	double_max
 1492               	double_max:
 1493               	.LFB126:
 201:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (shift) {
 1494               		.loc 1 201 0
 1495               		.cfi_startproc
 1496               	.LVL188:
 1497 0000 1F93      		push r17
 1498               	.LCFI46:
 1499               		.cfi_def_cfa_offset 3
 1500               		.cfi_offset 17, -2
 1501 0002 CF93      		push r28
 1502               	.LCFI47:
 1503               		.cfi_def_cfa_offset 4
 1504               		.cfi_offset 28, -3
 1505 0004 DF93      		push r29
 1506               	.LCFI48:
 1507               		.cfi_def_cfa_offset 5
 1508               		.cfi_offset 29, -4
 1509               	/* prologue: function */
 1510               	/* frame size = 0 */
 1511               	/* stack size = 3 */
 1512               	.L__stack_usage = 3
 1513 0006 182F      		mov r17,r24
 1514 0008 EA01      		movw r28,r20
 203:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (count > 1) { shift_key(keycode); }
 1515               		.loc 1 203 0
 1516 000a CA01      		movw r24,r20
 1517               	.LVL189:
 202:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     shift_key(keycode);
 1518               		.loc 1 202 0
 1519 000c 6623      		tst r22
 1520 000e 01F0      		breq .L102
 203:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (count > 1) { shift_key(keycode); }
 1521               		.loc 1 203 0
 1522 0010 0E94 0000 		call shift_key
 1523               	.LVL190:
 204:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1524               		.loc 1 204 0
 1525 0014 1230      		cpi r17,lo8(2)
 1526 0016 00F0      		brlo .L101
 204:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1527               		.loc 1 204 0 is_stmt 0 discriminator 1
 1528 0018 CE01      		movw r24,r28
 1529               	/* epilogue start */
 210:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1530               		.loc 1 210 0 is_stmt 1 discriminator 1
 1531 001a DF91      		pop r29
 1532 001c CF91      		pop r28
 1533               	.LVL191:
 1534 001e 1F91      		pop r17
 1535               	.LVL192:
 204:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1536               		.loc 1 204 0 discriminator 1
 1537 0020 0C94 0000 		jmp shift_key
 1538               	.LVL193:
 1539               	.L102:
 207:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (count > 1) { tap_key(keycode); }
 1540               		.loc 1 207 0
 1541 0024 0E94 0000 		call tap_key
 1542               	.LVL194:
 208:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1543               		.loc 1 208 0
 1544 0028 1230      		cpi r17,lo8(2)
 1545 002a 00F0      		brlo .L101
 208:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1546               		.loc 1 208 0 is_stmt 0 discriminator 1
 1547 002c CE01      		movw r24,r28
 1548               	/* epilogue start */
 210:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1549               		.loc 1 210 0 is_stmt 1 discriminator 1
 1550 002e DF91      		pop r29
 1551 0030 CF91      		pop r28
 1552               	.LVL195:
 1553 0032 1F91      		pop r17
 1554               	.LVL196:
 208:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1555               		.loc 1 208 0 discriminator 1
 1556 0034 0C94 0000 		jmp tap_key
 1557               	.LVL197:
 1558               	.L101:
 1559               	/* epilogue start */
 210:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1560               		.loc 1 210 0
 1561 0038 DF91      		pop r29
 1562 003a CF91      		pop r28
 1563               	.LVL198:
 1564 003c 1F91      		pop r17
 1565               	.LVL199:
 1566 003e 0895      		ret
 1567               		.cfi_endproc
 1568               	.LFE126:
 1570               		.section	.rodata.colon.str1.1,"aMS",@progbits,1
 1571               	.LC1:
 1572 0000 203A 3A20 		.string	" :: "
 1572      00
 1573               		.section	.text.colon,"ax",@progbits
 1574               	.global	colon
 1576               	colon:
 1577               	.LFB127:
 213:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 1578               		.loc 1 213 0
 1579               		.cfi_startproc
 1580               	.LVL200:
 1581 0000 1F93      		push r17
 1582               	.LCFI49:
 1583               		.cfi_def_cfa_offset 3
 1584               		.cfi_offset 17, -2
 1585 0002 CF93      		push r28
 1586               	.LCFI50:
 1587               		.cfi_def_cfa_offset 4
 1588               		.cfi_offset 28, -3
 1589 0004 DF93      		push r29
 1590               	.LCFI51:
 1591               		.cfi_def_cfa_offset 5
 1592               		.cfi_offset 29, -4
 1593               	/* prologue: function */
 1594               	/* frame size = 0 */
 1595               	/* stack size = 3 */
 1596               	.L__stack_usage = 3
 1597 0006 EC01      		movw r28,r24
 215:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_SCLN); }
 1598               		.loc 1 215 0
 1599 0008 8881      		ld r24,Y
 1600               	.LVL201:
 1601 000a 9F81      		ldd r25,Y+7
 1602 000c 8330      		cpi r24,lo8(3)
 1603 000e 00F0      		brlo .L107
 216:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" :: "); }
 1604               		.loc 1 216 0
 1605 0010 9923      		tst r25
 1606 0012 01F0      		breq .L108
 1607               	.L112:
 216:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" :: "); }
 1608               		.loc 1 216 0 is_stmt 0 discriminator 1
 1609 0014 83E3      		ldi r24,lo8(51)
 1610 0016 90E0      		ldi r25,0
 1611 0018 0E94 0000 		call register_shift
 1612               	.LVL202:
 1613               	.L109:
 222:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1614               		.loc 1 222 0 is_stmt 1
 1615 001c CE01      		movw r24,r28
 1616               	/* epilogue start */
 223:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1617               		.loc 1 223 0
 1618 001e DF91      		pop r29
 1619 0020 CF91      		pop r28
 1620               	.LVL203:
 1621 0022 1F91      		pop r17
 222:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1622               		.loc 1 222 0
 1623 0024 0C94 0000 		jmp reset_tap_dance
 1624               	.LVL204:
 1625               	.L108:
 218:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1626               		.loc 1 218 0
 1627 0028 10E0      		ldi r17,0
 217:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_SCLN); }
 1628               		.loc 1 217 0
 1629 002a 8330      		cpi r24,lo8(3)
 1630 002c 01F4      		brne .L110
 217:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_SCLN); }
 1631               		.loc 1 217 0 is_stmt 0 discriminator 1
 1632 002e 80E0      		ldi r24,lo8(.LC1)
 1633 0030 90E0      		ldi r25,hi8(.LC1)
 1634 0032 0E94 0000 		call send_string
 1635               	.LVL205:
 1636 0036 00C0      		rjmp .L109
 1637               	.LVL206:
 1638               	.L111:
 218:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1639               		.loc 1 218 0 is_stmt 1 discriminator 3
 1640 0038 83E3      		ldi r24,lo8(51)
 1641 003a 90E0      		ldi r25,0
 1642 003c 0E94 0000 		call shift_key
 1643               	.LVL207:
 1644 0040 1F5F      		subi r17,lo8(-(1))
 1645               	.LVL208:
 1646               	.L110:
 218:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1647               		.loc 1 218 0 is_stmt 0 discriminator 1
 1648 0042 8881      		ld r24,Y
 1649 0044 1817      		cp r17,r24
 1650 0046 00F0      		brlo .L111
 1651 0048 00C0      		rjmp .L109
 1652               	.LVL209:
 1653               	.L107:
 220:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_SCLN); }
 1654               		.loc 1 220 0 is_stmt 1
 1655 004a 9111      		cpse r25,__zero_reg__
 1656 004c 00C0      		rjmp .L112
 221:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 1657               		.loc 1 221 0
 1658 004e 43E3      		ldi r20,lo8(51)
 1659 0050 50E0      		ldi r21,0
 1660 0052 61E0      		ldi r22,lo8(1)
 1661               	.LVL210:
 1662 0054 0E94 0000 		call double_max
 1663               	.LVL211:
 1664 0058 00C0      		rjmp .L109
 1665               		.cfi_endproc
 1666               	.LFE127:
 1668               		.section	.rodata.equal.str1.1,"aMS",@progbits,1
 1669               	.LC2:
 1670 0000 202F 3D20 		.string	" /= "
 1670      00
 1671               		.section	.text.equal,"ax",@progbits
 1672               	.global	equal
 1674               	equal:
 1675               	.LFB129:
 235:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 1676               		.loc 1 235 0
 1677               		.cfi_startproc
 1678               	.LVL212:
 1679 0000 1F93      		push r17
 1680               	.LCFI52:
 1681               		.cfi_def_cfa_offset 3
 1682               		.cfi_offset 17, -2
 1683 0002 CF93      		push r28
 1684               	.LCFI53:
 1685               		.cfi_def_cfa_offset 4
 1686               		.cfi_offset 28, -3
 1687 0004 DF93      		push r29
 1688               	.LCFI54:
 1689               		.cfi_def_cfa_offset 5
 1690               		.cfi_offset 29, -4
 1691               	/* prologue: function */
 1692               	/* frame size = 0 */
 1693               	/* stack size = 3 */
 1694               	.L__stack_usage = 3
 1695 0006 EC01      		movw r28,r24
 237:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_code(KC_EQL); }
 1696               		.loc 1 237 0
 1697 0008 8881      		ld r24,Y
 1698               	.LVL213:
 1699 000a 9F81      		ldd r25,Y+7
 1700 000c 8330      		cpi r24,lo8(3)
 1701 000e 00F0      		brlo .L115
 238:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" /= "); }
 1702               		.loc 1 238 0
 1703 0010 9923      		tst r25
 1704 0012 01F0      		breq .L116
 238:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" /= "); }
 1705               		.loc 1 238 0 is_stmt 0 discriminator 1
 1706 0014 8EE2      		ldi r24,lo8(46)
 1707 0016 0E94 0000 		call register_code
 1708               	.LVL214:
 1709               	.L117:
 244:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1710               		.loc 1 244 0 is_stmt 1
 1711 001a CE01      		movw r24,r28
 1712               	/* epilogue start */
 245:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1713               		.loc 1 245 0
 1714 001c DF91      		pop r29
 1715 001e CF91      		pop r28
 1716               	.LVL215:
 1717 0020 1F91      		pop r17
 244:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1718               		.loc 1 244 0
 1719 0022 0C94 0000 		jmp reset_tap_dance
 1720               	.LVL216:
 1721               	.L116:
 240:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1722               		.loc 1 240 0
 1723 0026 10E0      		ldi r17,0
 239:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_key(KC_EQL); }
 1724               		.loc 1 239 0
 1725 0028 8330      		cpi r24,lo8(3)
 1726 002a 01F4      		brne .L118
 239:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { tap_key(KC_EQL); }
 1727               		.loc 1 239 0 is_stmt 0 discriminator 1
 1728 002c 80E0      		ldi r24,lo8(.LC2)
 1729 002e 90E0      		ldi r25,hi8(.LC2)
 1730 0030 0E94 0000 		call send_string
 1731               	.LVL217:
 1732 0034 00C0      		rjmp .L117
 1733               	.LVL218:
 1734               	.L119:
 240:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1735               		.loc 1 240 0 is_stmt 1 discriminator 3
 1736 0036 8EE2      		ldi r24,lo8(46)
 1737 0038 90E0      		ldi r25,0
 1738 003a 0E94 0000 		call tap_key
 1739               	.LVL219:
 1740 003e 1F5F      		subi r17,lo8(-(1))
 1741               	.LVL220:
 1742               	.L118:
 240:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1743               		.loc 1 240 0 is_stmt 0 discriminator 1
 1744 0040 8881      		ld r24,Y
 1745 0042 1817      		cp r17,r24
 1746 0044 00F0      		brlo .L119
 1747 0046 00C0      		rjmp .L117
 1748               	.LVL221:
 1749               	.L115:
 242:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, NOSHIFT, KC_EQL); }
 1750               		.loc 1 242 0 is_stmt 1
 1751 0048 9923      		tst r25
 1752 004a 01F0      		breq .L120
 242:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, NOSHIFT, KC_EQL); }
 1753               		.loc 1 242 0 is_stmt 0 discriminator 1
 1754 004c 8AE0      		ldi r24,lo8(10)
 1755 004e 0E94 0000 		call layer_on
 1756               	.LVL222:
 1757 0052 00C0      		rjmp .L117
 1758               	.LVL223:
 1759               	.L120:
 243:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 1760               		.loc 1 243 0 is_stmt 1
 1761 0054 4EE2      		ldi r20,lo8(46)
 1762 0056 50E0      		ldi r21,0
 1763 0058 60E0      		ldi r22,0
 1764               	.LVL224:
 1765 005a 0E94 0000 		call double_max
 1766               	.LVL225:
 1767 005e 00C0      		rjmp .L117
 1768               		.cfi_endproc
 1769               	.LFE129:
 1771               		.section	.rodata.greater.str1.1,"aMS",@progbits,1
 1772               	.LC3:
 1773 0000 202D 3E20 		.string	" -> "
 1773      00
 1774               		.section	.text.greater,"ax",@progbits
 1775               	.global	greater
 1777               	greater:
 1778               	.LFB131:
 254:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 1779               		.loc 1 254 0
 1780               		.cfi_startproc
 1781               	.LVL226:
 1782 0000 1F93      		push r17
 1783               	.LCFI55:
 1784               		.cfi_def_cfa_offset 3
 1785               		.cfi_offset 17, -2
 1786 0002 CF93      		push r28
 1787               	.LCFI56:
 1788               		.cfi_def_cfa_offset 4
 1789               		.cfi_offset 28, -3
 1790 0004 DF93      		push r29
 1791               	.LCFI57:
 1792               		.cfi_def_cfa_offset 5
 1793               		.cfi_offset 29, -4
 1794               	/* prologue: function */
 1795               	/* frame size = 0 */
 1796               	/* stack size = 3 */
 1797               	.L__stack_usage = 3
 1798 0006 EC01      		movw r28,r24
 256:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_DOT); }
 1799               		.loc 1 256 0
 1800 0008 8881      		ld r24,Y
 1801               	.LVL227:
 1802 000a 9F81      		ldd r25,Y+7
 1803 000c 8330      		cpi r24,lo8(3)
 1804 000e 00F0      		brlo .L123
 257:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" -> "); }
 1805               		.loc 1 257 0
 1806 0010 9923      		tst r25
 1807 0012 01F0      		breq .L124
 257:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" -> "); }
 1808               		.loc 1 257 0 is_stmt 0 discriminator 1
 1809 0014 87E3      		ldi r24,lo8(55)
 1810 0016 90E0      		ldi r25,0
 1811 0018 0E94 0000 		call register_shift
 1812               	.LVL228:
 1813               	.L125:
 263:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1814               		.loc 1 263 0 is_stmt 1
 1815 001c CE01      		movw r24,r28
 1816               	/* epilogue start */
 264:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1817               		.loc 1 264 0
 1818 001e DF91      		pop r29
 1819 0020 CF91      		pop r28
 1820               	.LVL229:
 1821 0022 1F91      		pop r17
 263:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1822               		.loc 1 263 0
 1823 0024 0C94 0000 		jmp reset_tap_dance
 1824               	.LVL230:
 1825               	.L124:
 259:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1826               		.loc 1 259 0
 1827 0028 10E0      		ldi r17,0
 258:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_DOT); }
 1828               		.loc 1 258 0
 1829 002a 8330      		cpi r24,lo8(3)
 1830 002c 01F4      		brne .L126
 258:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_DOT); }
 1831               		.loc 1 258 0 is_stmt 0 discriminator 1
 1832 002e 80E0      		ldi r24,lo8(.LC3)
 1833 0030 90E0      		ldi r25,hi8(.LC3)
 1834 0032 0E94 0000 		call send_string
 1835               	.LVL231:
 1836 0036 00C0      		rjmp .L125
 1837               	.LVL232:
 1838               	.L127:
 259:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1839               		.loc 1 259 0 is_stmt 1 discriminator 3
 1840 0038 87E3      		ldi r24,lo8(55)
 1841 003a 90E0      		ldi r25,0
 1842 003c 0E94 0000 		call shift_key
 1843               	.LVL233:
 1844 0040 1F5F      		subi r17,lo8(-(1))
 1845               	.LVL234:
 1846               	.L126:
 259:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1847               		.loc 1 259 0 is_stmt 0 discriminator 1
 1848 0042 8881      		ld r24,Y
 1849 0044 1817      		cp r17,r24
 1850 0046 00F0      		brlo .L127
 1851 0048 00C0      		rjmp .L125
 1852               	.LVL235:
 1853               	.L123:
 261:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_DOT); }
 1854               		.loc 1 261 0 is_stmt 1
 1855 004a 9923      		tst r25
 1856 004c 01F0      		breq .L128
 261:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_DOT); }
 1857               		.loc 1 261 0 is_stmt 0 discriminator 1
 1858 004e 81EE      		ldi r24,lo8(-31)
 1859 0050 0E94 0000 		call register_code
 1860               	.LVL236:
 1861 0054 00C0      		rjmp .L125
 1862               	.LVL237:
 1863               	.L128:
 262:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 1864               		.loc 1 262 0 is_stmt 1
 1865 0056 47E3      		ldi r20,lo8(55)
 1866 0058 50E0      		ldi r21,0
 1867 005a 61E0      		ldi r22,lo8(1)
 1868               	.LVL238:
 1869 005c 0E94 0000 		call double_max
 1870               	.LVL239:
 1871 0060 00C0      		rjmp .L125
 1872               		.cfi_endproc
 1873               	.LFE131:
 1875               		.section	.rodata.lesser.str1.1,"aMS",@progbits,1
 1876               	.LC4:
 1877 0000 203C 2D20 		.string	" <- "
 1877      00
 1878               		.section	.text.lesser,"ax",@progbits
 1879               	.global	lesser
 1881               	lesser:
 1882               	.LFB133:
 272:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t i;
 1883               		.loc 1 272 0
 1884               		.cfi_startproc
 1885               	.LVL240:
 1886 0000 1F93      		push r17
 1887               	.LCFI58:
 1888               		.cfi_def_cfa_offset 3
 1889               		.cfi_offset 17, -2
 1890 0002 CF93      		push r28
 1891               	.LCFI59:
 1892               		.cfi_def_cfa_offset 4
 1893               		.cfi_offset 28, -3
 1894 0004 DF93      		push r29
 1895               	.LCFI60:
 1896               		.cfi_def_cfa_offset 5
 1897               		.cfi_offset 29, -4
 1898               	/* prologue: function */
 1899               	/* frame size = 0 */
 1900               	/* stack size = 3 */
 1901               	.L__stack_usage = 3
 1902 0006 EC01      		movw r28,r24
 274:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (state->pressed) { register_shift(KC_COMM); }
 1903               		.loc 1 274 0
 1904 0008 8881      		ld r24,Y
 1905               	.LVL241:
 1906 000a 9F81      		ldd r25,Y+7
 1907 000c 8330      		cpi r24,lo8(3)
 1908 000e 00F0      		brlo .L131
 275:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" <- "); }
 1909               		.loc 1 275 0
 1910 0010 9923      		tst r25
 1911 0012 01F0      		breq .L132
 275:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (state->count == 3) { send_string(" <- "); }
 1912               		.loc 1 275 0 is_stmt 0 discriminator 1
 1913 0014 86E3      		ldi r24,lo8(54)
 1914 0016 90E0      		ldi r25,0
 1915 0018 0E94 0000 		call register_shift
 1916               	.LVL242:
 1917               	.L133:
 281:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1918               		.loc 1 281 0 is_stmt 1
 1919 001c CE01      		movw r24,r28
 1920               	/* epilogue start */
 282:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 1921               		.loc 1 282 0
 1922 001e DF91      		pop r29
 1923 0020 CF91      		pop r28
 1924               	.LVL243:
 1925 0022 1F91      		pop r17
 281:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 1926               		.loc 1 281 0
 1927 0024 0C94 0000 		jmp reset_tap_dance
 1928               	.LVL244:
 1929               	.L132:
 277:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1930               		.loc 1 277 0
 1931 0028 10E0      		ldi r17,0
 276:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_COMM); }
 1932               		.loc 1 276 0
 1933 002a 8330      		cpi r24,lo8(3)
 1934 002c 01F4      		brne .L134
 276:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else for (i = 0; i < state->count; i++) { shift_key(KC_COMM); }
 1935               		.loc 1 276 0 is_stmt 0 discriminator 1
 1936 002e 80E0      		ldi r24,lo8(.LC4)
 1937 0030 90E0      		ldi r25,hi8(.LC4)
 1938 0032 0E94 0000 		call send_string
 1939               	.LVL245:
 1940 0036 00C0      		rjmp .L133
 1941               	.LVL246:
 1942               	.L135:
 277:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1943               		.loc 1 277 0 is_stmt 1 discriminator 3
 1944 0038 86E3      		ldi r24,lo8(54)
 1945 003a 90E0      		ldi r25,0
 1946 003c 0E94 0000 		call shift_key
 1947               	.LVL247:
 1948 0040 1F5F      		subi r17,lo8(-(1))
 1949               	.LVL248:
 1950               	.L134:
 277:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 1951               		.loc 1 277 0 is_stmt 0 discriminator 1
 1952 0042 8881      		ld r24,Y
 1953 0044 1817      		cp r17,r24
 1954 0046 00F0      		brlo .L135
 1955 0048 00C0      		rjmp .L133
 1956               	.LVL249:
 1957               	.L131:
 279:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_COMM); }
 1958               		.loc 1 279 0 is_stmt 1
 1959 004a 9923      		tst r25
 1960 004c 01F0      		breq .L136
 279:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else { double_max(state->count, SHIFT, KC_COMM); }
 1961               		.loc 1 279 0 is_stmt 0 discriminator 1
 1962 004e 80EE      		ldi r24,lo8(-32)
 1963 0050 0E94 0000 		call register_code
 1964               	.LVL250:
 1965 0054 00C0      		rjmp .L133
 1966               	.LVL251:
 1967               	.L136:
 280:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   reset_tap_dance(state);
 1968               		.loc 1 280 0 is_stmt 1
 1969 0056 46E3      		ldi r20,lo8(54)
 1970 0058 50E0      		ldi r21,0
 1971 005a 61E0      		ldi r22,lo8(1)
 1972               	.LVL252:
 1973 005c 0E94 0000 		call double_max
 1974               	.LVL253:
 1975 0060 00C0      		rjmp .L133
 1976               		.cfi_endproc
 1977               	.LFE133:
 1979               		.section	.text.thumb_roll,"ax",@progbits
 1980               	.global	thumb_roll
 1982               	thumb_roll:
 1983               	.LFB142:
 348:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 349:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // ................................................................... Tap Dance
 350:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 351:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** qk_tap_dance_action_t tap_dance_actions[] = {
 352:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   [_ASTR] = ACTION_TAP_DANCE_FN         (asterisk)
 353:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_COLN] = ACTION_TAP_DANCE_FN_ADVANCED(NULL, colon, colon_reset)
 354:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_COMM] = ACTION_TAP_DANCE_FN         (comma)
 355:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_DOT]  = ACTION_TAP_DANCE_FN         (dot)
 356:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_ENT]  = ACTION_TAP_DANCE_FN_ADVANCED(NULL, enter, enter_reset)
 357:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_EQL]  = ACTION_TAP_DANCE_FN_ADVANCED(NULL, equal, equal_reset)
 358:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_GT]   = ACTION_TAP_DANCE_FN_ADVANCED(NULL, greater, greater_reset)
 359:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_LT]   = ACTION_TAP_DANCE_FN_ADVANCED(NULL, lesser, lesser_reset)
 360:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_PRIV] = ACTION_TAP_DANCE_FN         (private)
 361:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_SEND] = ACTION_TAP_DANCE_FN         (send)
 362:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_SPC]  = ACTION_TAP_DANCE_FN_ADVANCED(NULL, space, space_reset)
 363:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****  ,[_TILD] = ACTION_TAP_DANCE_FN_ADVANCED(NULL, tilde, tilde_reset)
 364:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** };
 365:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 366:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // .............................................................. Dynamic Layers
 367:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 368:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define        LEFT    1
 369:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #define        RIGHT   2
 370:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint8_t thumb = 0;
 371:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 372:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // rolling thumb combinations, see process_record_user()
 373:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // up,   up   -> _BASE
 374:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // up,   down -> _RSYMBOL
 375:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // down, up   -> _LSYMBOL
 376:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // down, down -> _MOUSE                     // see layer keycodes that raise mouse layer
 377:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 378:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint8_t overlayer = 0;
 379:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 380:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // seamlessly switch left / right thumb layer combinations
 381:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void thumb_roll(keyrecord_t *record, uint8_t side, uint8_t shift, uint16_t keycode, uint8_t thumb_d
 382:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 1984               		.loc 1 382 0
 1985               		.cfi_startproc
 1986               	.LVL254:
 1987 0000 CF92      		push r12
 1988               	.LCFI61:
 1989               		.cfi_def_cfa_offset 3
 1990               		.cfi_offset 12, -2
 1991 0002 DF92      		push r13
 1992               	.LCFI62:
 1993               		.cfi_def_cfa_offset 4
 1994               		.cfi_offset 13, -3
 1995 0004 EF92      		push r14
 1996               	.LCFI63:
 1997               		.cfi_def_cfa_offset 5
 1998               		.cfi_offset 14, -4
 1999 0006 0F93      		push r16
 2000               	.LCFI64:
 2001               		.cfi_def_cfa_offset 6
 2002               		.cfi_offset 16, -5
 2003 0008 CF93      		push r28
 2004               	.LCFI65:
 2005               		.cfi_def_cfa_offset 7
 2006               		.cfi_offset 28, -6
 2007 000a DF93      		push r29
 2008               	.LCFI66:
 2009               		.cfi_def_cfa_offset 8
 2010               		.cfi_offset 29, -7
 2011               	/* prologue: function */
 2012               	/* frame size = 0 */
 2013               	/* stack size = 6 */
 2014               	.L__stack_usage = 6
 2015 000c C62F      		mov r28,r22
 2016 000e D42F      		mov r29,r20
 2017 0010 6901      		movw r12,r18
 383:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) {
 2018               		.loc 1 383 0
 2019 0012 FC01      		movw r30,r24
 2020 0014 8281      		ldd r24,Z+2
 2021               	.LVL255:
 2022 0016 8823      		tst r24
 2023 0018 01F0      		breq .L139
 384:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_on(thumb_dn_layer);
 2024               		.loc 1 384 0
 2025 001a 802F      		mov r24,r16
 2026 001c 0E94 0000 		call layer_on
 2027               	.LVL256:
 385:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer  = timer_read();
 2028               		.loc 1 385 0
 2029 0020 0E94 0000 		call timer_read
 2030               	.LVL257:
 2031 0024 9093 0000 		sts key_timer+1,r25
 2032 0028 8093 0000 		sts key_timer,r24
 386:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     thumb     |= side;
 2033               		.loc 1 386 0
 2034 002c 8091 0000 		lds r24,thumb
 2035 0030 C82B      		or r28,r24
 2036               	.LVL258:
 2037 0032 C093 0000 		sts thumb,r28
 2038               	.L138:
 2039               	/* epilogue start */
 387:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 388:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else {
 389:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (biton32(layer_state) == _MOUSE) { layer_off(_MOUSE); }  // both thumbs needed
 390:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (thumb_dn_layer != _MOUSE) { layer_off(thumb_dn_layer); }
 391:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!key_press(shift, keycode)) {
 392:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       // release any opposing thumb_roll() layer
 393:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (overlayer) {
 394:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         layer_off(overlayer);
 395:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         overlayer = 0;
 396:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       }
 397:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       // opposite thumb down? see left right combination layer table above
 398:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       if (thumb & (side == LEFT ? RIGHT : LEFT)) {
 399:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         layer_on(thumb_up_layer);
 400:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         overlayer = thumb_up_layer;
 401:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       }
 402:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 403:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     clear_mods();
 404:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     thumb     &= ~side;
 405:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer  = 0;
 406:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 407:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2040               		.loc 1 407 0
 2041 0036 DF91      		pop r29
 2042               	.LVL259:
 2043 0038 CF91      		pop r28
 2044 003a 0F91      		pop r16
 2045               	.LVL260:
 2046 003c EF90      		pop r14
 2047               	.LVL261:
 2048 003e DF90      		pop r13
 2049 0040 CF90      		pop r12
 2050               	.LVL262:
 2051 0042 0895      		ret
 2052               	.LVL263:
 2053               	.L139:
 389:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     else if (thumb_dn_layer != _MOUSE) { layer_off(thumb_dn_layer); }
 2054               		.loc 1 389 0
 2055 0044 6091 0000 		lds r22,layer_state
 2056 0048 7091 0000 		lds r23,layer_state+1
 2057 004c 8091 0000 		lds r24,layer_state+2
 2058 0050 9091 0000 		lds r25,layer_state+3
 2059               	.LVL264:
 2060 0054 0E94 0000 		call biton32
 2061               	.LVL265:
 2062 0058 8930      		cpi r24,lo8(9)
 2063 005a 01F4      		brne .L141
 2064               	.L158:
 390:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!key_press(shift, keycode)) {
 2065               		.loc 1 390 0 discriminator 1
 2066 005c 0E94 0000 		call layer_off
 2067               	.LVL266:
 2068               	.L142:
 391:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       // release any opposing thumb_roll() layer
 2069               		.loc 1 391 0
 2070 0060 B601      		movw r22,r12
 2071 0062 8D2F      		mov r24,r29
 2072 0064 0E94 0000 		call key_press
 2073               	.LVL267:
 2074 0068 8111      		cpse r24,__zero_reg__
 2075 006a 00C0      		rjmp .L144
 393:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         layer_off(overlayer);
 2076               		.loc 1 393 0
 2077 006c 8091 0000 		lds r24,overlayer
 2078 0070 8823      		tst r24
 2079 0072 01F0      		breq .L145
 394:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         overlayer = 0;
 2080               		.loc 1 394 0
 2081 0074 0E94 0000 		call layer_off
 2082               	.LVL268:
 395:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       }
 2083               		.loc 1 395 0
 2084 0078 1092 0000 		sts overlayer,__zero_reg__
 2085               	.L145:
 398:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         layer_on(thumb_up_layer);
 2086               		.loc 1 398 0
 2087 007c 8091 0000 		lds r24,thumb
 2088 0080 90E0      		ldi r25,0
 2089 0082 21E0      		ldi r18,lo8(1)
 2090 0084 30E0      		ldi r19,0
 2091 0086 C130      		cpi r28,lo8(1)
 2092 0088 01F4      		brne .L146
 2093 008a 22E0      		ldi r18,lo8(2)
 2094 008c 30E0      		ldi r19,0
 2095               	.L146:
 398:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         layer_on(thumb_up_layer);
 2096               		.loc 1 398 0 is_stmt 0 discriminator 4
 2097 008e 8223      		and r24,r18
 2098 0090 9323      		and r25,r19
 2099 0092 892B      		or r24,r25
 2100 0094 01F0      		breq .L144
 399:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****         overlayer = thumb_up_layer;
 2101               		.loc 1 399 0 is_stmt 1
 2102 0096 8E2D      		mov r24,r14
 2103 0098 0E94 0000 		call layer_on
 2104               	.LVL269:
 400:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       }
 2105               		.loc 1 400 0
 2106 009c E092 0000 		sts overlayer,r14
 2107               	.L144:
 403:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     thumb     &= ~side;
 2108               		.loc 1 403 0
 2109 00a0 0E94 0000 		call clear_mods
 2110               	.LVL270:
 404:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer  = 0;
 2111               		.loc 1 404 0
 2112 00a4 C095      		com r28
 2113               	.LVL271:
 2114 00a6 8091 0000 		lds r24,thumb
 2115 00aa C823      		and r28,r24
 2116               	.LVL272:
 2117 00ac C093 0000 		sts thumb,r28
 405:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 2118               		.loc 1 405 0
 2119 00b0 1092 0000 		sts key_timer+1,__zero_reg__
 2120 00b4 1092 0000 		sts key_timer,__zero_reg__
 2121               		.loc 1 407 0
 2122 00b8 00C0      		rjmp .L138
 2123               	.LVL273:
 2124               	.L141:
 390:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!key_press(shift, keycode)) {
 2125               		.loc 1 390 0
 2126 00ba 0930      		cpi r16,lo8(9)
 2127 00bc 01F0      		breq .L142
 390:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!key_press(shift, keycode)) {
 2128               		.loc 1 390 0 is_stmt 0 discriminator 1
 2129 00be 802F      		mov r24,r16
 2130 00c0 00C0      		rjmp .L158
 2131               		.cfi_endproc
 2132               	.LFE142:
 2134               		.section	.text.lt,"ax",@progbits
 2135               	.global	lt
 2137               	lt:
 2138               	.LFB143:
 408:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 409:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // #ifdef STENO_ENABLE
 410:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // // LT for steno keycode
 411:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // void stn_layer(keyrecord_t *record, uint16_t keycode, uint8_t layer)
 412:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // {
 413:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //   if (record->event.pressed) {
 414:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //     key_timer = timer_read();
 415:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //     if (keycode) { process_steno(keycode, record); }
 416:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //     layer_on(layer);
 417:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //   }
 418:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //   else {
 419:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //     layer_off(layer);
 420:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //     if (keycode) {
 421:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //       // clear pressed state (request push of updated) process_steno.c and .h
 422:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //       if (timer_elapsed(key_timer) < TAPPING_TERM) { process_steno(keycode, record); }
 423:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //       else                                         { steno_clear_state(); }
 424:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //     }
 425:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //     key_timer = 0;
 426:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //   }
 427:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // }
 428:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // #endif
 429:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 430:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // extended LT macro for [shift]keycode [modifier]layer
 431:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void lt(keyrecord_t *record, uint8_t shift, uint16_t keycode, uint16_t modifier, uint8_t layer)
 432:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2139               		.loc 1 432 0 is_stmt 1
 2140               		.cfi_startproc
 2141               	.LVL274:
 2142 0000 EF92      		push r14
 2143               	.LCFI67:
 2144               		.cfi_def_cfa_offset 3
 2145               		.cfi_offset 14, -2
 2146 0002 FF92      		push r15
 2147               	.LCFI68:
 2148               		.cfi_def_cfa_offset 4
 2149               		.cfi_offset 15, -3
 2150 0004 0F93      		push r16
 2151               	.LCFI69:
 2152               		.cfi_def_cfa_offset 5
 2153               		.cfi_offset 16, -4
 2154 0006 1F93      		push r17
 2155               	.LCFI70:
 2156               		.cfi_def_cfa_offset 6
 2157               		.cfi_offset 17, -5
 2158 0008 CF93      		push r28
 2159               	.LCFI71:
 2160               		.cfi_def_cfa_offset 7
 2161               		.cfi_offset 28, -6
 2162 000a DF93      		push r29
 2163               	.LCFI72:
 2164               		.cfi_def_cfa_offset 8
 2165               		.cfi_offset 29, -7
 2166               	/* prologue: function */
 2167               	/* frame size = 0 */
 2168               	/* stack size = 6 */
 2169               	.L__stack_usage = 6
 2170 000c 162F      		mov r17,r22
 2171 000e 7A01      		movw r14,r20
 2172 0010 E901      		movw r28,r18
 433:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) {
 2173               		.loc 1 433 0
 2174 0012 FC01      		movw r30,r24
 2175 0014 8281      		ldd r24,Z+2
 2176               	.LVL275:
 2177 0016 8823      		tst r24
 2178 0018 01F0      		breq .L160
 434:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = timer_read();
 2179               		.loc 1 434 0
 2180 001a 0E94 0000 		call timer_read
 2181               	.LVL276:
 2182 001e 9093 0000 		sts key_timer+1,r25
 2183 0022 8093 0000 		sts key_timer,r24
 435:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (modifier) { register_code(modifier); }
 2184               		.loc 1 435 0
 2185 0026 2097      		sbiw r28,0
 2186 0028 01F0      		breq .L161
 2187               		.loc 1 435 0 is_stmt 0 discriminator 1
 2188 002a 8C2F      		mov r24,r28
 2189 002c 0E94 0000 		call register_code
 2190               	.LVL277:
 2191               	.L161:
 436:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_on(layer);
 2192               		.loc 1 436 0 is_stmt 1
 2193 0030 802F      		mov r24,r16
 2194               	/* epilogue start */
 437:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 438:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else {
 439:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (modifier) { unregister_code(modifier); }
 440:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_off(layer);
 441:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     // for shifted keycodes, hence, LT_SHIFT
 442:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_press(shift, keycode);
 443:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     clear_mods();
 444:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
 445:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 446:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2195               		.loc 1 446 0
 2196 0032 DF91      		pop r29
 2197 0034 CF91      		pop r28
 2198               	.LVL278:
 2199 0036 1F91      		pop r17
 2200               	.LVL279:
 2201 0038 0F91      		pop r16
 2202               	.LVL280:
 2203 003a FF90      		pop r15
 2204 003c EF90      		pop r14
 2205               	.LVL281:
 436:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_on(layer);
 2206               		.loc 1 436 0
 2207 003e 0C94 0000 		jmp layer_on
 2208               	.LVL282:
 2209               	.L160:
 439:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_off(layer);
 2210               		.loc 1 439 0
 2211 0042 CD2B      		or r28,r29
 2212 0044 01F0      		breq .L162
 439:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_off(layer);
 2213               		.loc 1 439 0 is_stmt 0 discriminator 1
 2214 0046 822F      		mov r24,r18
 2215 0048 0E94 0000 		call unregister_code
 2216               	.LVL283:
 2217               	.L162:
 440:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     // for shifted keycodes, hence, LT_SHIFT
 2218               		.loc 1 440 0 is_stmt 1
 2219 004c 802F      		mov r24,r16
 2220 004e 0E94 0000 		call layer_off
 2221               	.LVL284:
 442:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     clear_mods();
 2222               		.loc 1 442 0
 2223 0052 B701      		movw r22,r14
 2224 0054 812F      		mov r24,r17
 2225 0056 0E94 0000 		call key_press
 2226               	.LVL285:
 443:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
 2227               		.loc 1 443 0
 2228 005a 0E94 0000 		call clear_mods
 2229               	.LVL286:
 444:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 2230               		.loc 1 444 0
 2231 005e 1092 0000 		sts key_timer+1,__zero_reg__
 2232 0062 1092 0000 		sts key_timer,__zero_reg__
 2233               	/* epilogue start */
 2234               		.loc 1 446 0
 2235 0066 DF91      		pop r29
 2236 0068 CF91      		pop r28
 2237               	.LVL287:
 2238 006a 1F91      		pop r17
 2239               	.LVL288:
 2240 006c 0F91      		pop r16
 2241               	.LVL289:
 2242 006e FF90      		pop r15
 2243 0070 EF90      		pop r14
 2244               	.LVL290:
 2245 0072 0895      		ret
 2246               		.cfi_endproc
 2247               	.LFE143:
 2249               		.section	.text.lt_shift,"ax",@progbits
 2250               	.global	lt_shift
 2252               	lt_shift:
 2253               	.LFB144:
 447:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 448:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // LT for S(keycode)
 449:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void lt_shift(keyrecord_t *record, uint16_t keycode, uint8_t layer)
 450:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2254               		.loc 1 450 0
 2255               		.cfi_startproc
 2256               	.LVL291:
 2257 0000 0F93      		push r16
 2258               	.LCFI73:
 2259               		.cfi_def_cfa_offset 3
 2260               		.cfi_offset 16, -2
 2261               	/* prologue: function */
 2262               	/* frame size = 0 */
 2263               	/* stack size = 1 */
 2264               	.L__stack_usage = 1
 451:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   lt(record, SHIFT, keycode, 0, layer);
 2265               		.loc 1 451 0
 2266 0002 042F      		mov r16,r20
 2267 0004 30E0      		ldi r19,0
 2268 0006 20E0      		ldi r18,0
 2269 0008 AB01      		movw r20,r22
 2270               	.LVL292:
 2271 000a 61E0      		ldi r22,lo8(1)
 2272               	.LVL293:
 2273 000c 0E94 0000 		call lt
 2274               	.LVL294:
 2275               	/* epilogue start */
 452:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2276               		.loc 1 452 0
 2277 0010 0F91      		pop r16
 2278               	.LVL295:
 2279 0012 0895      		ret
 2280               		.cfi_endproc
 2281               	.LFE144:
 2283               		.section	.text.tap_layer,"ax",@progbits
 2284               	.global	tap_layer
 2286               	tap_layer:
 2287               	.LFB145:
 453:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 454:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // set layer asap to overcome macro latency errors, notably tap dance, LT usage and..
 455:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // inexplicably sets layer_on() faster than can be done in thumb_roll() !!
 456:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tap_layer(keyrecord_t *record, uint8_t layer)
 457:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2288               		.loc 1 457 0
 2289               		.cfi_startproc
 2290               	.LVL296:
 2291               	/* prologue: function */
 2292               	/* frame size = 0 */
 2293               	/* stack size = 0 */
 2294               	.L__stack_usage = 0
 458:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) { layer_on(layer); }
 2295               		.loc 1 458 0
 2296 0000 FC01      		movw r30,r24
 2297 0002 8281      		ldd r24,Z+2
 2298               	.LVL297:
 2299 0004 8823      		tst r24
 2300 0006 01F0      		breq .L171
 2301               		.loc 1 458 0 is_stmt 0 discriminator 1
 2302 0008 862F      		mov r24,r22
 2303 000a 0C94 0000 		jmp layer_on
 2304               	.LVL298:
 2305               	.L171:
 459:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else                       { layer_off(layer); }
 2306               		.loc 1 459 0 is_stmt 1
 2307 000e 862F      		mov r24,r22
 2308 0010 0C94 0000 		jmp layer_off
 2309               	.LVL299:
 2310               		.cfi_endproc
 2311               	.LFE145:
 2313               		.section	.text.clear_layers,"ax",@progbits
 2314               	.global	clear_layers
 2316               	clear_layers:
 2317               	.LFB146:
 460:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 461:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 462:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // ..................................................................... Keymaps
 463:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 464:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // void persistant_default_layer_set(uint16_t default_layer)
 465:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // {
 466:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //   eeconfig_update_default_layer(default_layer);
 467:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** //   default_layer_set            (default_layer);
 468:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // }
 469:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 470:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifdef CENTER_TT
 471:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint16_t tt_keycode = 0;             // current TT keycode
 472:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 473:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 474:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void clear_layers(void)
 475:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2318               		.loc 1 475 0
 2319               		.cfi_startproc
 2320 0000 CF93      		push r28
 2321               	.LCFI74:
 2322               		.cfi_def_cfa_offset 3
 2323               		.cfi_offset 28, -2
 2324               	/* prologue: function */
 2325               	/* frame size = 0 */
 2326               	/* stack size = 1 */
 2327               	.L__stack_usage = 1
 2328               	.LVL300:
 476:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   uint8_t layer;
 477:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   for (layer = 0; layer < _END_LAYERS; layer++) { layer_off(layer); }
 2329               		.loc 1 477 0
 2330 0002 C0E0      		ldi r28,0
 2331               	.LVL301:
 2332               	.L173:
 2333               		.loc 1 477 0 is_stmt 0 discriminator 3
 2334 0004 8C2F      		mov r24,r28
 2335 0006 0E94 0000 		call layer_off
 2336               	.LVL302:
 2337 000a CF5F      		subi r28,lo8(-(1))
 2338               	.LVL303:
 2339 000c C031      		cpi r28,lo8(16)
 2340 000e 01F4      		brne .L173
 478:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   mods       = 0;
 2341               		.loc 1 478 0 is_stmt 1
 2342 0010 1092 0000 		sts mods,__zero_reg__
 479:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   key_timer  = 0;
 2343               		.loc 1 479 0
 2344 0014 1092 0000 		sts key_timer+1,__zero_reg__
 2345 0018 1092 0000 		sts key_timer,__zero_reg__
 480:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   dt_shift   = 0;
 2346               		.loc 1 480 0
 2347 001c 1092 0000 		sts dt_shift,__zero_reg__
 481:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   thumb      = 0;
 2348               		.loc 1 481 0
 2349 0020 1092 0000 		sts thumb,__zero_reg__
 482:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   overlayer  = 0;
 2350               		.loc 1 482 0
 2351 0024 1092 0000 		sts overlayer,__zero_reg__
 483:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifdef CENTER_TT
 484:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   tt_keycode = 0;
 2352               		.loc 1 484 0
 2353 0028 1092 0000 		sts tt_keycode+1,__zero_reg__
 2354 002c 1092 0000 		sts tt_keycode,__zero_reg__
 2355               	/* epilogue start */
 485:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 486:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2356               		.loc 1 486 0
 2357 0030 CF91      		pop r28
 2358               	.LVL304:
 2359 0032 0895      		ret
 2360               		.cfi_endproc
 2361               	.LFE146:
 2363               		.section	.text.raise_number,"ax",@progbits
 2364               	.global	raise_number
 2366               	raise_number:
 2367               	.LFB147:
 487:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 488:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint8_t double_key = 0;
 489:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 490:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // dual thumb key to raise number layer
 491:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** bool raise_number(keyrecord_t *record, uint8_t side)
 492:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2368               		.loc 1 492 0
 2369               		.cfi_startproc
 2370               	.LVL305:
 2371 0000 CF93      		push r28
 2372               	.LCFI75:
 2373               		.cfi_def_cfa_offset 3
 2374               		.cfi_offset 28, -2
 2375               	/* prologue: function */
 2376               	/* frame size = 0 */
 2377               	/* stack size = 1 */
 2378               	.L__stack_usage = 1
 493:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) {
 2379               		.loc 1 493 0
 2380 0002 FC01      		movw r30,r24
 2381 0004 C281      		ldd r28,Z+2
 2382 0006 8091 0000 		lds r24,double_key
 2383               	.LVL306:
 2384 000a CC23      		tst r28
 2385 000c 01F0      		breq .L176
 494:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     double_key |= side;
 2386               		.loc 1 494 0
 2387 000e 682B      		or r22,r24
 2388               	.LVL307:
 2389 0010 6093 0000 		sts double_key,r22
 495:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (double_key == (LEFT | RIGHT)) {
 2390               		.loc 1 495 0
 2391 0014 6330      		cpi r22,lo8(3)
 2392 0016 01F0      		breq .L177
 2393               	.L179:
 496:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       layer_on(_NUMBER);
 497:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       return true;
 498:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 499:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 500:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else {
 501:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     double_key &= ~side;
 502:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!double_key) { layer_off(_NUMBER); }  // allow single key to continue on layer :-)
 503:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 504:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   return false;
 2394               		.loc 1 504 0
 2395 0018 C0E0      		ldi r28,0
 2396               	.LVL308:
 2397               	.L175:
 505:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2398               		.loc 1 505 0
 2399 001a 8C2F      		mov r24,r28
 2400               	/* epilogue start */
 2401 001c CF91      		pop r28
 2402 001e 0895      		ret
 2403               	.LVL309:
 2404               	.L177:
 496:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****       layer_on(_NUMBER);
 2405               		.loc 1 496 0
 2406 0020 87E0      		ldi r24,lo8(7)
 2407 0022 0E94 0000 		call layer_on
 2408               	.LVL310:
 497:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     }
 2409               		.loc 1 497 0
 2410 0026 00C0      		rjmp .L175
 2411               	.LVL311:
 2412               	.L176:
 501:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!double_key) { layer_off(_NUMBER); }  // allow single key to continue on layer :-)
 2413               		.loc 1 501 0
 2414 0028 6095      		com r22
 2415               	.LVL312:
 2416 002a 6823      		and r22,r24
 2417               	.LVL313:
 2418 002c 6093 0000 		sts double_key,r22
 502:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 2419               		.loc 1 502 0
 2420 0030 6111      		cpse r22,__zero_reg__
 2421 0032 00C0      		rjmp .L179
 502:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 2422               		.loc 1 502 0 is_stmt 0 discriminator 1
 2423 0034 87E0      		ldi r24,lo8(7)
 2424 0036 0E94 0000 		call layer_off
 2425               	.LVL314:
 2426 003a 00C0      		rjmp .L175
 2427               		.cfi_endproc
 2428               	.LFE147:
 2430               		.section	.text.tt_clear,"ax",@progbits
 2431               	.global	tt_clear
 2433               	tt_clear:
 2434               	.LFB148:
 506:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 507:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifdef CENTER_TT
 508:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tt_clear(void)
 509:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2435               		.loc 1 509 0 is_stmt 1
 2436               		.cfi_startproc
 2437               	/* prologue: function */
 2438               	/* frame size = 0 */
 2439               	/* stack size = 0 */
 2440               	.L__stack_usage = 0
 510:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (tt_keycode == KC_CAPS) { tap_key(KC_CAPS); }  // clear capslock
 2441               		.loc 1 510 0
 2442 0000 8091 0000 		lds r24,tt_keycode
 2443 0004 9091 0000 		lds r25,tt_keycode+1
 2444 0008 C997      		sbiw r24,57
 2445 000a 01F4      		brne .L181
 2446               		.loc 1 510 0 is_stmt 0 discriminator 1
 2447 000c 89E3      		ldi r24,lo8(57)
 2448 000e 90E0      		ldi r25,0
 2449 0010 0E94 0000 		call tap_key
 2450               	.LVL315:
 2451               	.L181:
 511:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   clear_layers();
 2452               		.loc 1 511 0 is_stmt 1
 2453 0014 0E94 0000 		call clear_layers
 2454               	.LVL316:
 512:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   set_single_persistent_default_layer(_BASE);
 2455               		.loc 1 512 0
 2456 0018 80E0      		ldi r24,0
 2457 001a 0C94 0000 		jmp set_single_persistent_default_layer
 2458               	.LVL317:
 2459               		.cfi_endproc
 2460               	.LFE148:
 2462               		.section	.text.tt_escape,"ax",@progbits
 2463               	.global	tt_escape
 2465               	tt_escape:
 2466               	.LFB149:
 513:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 514:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 515:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // alternate escape for TT layers, see process_record_user()
 516:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void tt_escape(keyrecord_t *record, uint16_t keycode)
 517:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2467               		.loc 1 517 0
 2468               		.cfi_startproc
 2469               	.LVL318:
 2470 0000 CF93      		push r28
 2471               	.LCFI76:
 2472               		.cfi_def_cfa_offset 3
 2473               		.cfi_offset 28, -2
 2474 0002 DF93      		push r29
 2475               	.LCFI77:
 2476               		.cfi_def_cfa_offset 4
 2477               		.cfi_offset 29, -3
 2478               	/* prologue: function */
 2479               	/* frame size = 0 */
 2480               	/* stack size = 2 */
 2481               	.L__stack_usage = 2
 2482 0004 EB01      		movw r28,r22
 518:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) { key_timer = timer_read(); }
 2483               		.loc 1 518 0
 2484 0006 FC01      		movw r30,r24
 2485 0008 8281      		ldd r24,Z+2
 2486               	.LVL319:
 2487 000a 8823      		tst r24
 2488 000c 01F0      		breq .L183
 2489               		.loc 1 518 0 is_stmt 0 discriminator 1
 2490 000e 0E94 0000 		call timer_read
 2491               	.LVL320:
 2492 0012 9093 0000 		sts key_timer+1,r25
 2493 0016 8093 0000 		sts key_timer,r24
 2494               	.L182:
 2495               	/* epilogue start */
 519:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else {
 520:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (timer_elapsed(key_timer) < TAPPING_TERM) { tt_keycode = keycode; }
 521:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
 522:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 523:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2496               		.loc 1 523 0 is_stmt 1
 2497 001a DF91      		pop r29
 2498 001c CF91      		pop r28
 2499               	.LVL321:
 2500 001e 0895      		ret
 2501               	.LVL322:
 2502               	.L183:
 520:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
 2503               		.loc 1 520 0
 2504 0020 8091 0000 		lds r24,key_timer
 2505 0024 9091 0000 		lds r25,key_timer+1
 2506 0028 0E94 0000 		call timer_elapsed
 2507               	.LVL323:
 2508 002c 8A3F      		cpi r24,-6
 2509 002e 9105      		cpc r25,__zero_reg__
 2510 0030 00F4      		brsh .L185
 520:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     key_timer = 0;
 2511               		.loc 1 520 0 is_stmt 0 discriminator 1
 2512 0032 D093 0000 		sts tt_keycode+1,r29
 2513 0036 C093 0000 		sts tt_keycode,r28
 2514               	.L185:
 521:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 2515               		.loc 1 521 0 is_stmt 1
 2516 003a 1092 0000 		sts key_timer+1,__zero_reg__
 2517 003e 1092 0000 		sts key_timer,__zero_reg__
 2518               		.loc 1 523 0
 2519 0042 00C0      		rjmp .L182
 2520               		.cfi_endproc
 2521               	.LFE149:
 2523               		.section	.text.toggle_plover,"ax",@progbits
 2524               	.global	toggle_plover
 2526               	toggle_plover:
 2527               	.LFB150:
 524:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 525:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 526:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** // txbolt plover run state
 527:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** static uint8_t plover = 0;
 528:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 529:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void toggle_plover(uint8_t state)
 530:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2528               		.loc 1 530 0
 2529               		.cfi_startproc
 2530               	.LVL324:
 2531 0000 CF93      		push r28
 2532               	.LCFI78:
 2533               		.cfi_def_cfa_offset 3
 2534               		.cfi_offset 28, -2
 2535               	/* prologue: function */
 2536               	/* frame size = 0 */
 2537               	/* stack size = 1 */
 2538               	.L__stack_usage = 1
 2539 0002 C82F      		mov r28,r24
 531:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (plover != state) {
 2540               		.loc 1 531 0
 2541 0004 8091 0000 		lds r24,plover
 2542               	.LVL325:
 2543 0008 8C17      		cp r24,r28
 2544 000a 01F0      		breq .L186
 2545               		.file 3 "/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h"
   1:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** 
   2:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** // simple window manager specific plover keybind hook
   3:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** 
   4:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** // toggle plover application, see herbstluftwm/config/appbinds
   5:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** register_code  (KC_LGUI);
 2546               		.loc 3 5 0
 2547 000c 83EE      		ldi r24,lo8(-29)
 2548 000e 0E94 0000 		call register_code
 2549               	.LVL326:
   6:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** register_code  (KC_LCTL);
 2550               		.loc 3 6 0
 2551 0012 80EE      		ldi r24,lo8(-32)
 2552 0014 0E94 0000 		call register_code
 2553               	.LVL327:
   7:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** tap_key        (KC_EQL);
 2554               		.loc 3 7 0
 2555 0018 8EE2      		ldi r24,lo8(46)
 2556 001a 90E0      		ldi r25,0
 2557 001c 0E94 0000 		call tap_key
 2558               	.LVL328:
   8:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** unregister_code(KC_LCTL);
 2559               		.loc 3 8 0
 2560 0020 80EE      		ldi r24,lo8(-32)
 2561 0022 0E94 0000 		call unregister_code
 2562               	.LVL329:
   9:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/plover_keybind.h **** unregister_code(KC_LGUI);
 2563               		.loc 3 9 0
 2564 0026 83EE      		ldi r24,lo8(-29)
 2565 0028 0E94 0000 		call unregister_code
 2566               	.LVL330:
 532:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifdef PLOVER_KEYBIND
 533:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #include "plover_keybind.h"
 534:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 535:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     plover = state;
 2567               		.loc 1 535 0
 2568 002c C093 0000 		sts plover,r28
 2569               	.L186:
 2570               	/* epilogue start */
 536:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 537:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2571               		.loc 1 537 0
 2572 0030 CF91      		pop r28
 2573               	.LVL331:
 2574 0032 0895      		ret
 2575               		.cfi_endproc
 2576               	.LFE150:
 2578               		.section	.text.base_layer,"ax",@progbits
 2579               	.global	base_layer
 2581               	base_layer:
 2582               	.LFB151:
 538:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 539:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void base_layer(void)
 540:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2583               		.loc 1 540 0
 2584               		.cfi_startproc
 2585               	/* prologue: function */
 2586               	/* frame size = 0 */
 2587               	/* stack size = 0 */
 2588               	.L__stack_usage = 0
 541:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifdef AUDIO_ENABLE
 542:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (plover) { PLAY_SONG(song_plover_gb); }
 543:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   else        { PLAY_SONG(song_qwerty); }
 544:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 545:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   clear_layers();
 2589               		.loc 1 545 0
 2590 0000 0E94 0000 		call clear_layers
 2591               	.LVL332:
 546:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   set_single_persistent_default_layer(_BASE);
 2592               		.loc 1 546 0
 2593 0004 80E0      		ldi r24,0
 2594 0006 0E94 0000 		call set_single_persistent_default_layer
 2595               	.LVL333:
 547:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   toggle_plover(0);
 2596               		.loc 1 547 0
 2597 000a 80E0      		ldi r24,0
 2598 000c 0C94 0000 		jmp toggle_plover
 2599               	.LVL334:
 2600               		.cfi_endproc
 2601               	.LFE151:
 2603               		.section	.text.steno,"ax",@progbits
 2604               	.global	steno
 2606               	steno:
 2607               	.LFB152:
 548:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 549:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 550:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void steno(keyrecord_t *record)
 551:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2608               		.loc 1 551 0
 2609               		.cfi_startproc
 2610               	.LVL335:
 2611               	/* prologue: function */
 2612               	/* frame size = 0 */
 2613               	/* stack size = 0 */
 2614               	.L__stack_usage = 0
 552:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) {
 2615               		.loc 1 552 0
 2616 0000 FC01      		movw r30,r24
 2617 0002 8281      		ldd r24,Z+2
 2618               	.LVL336:
 2619 0004 8823      		tst r24
 2620 0006 01F0      		breq .L189
 553:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #ifdef AUDIO_ENABLE
 554:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     PLAY_SONG(song_plover);
 555:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** #endif
 556:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     clear_layers();
 2621               		.loc 1 556 0
 2622 0008 0E94 0000 		call clear_layers
 2623               	.LVL337:
 557:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     layer_on(_PLOVER);
 2624               		.loc 1 557 0
 2625 000c 86E0      		ldi r24,lo8(6)
 2626 000e 0E94 0000 		call layer_on
 2627               	.LVL338:
 558:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!eeconfig_is_enabled()) { eeconfig_init(); }
 2628               		.loc 1 558 0
 2629 0012 0E94 0000 		call eeconfig_is_enabled
 2630               	.LVL339:
 2631 0016 8111      		cpse r24,__zero_reg__
 2632 0018 00C0      		rjmp .L192
 2633               		.loc 1 558 0 is_stmt 0 discriminator 1
 2634 001a 0E94 0000 		call eeconfig_init
 2635               	.LVL340:
 2636               	.L192:
 559:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     keymap_config.raw  = eeconfig_read_keymap();
 2637               		.loc 1 559 0 is_stmt 1
 2638 001e 0E94 0000 		call eeconfig_read_keymap
 2639               	.LVL341:
 2640 0022 90E0      		ldi r25,0
 2641 0024 9093 0000 		sts keymap_config+1,r25
 2642 0028 8093 0000 		sts keymap_config,r24
 560:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     keymap_config.nkro = 1;
 2643               		.loc 1 560 0
 2644 002c 8068      		ori r24,lo8(1<<7)
 2645 002e 8093 0000 		sts keymap_config,r24
 561:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     eeconfig_update_keymap(keymap_config.raw);
 2646               		.loc 1 561 0
 2647 0032 0E94 0000 		call eeconfig_update_keymap
 2648               	.LVL342:
 562:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     if (!plover) { toggle_plover(1); }
 2649               		.loc 1 562 0
 2650 0036 8091 0000 		lds r24,plover
 2651 003a 8111      		cpse r24,__zero_reg__
 2652 003c 00C0      		rjmp .L189
 2653               		.loc 1 562 0 is_stmt 0 discriminator 1
 2654 003e 81E0      		ldi r24,lo8(1)
 2655 0040 0C94 0000 		jmp toggle_plover
 2656               	.LVL343:
 2657               	.L189:
 2658               	/* epilogue start */
 563:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 564:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2659               		.loc 1 564 0 is_stmt 1
 2660 0044 0895      		ret
 2661               		.cfi_endproc
 2662               	.LFE152:
 2664               		.section	.text.steno_exit,"ax",@progbits
 2665               	.global	steno_exit
 2667               	steno_exit:
 2668               	.LFB153:
 565:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** 
 566:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** void steno_exit(keyrecord_t *record)
 567:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** {
 2669               		.loc 1 567 0
 2670               		.cfi_startproc
 2671               	.LVL344:
 2672               	/* prologue: function */
 2673               	/* frame size = 0 */
 2674               	/* stack size = 0 */
 2675               	.L__stack_usage = 0
 568:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   if (record->event.pressed) {
 2676               		.loc 1 568 0
 2677 0000 FC01      		movw r30,r24
 2678 0002 8281      		ldd r24,Z+2
 2679               	.LVL345:
 2680 0004 8823      		tst r24
 2681 0006 01F0      		breq .L194
 569:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     base_layer();
 2682               		.loc 1 569 0
 2683 0008 0E94 0000 		call base_layer
 2684               	.LVL346:
 570:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****     toggle_plover(0);
 2685               		.loc 1 570 0
 2686 000c 80E0      		ldi r24,0
 2687 000e 0C94 0000 		jmp toggle_plover
 2688               	.LVL347:
 2689               	.L194:
 2690               	/* epilogue start */
 571:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c ****   }
 572:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/keycode_functions.c **** }
 2691               		.loc 1 572 0
 2692 0012 0895      		ret
 2693               		.cfi_endproc
 2694               	.LFE153:
 2696               		.section	.text.process_record_user,"ax",@progbits
 2697               	.global	process_record_user
 2699               	process_record_user:
 2700               	.LFB154:
 2701               		.file 4 "keyboards/splitography/keymaps/thumbh/keymap.c"
   1:keyboards/splitography/keymaps/thumbh/keymap.c **** // This is the canonical layout file for the Quantum project. If you want to add another keyboard,
   2:keyboards/splitography/keymaps/thumbh/keymap.c **** // this is the style you want to emulate.
   3:keyboards/splitography/keymaps/thumbh/keymap.c **** //
   4:keyboards/splitography/keymaps/thumbh/keymap.c **** // To flash splitography firmware
   5:keyboards/splitography/keymaps/thumbh/keymap.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
   6:keyboards/splitography/keymaps/thumbh/keymap.c **** //   Reset keyboard or press hw reset button on base (hole)
   7:keyboards/splitography/keymaps/thumbh/keymap.c **** //
   8:keyboards/splitography/keymaps/thumbh/keymap.c **** //   cd qmk_firmware/keyboards/splitography
   9:keyboards/splitography/keymaps/thumbh/keymap.c **** //   sudo make KEYMAP=<keymap> dfu
  10:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  11:keyboards/splitography/keymaps/thumbh/keymap.c **** //   sudo make clean           (good practice before flashing)
  12:keyboards/splitography/keymaps/thumbh/keymap.c **** //   sudo make KEYMAP=<keymap> (to compile check)
  13:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  14:keyboards/splitography/keymaps/thumbh/keymap.c **** // Package requirements (for arch linux)
  15:keyboards/splitography/keymaps/thumbh/keymap.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
  16:keyboards/splitography/keymaps/thumbh/keymap.c **** //   avr-gcc-atmel
  17:keyboards/splitography/keymaps/thumbh/keymap.c **** //   avr-libc-atmel
  18:keyboards/splitography/keymaps/thumbh/keymap.c **** //   dfu-programmer
  19:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  20:keyboards/splitography/keymaps/thumbh/keymap.c **** // Notes
  21:keyboards/splitography/keymaps/thumbh/keymap.c **** // ▔▔▔▔▔
  22:keyboards/splitography/keymaps/thumbh/keymap.c **** //   ** E R G O   W I D E   S P L I T ** Layout
  23:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  24:keyboards/splitography/keymaps/thumbh/keymap.c **** //   Autocompletion tap dance key pairs (),[],{} are available from the
  25:keyboards/splitography/keymaps/thumbh/keymap.c **** //   number/symbol layer, as well as, numerous (un)shift key values
  26:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  27:keyboards/splitography/keymaps/thumbh/keymap.c **** //   #define PRIVATE_STRING includes private_string.h, a user defined code
  28:keyboards/splitography/keymaps/thumbh/keymap.c **** //   block for the PRIV tap dance e.g. SEND_STRING("secret messape"),
  29:keyboards/splitography/keymaps/thumbh/keymap.c **** //   see function private()
  30:keyboards/splitography/keymaps/thumbh/keymap.c **** ///
  31:keyboards/splitography/keymaps/thumbh/keymap.c **** // Code
  32:keyboards/splitography/keymaps/thumbh/keymap.c **** // ▔▔▔▔
  33:keyboards/splitography/keymaps/thumbh/keymap.c **** //   This source is shamelessly based on the "default" planck layout
  34:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  35:keyboards/splitography/keymaps/thumbh/keymap.c **** //   #ifdef/#endif block structures are not indented, as syntax highlighting
  36:keyboards/splitography/keymaps/thumbh/keymap.c **** //   in vim is sufficient for identification
  37:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  38:keyboards/splitography/keymaps/thumbh/keymap.c **** //   c++ commenting style is used throughout
  39:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  40:keyboards/splitography/keymaps/thumbh/keymap.c **** // Change history
  41:keyboards/splitography/keymaps/thumbh/keymap.c **** // ▔▔▔▔▔▔▔▔▔▔▔▔▔▔
  42:keyboards/splitography/keymaps/thumbh/keymap.c **** //   See http://thedarnedestthing.com/colophon
  43:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  44:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  45:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  46:keyboards/splitography/keymaps/thumbh/keymap.c **** //                === N O T E ===
  47:keyboards/splitography/keymaps/thumbh/keymap.c **** //
  48:keyboards/splitography/keymaps/thumbh/keymap.c **** // sudo CPATH=<keymap.c directory>/common make ...
  49:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  50:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  51:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "config.h"
  52:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "splitography.h"
  53:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "action_layer.h"
  54:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef STENO_ENABLE
  55:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "keymap_steno.h"
  56:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
  57:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef AUDIO_ENABLE
  58:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "audio.h"
  59:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
  60:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "eeconfig.h"
  61:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  62:keyboards/splitography/keymaps/thumbh/keymap.c **** extern keymap_config_t keymap_config;
  63:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  64:keyboards/splitography/keymaps/thumbh/keymap.c **** enum splitography_layers {
  65:keyboards/splitography/keymaps/thumbh/keymap.c ****   _BASE = 0
  66:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_SHIFT
  67:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_LSHIFT
  68:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_RSHIFT
  69:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_LSYMBOL
  70:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_RSYMBOL
  71:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_PLOVER
  72:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_NUMBER
  73:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_FNCKEY
  74:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_MOUSE
  75:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_EDIT
  76:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
  77:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_TTNUMBER
  78:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_TTREGEX
  79:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_TTFNCKEY
  80:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_TTCURSOR
  81:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_TTMOUSE
  82:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
  83:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,_END_LAYERS
  84:keyboards/splitography/keymaps/thumbh/keymap.c **** };
  85:keyboards/splitography/keymaps/thumbh/keymap.c **** 
  86:keyboards/splitography/keymaps/thumbh/keymap.c **** enum splitography_keycodes {
  87:keyboards/splitography/keymaps/thumbh/keymap.c ****   BASE = SAFE_RANGE
  88:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,BASE1
  89:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,BASE2
  90:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,PLOVER
  91:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,SM_G      // pseudo MT   (MOD_LALT | MOD_LSFT, S(KC_G)) for shifted key-codes, see process_record
  92:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,SA_PERC   // pseudo ALT_T(S(KC_5))                      for shifted key-codes, see process_record
  93:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,SG_TILD   // pseudo GUI_T(S(KC_GRV))                    for shifted key-codes, see process_record
  94:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,SL_DEL    // pseudo LT   (_MOUSE, KC_DEL)               for shifted key-codes, see process_record
  95:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,SL_TAB    // pseudo LT   (_MOUSE, S(KC_TAB))
  96:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
  97:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,TT_ESC
  98:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
  99:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef STENO_ENABLE
 100:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,PS_STNA = STN_A
 101:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,PS_STNO = STN_O
 102:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,PS_STNE = STN_E
 103:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,PS_STNU = STN_U
 104:keyboards/splitography/keymaps/thumbh/keymap.c **** #else
 105:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,LT_C    = LT (_LSYMBOL, KC_C)
 106:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,LT_V    = LT (_NUMBER,  KC_V)
 107:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,LT_N    = LT (_FNCKEY,  KC_N)
 108:keyboards/splitography/keymaps/thumbh/keymap.c ****  ,LT_M    = LT (_RSYMBOL, KC_M)
 109:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 110:keyboards/splitography/keymaps/thumbh/keymap.c **** };
 111:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 112:keyboards/splitography/keymaps/thumbh/keymap.c **** // modifier keys
 113:keyboards/splitography/keymaps/thumbh/keymap.c **** #define AT_B    ALT_T(KC_B)
 114:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CT_C    CTL_T(KC_C)
 115:keyboards/splitography/keymaps/thumbh/keymap.c **** #define MT_E    MT   (MOD_LCTL | MOD_LALT, KC_E)
 116:keyboards/splitography/keymaps/thumbh/keymap.c **** #define ST_A    SFT_T(KC_A)
 117:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef HOME_MODS
 118:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_Q  GUI_T(KC_Q)
 119:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_I  CTL_T(KC_I)
 120:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_E  ALT_T(KC_E)
 121:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_A  SFT_T(KC_A)
 122:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_T  SFT_T(KC_T)
 123:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_R  ALT_T(KC_R)
 124:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_S  CTL_T(KC_S)
 125:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_W  GUI_T(KC_W)
 126:keyboards/splitography/keymaps/thumbh/keymap.c **** #else
 127:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_Q  KC_Q
 128:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_I  KC_I
 129:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_E  KC_E
 130:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_A  KC_A
 131:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_T  KC_T
 132:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_R  KC_R
 133:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_S  KC_S
 134:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HOME_W  KC_W
 135:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 136:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 137:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "tapdance.h"
 138:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 139:keyboards/splitography/keymaps/thumbh/keymap.c **** // keycodes
 140:keyboards/splitography/keymaps/thumbh/keymap.c **** #define ___x___ KC_TRNS
 141:keyboards/splitography/keymaps/thumbh/keymap.c **** #define ___fn__ KC_TRNS
 142:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef _______
 143:keyboards/splitography/keymaps/thumbh/keymap.c **** #undef _______
 144:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 145:keyboards/splitography/keymaps/thumbh/keymap.c **** #define _______ KC_NO
 146:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 147:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef HASKELL
 148:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_COLN TD_COLN
 149:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_LT   TD_LT
 150:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_GT   TD_GT
 151:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_EQL  TD_EQL
 152:keyboards/splitography/keymaps/thumbh/keymap.c **** #else
 153:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_COLN KC_COLN
 154:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_LT   KC_LT
 155:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_GT   KC_GT
 156:keyboards/splitography/keymaps/thumbh/keymap.c **** #define HS_EQL  KC_EQL
 157:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 158:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 159:keyboards/splitography/keymaps/thumbh/keymap.c **** #define COPY    LCTL(KC_C)
 160:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CUT     LCTL(KC_X)
 161:keyboards/splitography/keymaps/thumbh/keymap.c **** #define EOT     LCTL(KC_D)
 162:keyboards/splitography/keymaps/thumbh/keymap.c **** #define NAK     LCTL(KC_U)
 163:keyboards/splitography/keymaps/thumbh/keymap.c **** #define PASTE   LCTL(KC_V)
 164:keyboards/splitography/keymaps/thumbh/keymap.c **** #define UNDO    LCTL(KC_Z)
 165:keyboards/splitography/keymaps/thumbh/keymap.c **** #define TMCOPY  LALT(LCTL(KC_C))
 166:keyboards/splitography/keymaps/thumbh/keymap.c **** #define TMPASTE LALT(LCTL(KC_V))
 167:keyboards/splitography/keymaps/thumbh/keymap.c **** #define LT_BSPC LT  (_RSYMBOL, KC_BSPC)     // see process_record_user() for extended handling
 168:keyboards/splitography/keymaps/thumbh/keymap.c **** #define LT_DEL  LT  (_EDIT, KC_DEL)
 169:keyboards/splitography/keymaps/thumbh/keymap.c **** #define LT_ESC  LT  (_LSYMBOL, KC_ESC)
 170:keyboards/splitography/keymaps/thumbh/keymap.c **** #define LT_H    LT  (_LSHIFT, KC_H)
 171:keyboards/splitography/keymaps/thumbh/keymap.c **** #define OS_ALT  OSM (MOD_LALT)
 172:keyboards/splitography/keymaps/thumbh/keymap.c **** #define OS_CTL  OSM (MOD_LCTL)
 173:keyboards/splitography/keymaps/thumbh/keymap.c **** #define OS_GUI  OSM (MOD_LGUI)
 174:keyboards/splitography/keymaps/thumbh/keymap.c **** #define OS_SFT  OSM (MOD_LSFT)
 175:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 176:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
 177:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_TL TT  (_TTFNCKEY)
 178:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_TR     KC_CAPS
 179:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_HL TT  (_TTCURSOR)
 180:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_HR TT  (_TTMOUSE)
 181:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_BL TT  (_TTNUMBER)
 182:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_BR TT  (_TTREGEX)
 183:keyboards/splitography/keymaps/thumbh/keymap.c **** #else
 184:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_TL OSM (MOD_LALT | MOD_LCTL)
 185:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_TR OSM (MOD_LGUI | MOD_LCTL)
 186:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_HL OSM (MOD_LALT | MOD_LSFT)
 187:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_HR OSM (MOD_LGUI | MOD_LSFT)
 188:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_BL TD  (_CAPS)
 189:keyboards/splitography/keymaps/thumbh/keymap.c **** #define CNTR_BR OSM (MOD_LSFT | MOD_LCTL)
 190:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 191:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 192:keyboards/splitography/keymaps/thumbh/keymap.c **** // ........................................................ Default Alpha Layout
 193:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 194:keyboards/splitography/keymaps/thumbh/keymap.c **** const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
 195:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 196:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "base_layout.h"
 197:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "steno_layout.h"
 198:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 199:keyboards/splitography/keymaps/thumbh/keymap.c **** // ...................................................... Number / Function Keys
 200:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 201:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "number_fkey_layout.h"
 202:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 203:keyboards/splitography/keymaps/thumbh/keymap.c **** // ......................................................... Symbol / Navigation
 204:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 205:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "symbol_guifn_layout.h"
 206:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 207:keyboards/splitography/keymaps/thumbh/keymap.c **** // ............................................................... Toggle Layers
 208:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 209:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
 210:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "toggle_layout.h"
 211:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 212:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 213:keyboards/splitography/keymaps/thumbh/keymap.c **** // ......................................................... Short Cuts / Adjust
 214:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 215:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "chord_layout.h"
 216:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 217:keyboards/splitography/keymaps/thumbh/keymap.c **** };
 218:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 219:keyboards/splitography/keymaps/thumbh/keymap.c **** // ...................................................................... Sounds
 220:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 221:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "sounds.h"
 222:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 223:keyboards/splitography/keymaps/thumbh/keymap.c **** // ........................................................... User Keycode Trap
 224:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 225:keyboards/splitography/keymaps/thumbh/keymap.c **** #include "keycode_functions.c"
 226:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 227:keyboards/splitography/keymaps/thumbh/keymap.c **** #define BASE_1  1
 228:keyboards/splitography/keymaps/thumbh/keymap.c **** #define BASE_2  2
 229:keyboards/splitography/keymaps/thumbh/keymap.c **** #define BASE_12 3
 230:keyboards/splitography/keymaps/thumbh/keymap.c **** static uint8_t base_n    = 0;
 231:keyboards/splitography/keymaps/thumbh/keymap.c **** static uint8_t down_rule = 0;               // (1) substitute keycode (2) keycode+shift, see tap_lt
 232:keyboards/splitography/keymaps/thumbh/keymap.c **** 
 233:keyboards/splitography/keymaps/thumbh/keymap.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record)
 234:keyboards/splitography/keymaps/thumbh/keymap.c **** {
 2702               		.loc 4 234 0
 2703               		.cfi_startproc
 2704               	.LVL348:
 2705 0000 CF92      		push r12
 2706               	.LCFI79:
 2707               		.cfi_def_cfa_offset 3
 2708               		.cfi_offset 12, -2
 2709 0002 DF92      		push r13
 2710               	.LCFI80:
 2711               		.cfi_def_cfa_offset 4
 2712               		.cfi_offset 13, -3
 2713 0004 EF92      		push r14
 2714               	.LCFI81:
 2715               		.cfi_def_cfa_offset 5
 2716               		.cfi_offset 14, -4
 2717 0006 0F93      		push r16
 2718               	.LCFI82:
 2719               		.cfi_def_cfa_offset 6
 2720               		.cfi_offset 16, -5
 2721 0008 CF93      		push r28
 2722               	.LCFI83:
 2723               		.cfi_def_cfa_offset 7
 2724               		.cfi_offset 28, -6
 2725 000a DF93      		push r29
 2726               	.LCFI84:
 2727               		.cfi_def_cfa_offset 8
 2728               		.cfi_offset 29, -7
 2729               	/* prologue: function */
 2730               	/* frame size = 0 */
 2731               	/* stack size = 6 */
 2732               	.L__stack_usage = 6
 2733 000c EC01      		movw r28,r24
 2734 000e 6B01      		movw r12,r22
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   switch (keycode) {
 2735               		.loc 4 235 0
 2736 0010 CB3D      		cpi r28,-37
 2737 0012 8CE5      		ldi r24,92
 2738 0014 D807      		cpc r29,r24
 2739 0016 01F4      		brne .+2
 2740 0018 00C0      		rjmp .L198
 2741               	.LVL349:
 2742 001a 00F0      		brlo .+2
 2743 001c 00C0      		rjmp .L199
 2744 001e CA32      		cpi r28,42
 2745 0020 F5E4      		ldi r31,69
 2746 0022 DF07      		cpc r29,r31
 2747 0024 01F4      		brne .+2
 2748 0026 00C0      		rjmp .L200
 2749 0028 00F4      		brsh .L201
 2750 002a C933      		cpi r28,57
 2751 002c D105      		cpc r29,__zero_reg__
 2752 002e 01F4      		brne .+2
 2753 0030 00C0      		rjmp .L202
 2754 0032 00F4      		brsh .L203
 2755 0034 C633      		cpi r28,54
 2756 0036 D105      		cpc r29,__zero_reg__
 2757 0038 01F4      		brne .+2
 2758 003a 00C0      		rjmp .L204
 2759 003c C733      		cpi r28,55
 2760 003e D105      		cpc r29,__zero_reg__
 2761 0040 01F4      		brne .+2
 2762 0042 00C0      		rjmp .L205
 2763 0044 AB97      		sbiw r28,43
 2764 0046 01F0      		breq .+2
 2765 0048 00C0      		rjmp .L197
 236:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 237:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (record->event.pressed) {
 238:keyboards/splitography/keymaps/thumbh/keymap.c ****       base_n = base_n | BASE_1;
 239:keyboards/splitography/keymaps/thumbh/keymap.c ****       if (base_n == BASE_12) { base_layer(); }
 240:keyboards/splitography/keymaps/thumbh/keymap.c ****     }
 241:keyboards/splitography/keymaps/thumbh/keymap.c ****     else { base_n = base_n & ~BASE_1; }
 242:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 243:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE2:
 244:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (record->event.pressed) {
 245:keyboards/splitography/keymaps/thumbh/keymap.c ****       base_n = base_n | BASE_2;
 246:keyboards/splitography/keymaps/thumbh/keymap.c ****       if (base_n == BASE_12) { base_layer(); }
 247:keyboards/splitography/keymaps/thumbh/keymap.c ****     }
 248:keyboards/splitography/keymaps/thumbh/keymap.c ****     else { base_n = base_n & ~BASE_2; }
 249:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 250:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef HOME_MODS
 251:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_Q:
 252:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_W:
 253:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_LGUI);
 254:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 255:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_I:
 256:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_S:
 257:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_LCTL);
 258:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 259:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_E:
 260:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_R:
 261:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_LALT);
 262:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 263:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_A:
 264:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_LSFT);
 265:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 266:keyboards/splitography/keymaps/thumbh/keymap.c ****   case HOME_T:
 267:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_RSFT);              // note: SFT_T actually uses KC_LSFT
 268:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 269:keyboards/splitography/keymaps/thumbh/keymap.c ****   // special shift layer mappings
 270:keyboards/splitography/keymaps/thumbh/keymap.c ****   case KC_DOT:
 271:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (record->event.pressed) { down_rule = 2; } // dot+space/enter+shift shortcut, see tap_lt()
 272:keyboards/splitography/keymaps/thumbh/keymap.c ****     else                       { down_rule = 0; }
 273:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (map_shift(record, KC_RSFT, SHIFT, KC_GRV)) { return false; }
 274:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 275:keyboards/splitography/keymaps/thumbh/keymap.c ****   case KC_QUES:
 276:keyboards/splitography/keymaps/thumbh/keymap.c ****     down_rule = 0;                          // trap layer switching timimg issue between . and ?
 277:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 278:keyboards/splitography/keymaps/thumbh/keymap.c ****   case KC_COMM:
 279:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (map_shift(record, KC_RSFT, SHIFT, KC_1)) { return false; }
 280:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 281:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 282:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
 283:keyboards/splitography/keymaps/thumbh/keymap.c ****   case TT_ESC:
 284:keyboards/splitography/keymaps/thumbh/keymap.c ****     tt_clear();                             // exit TT layer
 285:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 286:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 287:keyboards/splitography/keymaps/thumbh/keymap.c ****   case KC_TAB:
 288:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (record->event.pressed) { down_rule = 1; } // tab+enter thumb roll, see tap_lt()
 2766               		.loc 4 288 0
 2767 004a FB01      		movw r30,r22
 2768 004c 8281      		ldd r24,Z+2
 2769 004e 8823      		tst r24
 2770 0050 01F4      		brne .+2
 2771 0052 00C0      		rjmp .L237
 2772               		.loc 4 288 0 is_stmt 0 discriminator 1
 2773 0054 81E0      		ldi r24,lo8(1)
 2774 0056 8093 0000 		sts down_rule,r24
 2775               	.L238:
 289:keyboards/splitography/keymaps/thumbh/keymap.c ****     else                       { down_rule = 0; }
 290:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (raise_number(record, LEFT)) { return false; }
 2776               		.loc 4 290 0 is_stmt 1
 2777 005a 61E0      		ldi r22,lo8(1)
 2778               	.LVL350:
 2779 005c C601      		movw r24,r12
 2780 005e 0E94 0000 		call raise_number
 2781               	.LVL351:
 2782 0062 00C0      		rjmp .L291
 2783               	.L203:
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2784               		.loc 4 235 0
 2785 0064 CB30      		cpi r28,11
 2786 0066 E2E4      		ldi r30,66
 2787 0068 DE07      		cpc r29,r30
 2788 006a 01F4      		brne .+2
 2789 006c 00C0      		rjmp .L207
 2790 006e C932      		cpi r28,41
 2791 0070 F4E4      		ldi r31,68
 2792 0072 DF07      		cpc r29,r31
 2793 0074 01F4      		brne .+2
 2794 0076 00C0      		rjmp .L208
 2795 0078 C833      		cpi r28,56
 2796 007a D240      		sbci r29,2
 2797 007c 01F4      		brne .L197
 276:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2798               		.loc 4 276 0
 2799 007e 1092 0000 		sts down_rule,__zero_reg__
 2800 0082 00C0      		rjmp .L243
 2801               	.L201:
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2802               		.loc 4 235 0
 2803 0084 C430      		cpi r28,4
 2804 0086 E7E5      		ldi r30,87
 2805 0088 DE07      		cpc r29,r30
 2806 008a 01F4      		brne .+2
 2807 008c 00C0      		rjmp .L210
 2808 008e 00F4      		brsh .L211
 2809 0090 C430      		cpi r28,4
 2810 0092 85E5      		ldi r24,85
 2811 0094 D807      		cpc r29,r24
 2812 0096 01F4      		brne .+2
 2813 0098 00C0      		rjmp .L212
 2814 009a C830      		cpi r28,8
 2815 009c E5E5      		ldi r30,85
 2816 009e DE07      		cpc r29,r30
 2817 00a0 01F4      		brne .+2
 2818 00a2 00C0      		rjmp .L213
 2819 00a4 C130      		cpi r28,1
 2820 00a6 D545      		sbci r29,85
 2821 00a8 01F4      		brne .L197
 2822               	.L214:
 257:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2823               		.loc 4 257 0
 2824 00aa 60EE      		ldi r22,lo8(-32)
 2825 00ac 70E0      		ldi r23,0
 2826 00ae 00C0      		rjmp .L294
 2827               	.L211:
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2828               		.loc 4 235 0
 2829 00b0 CA30      		cpi r28,10
 2830 00b2 87E5      		ldi r24,87
 2831 00b4 D807      		cpc r29,r24
 2832 00b6 01F4      		brne .+2
 2833 00b8 00C0      		rjmp .L215
 2834 00ba 00F0      		brlo .L197
 2835 00bc CE01      		movw r24,r28
 2836 00be 8B50      		subi r24,11
 2837 00c0 9845      		sbci r25,88
 2838 00c2 0597      		sbiw r24,5
 2839 00c4 00F4      		brsh .+2
 2840 00c6 00C0      		rjmp .L202
 2841               	.L197:
 291:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 292:keyboards/splitography/keymaps/thumbh/keymap.c ****   case OS_ALT:
 293:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_LALT);
 294:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 295:keyboards/splitography/keymaps/thumbh/keymap.c ****   case OS_CTL:
 296:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_LCTL);
 297:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 298:keyboards/splitography/keymaps/thumbh/keymap.c ****   case OS_GUI:
 299:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_mods(record, KC_LGUI);
 300:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 301:keyboards/splitography/keymaps/thumbh/keymap.c ****   case SM_G:
 302:keyboards/splitography/keymaps/thumbh/keymap.c ****     mt_shift(record, KC_LALT, KC_LSFT, KC_G);
 303:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 304:keyboards/splitography/keymaps/thumbh/keymap.c ****   case SA_PERC:
 305:keyboards/splitography/keymaps/thumbh/keymap.c ****     mt_shift(record, KC_LALT, 0, KC_5);
 306:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 307:keyboards/splitography/keymaps/thumbh/keymap.c ****   case SG_TILD:
 308:keyboards/splitography/keymaps/thumbh/keymap.c ****     mt_shift(record, KC_LGUI, 0, KC_GRV);
 309:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 310:keyboards/splitography/keymaps/thumbh/keymap.c ****   case LT_H:
 311:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_SPC)) { return false; }
 312:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (raise_number(record, RIGHT)) { return false; }
 313:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _LSHIFT);
 314:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 315:keyboards/splitography/keymaps/thumbh/keymap.c ****   case TD_ENT:
 316:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (record->event.pressed) { tap_rule = down_rule; } // down_rule persistance for tap_lt()
 317:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 318:keyboards/splitography/keymaps/thumbh/keymap.c ****   case TD_SPC:
 319:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (record->event.pressed) { tap_rule = down_rule; } // down_rule persistance for tap_lt()
 320:keyboards/splitography/keymaps/thumbh/keymap.c ****     // trap potential repeating enter caused by tap dance definition
 321:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_ENT)) { unregister_code(KC_ENT); return false; }
 322:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _RSHIFT);
 323:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 324:keyboards/splitography/keymaps/thumbh/keymap.c ****   case LT_ESC:
 325:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (map_shift(record, KC_LSFT, NOSHIFT, KC_TAB)) { return false; }
 326:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (raise_number(record, LEFT)) { return false; }
 327:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
 328:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (tt_keycode != 0) {
 329:keyboards/splitography/keymaps/thumbh/keymap.c ****       tt_clear();                           // exit TT layer
 330:keyboards/splitography/keymaps/thumbh/keymap.c ****       return false;
 331:keyboards/splitography/keymaps/thumbh/keymap.c ****     }
 332:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 333:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _LSYMBOL);
 334:keyboards/splitography/keymaps/thumbh/keymap.c ****     thumb_roll(record, LEFT, 0, 0, _LSYMBOL, _RSYMBOL);
 335:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 336:keyboards/splitography/keymaps/thumbh/keymap.c ****   case SL_TAB:
 337:keyboards/splitography/keymaps/thumbh/keymap.c ****     thumb_roll(record, LEFT, SHIFT, KC_TAB, _MOUSE, _RSYMBOL);
 338:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 339:keyboards/splitography/keymaps/thumbh/keymap.c ****   case SL_DEL:
 340:keyboards/splitography/keymaps/thumbh/keymap.c ****     thumb_roll(record, RIGHT, NOSHIFT, KC_DEL, _MOUSE, _LSYMBOL);
 341:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 342:keyboards/splitography/keymaps/thumbh/keymap.c ****   case LT_BSPC:
 343:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (map_shift(record, KC_RSFT, NOSHIFT, KC_DEL)) { return false; }
 344:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _RSYMBOL);
 345:keyboards/splitography/keymaps/thumbh/keymap.c ****     thumb_roll(record, RIGHT, 0, 0, _RSYMBOL, _LSYMBOL);
 346:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 347:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
 348:keyboards/splitography/keymaps/thumbh/keymap.c ****   case CNTR_TL:
 349:keyboards/splitography/keymaps/thumbh/keymap.c ****   case CNTR_TR:
 350:keyboards/splitography/keymaps/thumbh/keymap.c ****   case CNTR_HL:
 351:keyboards/splitography/keymaps/thumbh/keymap.c ****   case CNTR_HR:
 352:keyboards/splitography/keymaps/thumbh/keymap.c ****   case CNTR_BL:
 353:keyboards/splitography/keymaps/thumbh/keymap.c ****   case CNTR_BR:
 354:keyboards/splitography/keymaps/thumbh/keymap.c ****     // return to base layer first if different TT layer selected
 355:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (tt_keycode != keycode && tt_keycode != 0) { tt_clear(); }
 356:keyboards/splitography/keymaps/thumbh/keymap.c ****     tt_escape(record, keycode);
 357:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 358:keyboards/splitography/keymaps/thumbh/keymap.c **** #endif
 359:keyboards/splitography/keymaps/thumbh/keymap.c **** // #ifdef STENO_ENABLE
 360:keyboards/splitography/keymaps/thumbh/keymap.c **** //   case PS_STNA:
 361:keyboards/splitography/keymaps/thumbh/keymap.c **** //     stn_layer(record, STN_A, _LSYMBOL);
 362:keyboards/splitography/keymaps/thumbh/keymap.c **** //     break;
 363:keyboards/splitography/keymaps/thumbh/keymap.c **** //   case PS_STNO:
 364:keyboards/splitography/keymaps/thumbh/keymap.c **** //     stn_layer(record, STN_O, _NUMBER);
 365:keyboards/splitography/keymaps/thumbh/keymap.c **** //     break;
 366:keyboards/splitography/keymaps/thumbh/keymap.c **** //   case PS_STNE:
 367:keyboards/splitography/keymaps/thumbh/keymap.c **** //     stn_layer(record, STN_E, _FNCKEY);
 368:keyboards/splitography/keymaps/thumbh/keymap.c **** //     break;
 369:keyboards/splitography/keymaps/thumbh/keymap.c **** //   case PS_STNU:
 370:keyboards/splitography/keymaps/thumbh/keymap.c **** //     stn_layer(record, STN_U, _RSYMBOL);
 371:keyboards/splitography/keymaps/thumbh/keymap.c **** //     break;
 372:keyboards/splitography/keymaps/thumbh/keymap.c **** // #endif
 373:keyboards/splitography/keymaps/thumbh/keymap.c ****   case PLOVER:
 374:keyboards/splitography/keymaps/thumbh/keymap.c ****     steno(record);
 375:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 376:keyboards/splitography/keymaps/thumbh/keymap.c ****   default:
 377:keyboards/splitography/keymaps/thumbh/keymap.c ****     key_timer = 0;                          // regular keycode, clear timer in keycode_functions.h
 2842               		.loc 4 377 0
 2843 00c8 1092 0000 		sts key_timer+1,__zero_reg__
 2844 00cc 1092 0000 		sts key_timer,__zero_reg__
 2845 00d0 00C0      		rjmp .L243
 2846               	.L199:
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2847               		.loc 4 235 0
 2848 00d2 C33E      		cpi r28,-29
 2849 00d4 FCE5      		ldi r31,92
 2850 00d6 DF07      		cpc r29,r31
 2851 00d8 01F4      		brne .+2
 2852 00da 00C0      		rjmp .L216
 2853 00dc 00F4      		brsh .L217
 2854 00de CF3D      		cpi r28,-33
 2855 00e0 ECE5      		ldi r30,92
 2856 00e2 DE07      		cpc r29,r30
 2857 00e4 01F4      		brne .+2
 2858 00e6 00C0      		rjmp .L218
 2859 00e8 00F4      		brsh .L219
 2860 00ea CD3D      		cpi r28,-35
 2861 00ec 8CE5      		ldi r24,92
 2862 00ee D807      		cpc r29,r24
 2863 00f0 01F4      		brne .+2
 2864 00f2 00C0      		rjmp .L220
 2865 00f4 00F4      		brsh .+2
 2866 00f6 00C0      		rjmp .L286
 302:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2867               		.loc 4 302 0
 2868 00f8 2AE0      		ldi r18,lo8(10)
 2869 00fa 30E0      		ldi r19,0
 2870 00fc 41EE      		ldi r20,lo8(-31)
 2871 00fe 50E0      		ldi r21,0
 2872               	.L298:
 305:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2873               		.loc 4 305 0
 2874 0100 62EE      		ldi r22,lo8(-30)
 2875 0102 70E0      		ldi r23,0
 2876               	.L296:
 308:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2877               		.loc 4 308 0
 2878 0104 C601      		movw r24,r12
 2879 0106 0E94 0000 		call mt_shift
 2880               	.LVL352:
 2881 010a 00C0      		rjmp .L243
 2882               	.L219:
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2883               		.loc 4 235 0
 2884 010c C13E      		cpi r28,-31
 2885 010e FCE5      		ldi r31,92
 2886 0110 DF07      		cpc r29,r31
 2887 0112 01F4      		brne .+2
 2888 0114 00C0      		rjmp .L223
 2889 0116 00F4      		brsh .+2
 2890 0118 00C0      		rjmp .L287
 337:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2891               		.loc 4 337 0
 2892 011a 25E0      		ldi r18,lo8(5)
 2893 011c E22E      		mov r14,r18
 2894 011e 09E0      		ldi r16,lo8(9)
 2895 0120 2BE2      		ldi r18,lo8(43)
 2896 0122 30E0      		ldi r19,0
 2897 0124 41E0      		ldi r20,lo8(1)
 2898 0126 00C0      		rjmp .L299
 2899               	.L217:
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2900               		.loc 4 235 0
 2901 0128 C731      		cpi r28,23
 2902 012a E2E6      		ldi r30,98
 2903 012c DE07      		cpc r29,r30
 2904 012e 01F4      		brne .+2
 2905 0130 00C0      		rjmp .L226
 2906 0132 00F4      		brsh .L227
 2907 0134 C631      		cpi r28,22
 2908 0136 81E6      		ldi r24,97
 2909 0138 D807      		cpc r29,r24
 2910 013a 01F4      		brne .+2
 2911 013c 00C0      		rjmp .L214
 264:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2912               		.loc 4 264 0
 2913 013e 61EE      		ldi r22,lo8(-31)
 2914 0140 70E0      		ldi r23,0
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2915               		.loc 4 235 0
 2916 0142 C430      		cpi r28,4
 2917 0144 E2E6      		ldi r30,98
 2918 0146 DE07      		cpc r29,r30
 2919 0148 01F0      		breq .L294
 2920 014a CC30      		cpi r28,12
 2921 014c D146      		sbci r29,97
 2922 014e 01F0      		breq .+2
 2923 0150 00C0      		rjmp .L197
 2924 0152 00C0      		rjmp .L214
 2925               	.L227:
 2926 0154 C531      		cpi r28,21
 2927 0156 84E6      		ldi r24,100
 2928 0158 D807      		cpc r29,r24
 2929 015a 01F0      		breq .L212
 2930 015c 00F4      		brsh .L229
 2931 015e C830      		cpi r28,8
 2932 0160 D446      		sbci r29,100
 2933 0162 01F0      		breq .+2
 2934 0164 00C0      		rjmp .L197
 2935               	.L212:
 261:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2936               		.loc 4 261 0
 2937 0166 62EE      		ldi r22,lo8(-30)
 2938 0168 70E0      		ldi r23,0
 2939 016a 00C0      		rjmp .L294
 2940               	.L229:
 235:keyboards/splitography/keymaps/thumbh/keymap.c ****   case BASE1:
 2941               		.loc 4 235 0
 2942 016c C431      		cpi r28,20
 2943 016e 88E6      		ldi r24,104
 2944 0170 D807      		cpc r29,r24
 2945 0172 01F0      		breq .L213
 2946 0174 CA31      		cpi r28,26
 2947 0176 D846      		sbci r29,104
 2948 0178 01F0      		breq .+2
 2949 017a 00C0      		rjmp .L197
 2950               	.L213:
 253:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2951               		.loc 4 253 0
 2952 017c 63EE      		ldi r22,lo8(-29)
 2953 017e 70E0      		ldi r23,0
 2954               	.L294:
 267:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 2955               		.loc 4 267 0
 2956 0180 C601      		movw r24,r12
 2957 0182 0E94 0000 		call tap_mods
 2958               	.LVL353:
 2959               	.L243:
 378:keyboards/splitography/keymaps/thumbh/keymap.c ****   }
 379:keyboards/splitography/keymaps/thumbh/keymap.c ****   return true;
 2960               		.loc 4 379 0
 2961 0186 C1E0      		ldi r28,lo8(1)
 2962 0188 00C0      		rjmp .L196
 2963               	.LVL354:
 2964               	.L198:
 237:keyboards/splitography/keymaps/thumbh/keymap.c ****       base_n = base_n | BASE_1;
 2965               		.loc 4 237 0
 2966 018a FB01      		movw r30,r22
 2967 018c C281      		ldd r28,Z+2
 2968               	.LVL355:
 2969 018e 8091 0000 		lds r24,base_n
 2970 0192 CC23      		tst r28
 2971 0194 01F0      		breq .L230
 238:keyboards/splitography/keymaps/thumbh/keymap.c ****       if (base_n == BASE_12) { base_layer(); }
 2972               		.loc 4 238 0
 2973 0196 8160      		ori r24,lo8(1)
 2974               	.L288:
 2975 0198 8093 0000 		sts base_n,r24
 239:keyboards/splitography/keymaps/thumbh/keymap.c ****     }
 2976               		.loc 4 239 0
 2977 019c 8330      		cpi r24,lo8(3)
 2978 019e 01F0      		breq .L231
 2979               	.L289:
 375:keyboards/splitography/keymaps/thumbh/keymap.c ****   default:
 2980               		.loc 4 375 0
 2981 01a0 C0E0      		ldi r28,0
 2982 01a2 00C0      		rjmp .L196
 2983               	.L231:
 239:keyboards/splitography/keymaps/thumbh/keymap.c ****     }
 2984               		.loc 4 239 0 discriminator 1
 2985 01a4 0E94 0000 		call base_layer
 2986               	.LVL356:
 2987 01a8 00C0      		rjmp .L289
 2988               	.L230:
 241:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 2989               		.loc 4 241 0
 2990 01aa 8E7F      		andi r24,lo8(-2)
 2991               	.L290:
 248:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 2992               		.loc 4 248 0
 2993 01ac 8093 0000 		sts base_n,r24
 2994               	.L196:
 380:keyboards/splitography/keymaps/thumbh/keymap.c **** }
 2995               		.loc 4 380 0
 2996 01b0 8C2F      		mov r24,r28
 2997               	/* epilogue start */
 2998 01b2 DF91      		pop r29
 2999 01b4 CF91      		pop r28
 3000 01b6 0F91      		pop r16
 3001 01b8 EF90      		pop r14
 3002 01ba DF90      		pop r13
 3003 01bc CF90      		pop r12
 3004               	.LVL357:
 3005 01be 0895      		ret
 3006               	.LVL358:
 3007               	.L286:
 244:keyboards/splitography/keymaps/thumbh/keymap.c ****       base_n = base_n | BASE_2;
 3008               		.loc 4 244 0
 3009 01c0 FB01      		movw r30,r22
 3010 01c2 C281      		ldd r28,Z+2
 3011               	.LVL359:
 3012 01c4 8091 0000 		lds r24,base_n
 3013 01c8 CC23      		tst r28
 3014 01ca 01F0      		breq .L233
 245:keyboards/splitography/keymaps/thumbh/keymap.c ****       if (base_n == BASE_12) { base_layer(); }
 3015               		.loc 4 245 0
 3016 01cc 8260      		ori r24,lo8(2)
 3017 01ce 00C0      		rjmp .L288
 3018               	.L233:
 248:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 3019               		.loc 4 248 0
 3020 01d0 8D7F      		andi r24,lo8(-3)
 3021 01d2 00C0      		rjmp .L290
 3022               	.LVL360:
 3023               	.L226:
 267:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3024               		.loc 4 267 0
 3025 01d4 65EE      		ldi r22,lo8(-27)
 3026 01d6 70E0      		ldi r23,0
 3027 01d8 00C0      		rjmp .L294
 3028               	.L205:
 271:keyboards/splitography/keymaps/thumbh/keymap.c ****     else                       { down_rule = 0; }
 3029               		.loc 4 271 0
 3030 01da FB01      		movw r30,r22
 3031 01dc 8281      		ldd r24,Z+2
 3032 01de 8823      		tst r24
 3033 01e0 01F0      		breq .L235
 271:keyboards/splitography/keymaps/thumbh/keymap.c ****     else                       { down_rule = 0; }
 3034               		.loc 4 271 0 is_stmt 0 discriminator 1
 3035 01e2 82E0      		ldi r24,lo8(2)
 3036 01e4 8093 0000 		sts down_rule,r24
 3037               	.L236:
 273:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3038               		.loc 4 273 0 is_stmt 1
 3039 01e8 25E3      		ldi r18,lo8(53)
 3040 01ea 30E0      		ldi r19,0
 3041               	.L292:
 279:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3042               		.loc 4 279 0
 3043 01ec 41E0      		ldi r20,lo8(1)
 3044 01ee 65EE      		ldi r22,lo8(-27)
 3045 01f0 70E0      		ldi r23,0
 3046 01f2 C601      		movw r24,r12
 3047 01f4 0E94 0000 		call map_shift
 3048               	.LVL361:
 3049               	.L291:
 290:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3050               		.loc 4 290 0
 3051 01f8 C1E0      		ldi r28,lo8(1)
 3052               	.LVL362:
 3053 01fa C827      		eor r28,r24
 3054 01fc 00C0      		rjmp .L196
 3055               	.LVL363:
 3056               	.L235:
 272:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (map_shift(record, KC_RSFT, SHIFT, KC_GRV)) { return false; }
 3057               		.loc 4 272 0
 3058 01fe 1092 0000 		sts down_rule,__zero_reg__
 3059 0202 00C0      		rjmp .L236
 3060               	.L204:
 279:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3061               		.loc 4 279 0
 3062 0204 2EE1      		ldi r18,lo8(30)
 3063 0206 30E0      		ldi r19,0
 3064 0208 00C0      		rjmp .L292
 3065               	.L216:
 284:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 3066               		.loc 4 284 0
 3067 020a 0E94 0000 		call tt_clear
 3068               	.LVL364:
 3069 020e 00C0      		rjmp .L289
 3070               	.L237:
 289:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (raise_number(record, LEFT)) { return false; }
 3071               		.loc 4 289 0
 3072 0210 1092 0000 		sts down_rule,__zero_reg__
 3073 0214 00C0      		rjmp .L238
 3074               	.L218:
 305:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3075               		.loc 4 305 0
 3076 0216 22E2      		ldi r18,lo8(34)
 3077 0218 30E0      		ldi r19,0
 3078 021a 50E0      		ldi r21,0
 3079 021c 40E0      		ldi r20,0
 3080 021e 00C0      		rjmp .L298
 3081               	.L287:
 308:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3082               		.loc 4 308 0
 3083 0220 25E3      		ldi r18,lo8(53)
 3084 0222 30E0      		ldi r19,0
 3085 0224 50E0      		ldi r21,0
 3086 0226 40E0      		ldi r20,0
 3087 0228 63EE      		ldi r22,lo8(-29)
 3088 022a 70E0      		ldi r23,0
 3089 022c 00C0      		rjmp .L296
 3090               	.L207:
 311:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (raise_number(record, RIGHT)) { return false; }
 3091               		.loc 4 311 0
 3092 022e 2CE2      		ldi r18,lo8(44)
 3093 0230 30E0      		ldi r19,0
 3094 0232 40E0      		ldi r20,0
 3095 0234 61EE      		ldi r22,lo8(-31)
 3096 0236 70E0      		ldi r23,0
 3097 0238 C601      		movw r24,r12
 3098 023a 0E94 0000 		call map_shift
 3099               	.LVL365:
 3100 023e 8111      		cpse r24,__zero_reg__
 3101 0240 00C0      		rjmp .L289
 312:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _LSHIFT);
 3102               		.loc 4 312 0
 3103 0242 62E0      		ldi r22,lo8(2)
 3104 0244 C601      		movw r24,r12
 3105 0246 0E94 0000 		call raise_number
 3106               	.LVL366:
 313:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3107               		.loc 4 313 0
 3108 024a 62E0      		ldi r22,lo8(2)
 312:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _LSHIFT);
 3109               		.loc 4 312 0
 3110 024c 8111      		cpse r24,__zero_reg__
 3111 024e 00C0      		rjmp .L289
 3112               	.L297:
 322:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3113               		.loc 4 322 0
 3114 0250 C601      		movw r24,r12
 3115 0252 0E94 0000 		call tap_layer
 3116               	.LVL367:
 3117 0256 00C0      		rjmp .L243
 3118               	.L210:
 316:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3119               		.loc 4 316 0
 3120 0258 FB01      		movw r30,r22
 3121 025a C281      		ldd r28,Z+2
 3122               	.LVL368:
 3123 025c CC23      		tst r28
 3124 025e 01F4      		brne .+2
 3125 0260 00C0      		rjmp .L243
 316:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3126               		.loc 4 316 0 is_stmt 0 discriminator 1
 3127 0262 8091 0000 		lds r24,down_rule
 3128 0266 8093 0000 		sts tap_rule,r24
 3129 026a 00C0      		rjmp .L196
 3130               	.LVL369:
 3131               	.L215:
 319:keyboards/splitography/keymaps/thumbh/keymap.c ****     // trap potential repeating enter caused by tap dance definition
 3132               		.loc 4 319 0 is_stmt 1
 3133 026c FB01      		movw r30,r22
 3134 026e 8281      		ldd r24,Z+2
 3135 0270 8823      		tst r24
 3136 0272 01F0      		breq .L239
 319:keyboards/splitography/keymaps/thumbh/keymap.c ****     // trap potential repeating enter caused by tap dance definition
 3137               		.loc 4 319 0 is_stmt 0 discriminator 1
 3138 0274 8091 0000 		lds r24,down_rule
 3139 0278 8093 0000 		sts tap_rule,r24
 3140               	.L239:
 321:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _RSHIFT);
 3141               		.loc 4 321 0 is_stmt 1
 3142 027c 28E2      		ldi r18,lo8(40)
 3143 027e 30E0      		ldi r19,0
 3144 0280 40E0      		ldi r20,0
 3145 0282 65EE      		ldi r22,lo8(-27)
 3146 0284 70E0      		ldi r23,0
 3147 0286 C601      		movw r24,r12
 3148 0288 0E94 0000 		call map_shift
 3149               	.LVL370:
 3150 028c 8823      		tst r24
 3151 028e 01F0      		breq .L240
 321:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _RSHIFT);
 3152               		.loc 4 321 0 is_stmt 0 discriminator 1
 3153 0290 88E2      		ldi r24,lo8(40)
 3154 0292 0E94 0000 		call unregister_code
 3155               	.LVL371:
 3156 0296 00C0      		rjmp .L289
 3157               	.L240:
 322:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3158               		.loc 4 322 0 is_stmt 1
 3159 0298 63E0      		ldi r22,lo8(3)
 3160 029a 00C0      		rjmp .L297
 3161               	.L208:
 325:keyboards/splitography/keymaps/thumbh/keymap.c ****     if (raise_number(record, LEFT)) { return false; }
 3162               		.loc 4 325 0
 3163 029c 2BE2      		ldi r18,lo8(43)
 3164 029e 30E0      		ldi r19,0
 3165 02a0 40E0      		ldi r20,0
 3166 02a2 61EE      		ldi r22,lo8(-31)
 3167 02a4 70E0      		ldi r23,0
 3168 02a6 C601      		movw r24,r12
 3169 02a8 0E94 0000 		call map_shift
 3170               	.LVL372:
 3171 02ac 8111      		cpse r24,__zero_reg__
 3172 02ae 00C0      		rjmp .L289
 326:keyboards/splitography/keymaps/thumbh/keymap.c **** #ifdef CENTER_TT
 3173               		.loc 4 326 0
 3174 02b0 61E0      		ldi r22,lo8(1)
 3175 02b2 C601      		movw r24,r12
 3176 02b4 0E94 0000 		call raise_number
 3177               	.LVL373:
 3178 02b8 C82F      		mov r28,r24
 3179               	.LVL374:
 3180 02ba 8111      		cpse r24,__zero_reg__
 3181 02bc 00C0      		rjmp .L289
 328:keyboards/splitography/keymaps/thumbh/keymap.c ****       tt_clear();                           // exit TT layer
 3182               		.loc 4 328 0
 3183 02be 8091 0000 		lds r24,tt_keycode
 3184 02c2 9091 0000 		lds r25,tt_keycode+1
 3185 02c6 892B      		or r24,r25
 3186 02c8 01F0      		breq .L241
 329:keyboards/splitography/keymaps/thumbh/keymap.c ****       return false;
 3187               		.loc 4 329 0
 3188 02ca 0E94 0000 		call tt_clear
 3189               	.LVL375:
 330:keyboards/splitography/keymaps/thumbh/keymap.c ****     }
 3190               		.loc 4 330 0
 3191 02ce 00C0      		rjmp .L196
 3192               	.L241:
 333:keyboards/splitography/keymaps/thumbh/keymap.c ****     thumb_roll(record, LEFT, 0, 0, _LSYMBOL, _RSYMBOL);
 3193               		.loc 4 333 0
 3194 02d0 64E0      		ldi r22,lo8(4)
 3195 02d2 C601      		movw r24,r12
 3196 02d4 0E94 0000 		call tap_layer
 3197               	.LVL376:
 334:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3198               		.loc 4 334 0
 3199 02d8 35E0      		ldi r19,lo8(5)
 3200 02da E32E      		mov r14,r19
 3201 02dc 04E0      		ldi r16,lo8(4)
 3202 02de 30E0      		ldi r19,0
 3203 02e0 20E0      		ldi r18,0
 3204 02e2 40E0      		ldi r20,0
 3205               	.L299:
 337:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3206               		.loc 4 337 0
 3207 02e4 61E0      		ldi r22,lo8(1)
 3208               	.L295:
 345:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3209               		.loc 4 345 0
 3210 02e6 C601      		movw r24,r12
 3211 02e8 0E94 0000 		call thumb_roll
 3212               	.LVL377:
 3213 02ec 00C0      		rjmp .L243
 3214               	.LVL378:
 3215               	.L223:
 340:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3216               		.loc 4 340 0
 3217 02ee 94E0      		ldi r25,lo8(4)
 3218 02f0 E92E      		mov r14,r25
 3219 02f2 09E0      		ldi r16,lo8(9)
 3220 02f4 2CE4      		ldi r18,lo8(76)
 3221 02f6 30E0      		ldi r19,0
 3222               	.L293:
 345:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3223               		.loc 4 345 0
 3224 02f8 40E0      		ldi r20,0
 3225 02fa 62E0      		ldi r22,lo8(2)
 3226 02fc 00C0      		rjmp .L295
 3227               	.L200:
 343:keyboards/splitography/keymaps/thumbh/keymap.c ****     tap_layer(record, _RSYMBOL);
 3228               		.loc 4 343 0
 3229 02fe 2CE4      		ldi r18,lo8(76)
 3230 0300 30E0      		ldi r19,0
 3231 0302 40E0      		ldi r20,0
 3232 0304 65EE      		ldi r22,lo8(-27)
 3233 0306 70E0      		ldi r23,0
 3234 0308 C601      		movw r24,r12
 3235 030a 0E94 0000 		call map_shift
 3236               	.LVL379:
 3237 030e 8111      		cpse r24,__zero_reg__
 3238 0310 00C0      		rjmp .L289
 344:keyboards/splitography/keymaps/thumbh/keymap.c ****     thumb_roll(record, RIGHT, 0, 0, _RSYMBOL, _LSYMBOL);
 3239               		.loc 4 344 0
 3240 0312 65E0      		ldi r22,lo8(5)
 3241 0314 C601      		movw r24,r12
 3242 0316 0E94 0000 		call tap_layer
 3243               	.LVL380:
 345:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3244               		.loc 4 345 0
 3245 031a 84E0      		ldi r24,lo8(4)
 3246 031c E82E      		mov r14,r24
 3247 031e 05E0      		ldi r16,lo8(5)
 3248 0320 30E0      		ldi r19,0
 3249 0322 20E0      		ldi r18,0
 3250 0324 00C0      		rjmp .L293
 3251               	.L202:
 355:keyboards/splitography/keymaps/thumbh/keymap.c ****     tt_escape(record, keycode);
 3252               		.loc 4 355 0
 3253 0326 8091 0000 		lds r24,tt_keycode
 3254 032a 9091 0000 		lds r25,tt_keycode+1
 3255 032e 8C17      		cp r24,r28
 3256 0330 9D07      		cpc r25,r29
 3257 0332 01F0      		breq .L242
 355:keyboards/splitography/keymaps/thumbh/keymap.c ****     tt_escape(record, keycode);
 3258               		.loc 4 355 0 is_stmt 0 discriminator 1
 3259 0334 892B      		or r24,r25
 3260 0336 01F0      		breq .L242
 355:keyboards/splitography/keymaps/thumbh/keymap.c ****     tt_escape(record, keycode);
 3261               		.loc 4 355 0 discriminator 2
 3262 0338 0E94 0000 		call tt_clear
 3263               	.LVL381:
 3264               	.L242:
 356:keyboards/splitography/keymaps/thumbh/keymap.c ****     break;
 3265               		.loc 4 356 0 is_stmt 1
 3266 033c BE01      		movw r22,r28
 3267 033e C601      		movw r24,r12
 3268 0340 0E94 0000 		call tt_escape
 3269               	.LVL382:
 3270 0344 00C0      		rjmp .L243
 3271               	.L220:
 374:keyboards/splitography/keymaps/thumbh/keymap.c ****     return false;
 3272               		.loc 4 374 0
 3273 0346 CB01      		movw r24,r22
 3274 0348 0E94 0000 		call steno
 3275               	.LVL383:
 3276 034c 00C0      		rjmp .L289
 3277               		.cfi_endproc
 3278               	.LFE154:
 3280               		.section	.text.matrix_init_user,"ax",@progbits
 3281               	.global	matrix_init_user
 3283               	matrix_init_user:
 3284               	.LFB155:
 3285               		.file 5 "/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c"
   1:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c **** 
   2:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c **** // ....................................................................... Audio
   3:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c **** 
   4:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c **** void matrix_init_user(void)
   5:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c **** {
 3286               		.loc 5 5 0
 3287               		.cfi_startproc
 3288               	/* prologue: function */
 3289               	/* frame size = 0 */
 3290               	/* stack size = 0 */
 3291               	.L__stack_usage = 0
   6:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c **** #ifdef STENO_ENABLE
   7:/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/init.c ****   steno_set_mode(STENO_MODE_BOLT);          // or STENO_MODE_GEMINI
 3292               		.loc 5 7 0
 3293 0000 80E0      		ldi r24,0
 3294 0002 0C94 0000 		jmp steno_set_mode
 3295               	.LVL384:
 3296               		.cfi_endproc
 3297               	.LFE155:
 3299               		.section	.progmem.data.__c.5770,"a",@progbits
 3302               	__c.5770:
 3303 0000 3A25 732F 		.string	":%s/arch=(.*)/arch=('any')\n"
 3303      6172 6368 
 3303      3D28 2E2A 
 3303      292F 6172 
 3303      6368 3D28 
 3304               		.section	.progmem.data.__c.5764,"a",@progbits
 3307               	__c.5764:
 3308 0000 7468 6520 		.string	"the keys of enoch"
 3308      6B65 7973 
 3308      206F 6620 
 3308      656E 6F63 
 3308      6800 
 3309               		.section	.bss.down_rule,"aw",@nobits
 3312               	down_rule:
 3313 0000 00        		.zero	1
 3314               		.section	.bss.base_n,"aw",@nobits
 3317               	base_n:
 3318 0000 00        		.zero	1
 3319               		.section	.bss.plover,"aw",@nobits
 3322               	plover:
 3323 0000 00        		.zero	1
 3324               		.section	.bss.double_key,"aw",@nobits
 3327               	double_key:
 3328 0000 00        		.zero	1
 3329               		.section	.bss.tt_keycode,"aw",@nobits
 3332               	tt_keycode:
 3333 0000 0000      		.zero	2
 3334               		.section	.bss.overlayer,"aw",@nobits
 3337               	overlayer:
 3338 0000 00        		.zero	1
 3339               		.section	.bss.thumb,"aw",@nobits
 3342               	thumb:
 3343 0000 00        		.zero	1
 3344               	.global	tap_dance_actions
 3345               		.section	.data.tap_dance_actions,"aw",@progbits
 3348               	tap_dance_actions:
 3349 0000 0000      		.word	0
 3350 0002 0000      		.word	gs(asterisk)
 3351 0004 0000      		.word	0
 3352 0006 0000 0000 		.zero	11
 3352      0000 0000 
 3352      0000 00
 3353 0011 0000      		.word	0
 3354 0013 0000      		.word	0
 3355 0015 0000      		.word	gs(colon)
 3356 0017 0000      		.word	gs(colon_reset)
 3357 0019 0000 0000 		.zero	11
 3357      0000 0000 
 3357      0000 00
 3358 0024 0000      		.word	0
 3359 0026 0000      		.word	0
 3360 0028 0000      		.word	gs(comma)
 3361 002a 0000      		.word	0
 3362 002c 0000 0000 		.zero	11
 3362      0000 0000 
 3362      0000 00
 3363 0037 0000      		.word	0
 3364 0039 0000      		.word	0
 3365 003b 0000      		.word	gs(dot)
 3366 003d 0000      		.word	0
 3367 003f 0000 0000 		.zero	11
 3367      0000 0000 
 3367      0000 00
 3368 004a 0000      		.word	0
 3369 004c 0000      		.word	0
 3370 004e 0000      		.word	gs(enter)
 3371 0050 0000      		.word	gs(enter_reset)
 3372 0052 0000 0000 		.zero	11
 3372      0000 0000 
 3372      0000 00
 3373 005d 0000      		.word	0
 3374 005f 0000      		.word	0
 3375 0061 0000      		.word	gs(equal)
 3376 0063 0000      		.word	gs(equal_reset)
 3377 0065 0000 0000 		.zero	11
 3377      0000 0000 
 3377      0000 00
 3378 0070 0000      		.word	0
 3379 0072 0000      		.word	0
 3380 0074 0000      		.word	gs(greater)
 3381 0076 0000      		.word	gs(greater_reset)
 3382 0078 0000 0000 		.zero	11
 3382      0000 0000 
 3382      0000 00
 3383 0083 0000      		.word	0
 3384 0085 0000      		.word	0
 3385 0087 0000      		.word	gs(lesser)
 3386 0089 0000      		.word	gs(lesser_reset)
 3387 008b 0000 0000 		.zero	11
 3387      0000 0000 
 3387      0000 00
 3388 0096 0000      		.word	0
 3389 0098 0000      		.word	0
 3390 009a 0000      		.word	gs(private)
 3391 009c 0000      		.word	0
 3392 009e 0000 0000 		.zero	11
 3392      0000 0000 
 3392      0000 00
 3393 00a9 0000      		.word	0
 3394 00ab 0000      		.word	0
 3395 00ad 0000      		.word	gs(send)
 3396 00af 0000      		.word	0
 3397 00b1 0000 0000 		.zero	11
 3397      0000 0000 
 3397      0000 00
 3398 00bc 0000      		.word	0
 3399 00be 0000      		.word	0
 3400 00c0 0000      		.word	gs(space)
 3401 00c2 0000      		.word	gs(space_reset)
 3402 00c4 0000 0000 		.zero	11
 3402      0000 0000 
 3402      0000 00
 3403 00cf 0000      		.word	0
 3404 00d1 0000      		.word	0
 3405 00d3 0000      		.word	gs(tilde)
 3406 00d5 0000      		.word	gs(tilde_reset)
 3407 00d7 0000 0000 		.zero	11
 3407      0000 0000 
 3407      0000 00
 3408 00e2 0000      		.word	0
 3409               		.section	.bss.tap_rule,"aw",@nobits
 3412               	tap_rule:
 3413 0000 00        		.zero	1
 3414               		.section	.bss.dt_shift,"aw",@nobits
 3417               	dt_shift:
 3418 0000 00        		.zero	1
 3419               		.section	.bss.key_timer,"aw",@nobits
 3422               	key_timer:
 3423 0000 0000      		.zero	2
 3424               		.section	.bss.mods,"aw",@nobits
 3427               	mods:
 3428 0000 00        		.zero	1
 3429               	.global	keymaps
 3430               		.section	.progmem.data.keymaps,"a",@progbits
 3433               	keymaps:
 3434 0000 3300      		.word	51
 3435 0002 1C00      		.word	28
 3436 0004 1200      		.word	18
 3437 0006 1800      		.word	24
 3438 0008 1D00      		.word	29
 3439 000a 0D58      		.word	22541
 3440 000c 3900      		.word	57
 3441 000e 0A00      		.word	10
 3442 0010 0700      		.word	7
 3443 0012 1100      		.word	17
 3444 0014 1000      		.word	16
 3445 0016 1B00      		.word	27
 3446 0018 1468      		.word	26644
 3447 001a 0C61      		.word	24844
 3448 001c 0864      		.word	25608
 3449 001e 0462      		.word	25092
 3450 0020 3700      		.word	55
 3451 0022 0E58      		.word	22542
 3452 0024 0F58      		.word	22543
 3453 0026 0600      		.word	6
 3454 0028 1762      		.word	25111
 3455 002a 1564      		.word	25621
 3456 002c 1661      		.word	24854
 3457 002e 1A68      		.word	26650
 3458 0030 0D00      		.word	13
 3459 0032 2D00      		.word	45
 3460 0034 3400      		.word	52
 3461 0036 0E00      		.word	14
 3462 0038 3600      		.word	54
 3463 003a 0B58      		.word	22539
 3464 003c 0C58      		.word	22540
 3465 003e 0500      		.word	5
 3466 0040 1300      		.word	19
 3467 0042 0F00      		.word	15
 3468 0044 0900      		.word	9
 3469 0046 1900      		.word	25
 3470 0048 0000      		.word	0
 3471 004a 0000      		.word	0
 3472 004c 0000      		.word	0
 3473 004e 0000      		.word	0
 3474 0050 2944      		.word	17449
 3475 0052 0B42      		.word	16907
 3476 0054 0A57      		.word	22282
 3477 0056 2A45      		.word	17706
 3478 0058 0000      		.word	0
 3479 005a 0000      		.word	0
 3480 005c 0000      		.word	0
 3481 005e 0000      		.word	0
 3482 0060 3302      		.word	563
 3483 0062 1C02      		.word	540
 3484 0064 1202      		.word	530
 3485 0066 1802      		.word	536
 3486 0068 1D02      		.word	541
 3487 006a 0D58      		.word	22541
 3488 006c 3900      		.word	57
 3489 006e 0A02      		.word	522
 3490 0070 0702      		.word	519
 3491 0072 1102      		.word	529
 3492 0074 1002      		.word	528
 3493 0076 1B02      		.word	539
 3494 0078 1402      		.word	532
 3495 007a 0C02      		.word	524
 3496 007c 0802      		.word	520
 3497 007e 0402      		.word	516
 3498 0080 3802      		.word	568
 3499 0082 0E58      		.word	22542
 3500 0084 0F58      		.word	22543
 3501 0086 0602      		.word	518
 3502 0088 1702      		.word	535
 3503 008a 1502      		.word	533
 3504 008c 1602      		.word	534
 3505 008e 1A02      		.word	538
 3506 0090 0D02      		.word	525
 3507 0092 2D02      		.word	557
 3508 0094 3402      		.word	564
 3509 0096 0E02      		.word	526
 3510 0098 1E02      		.word	542
 3511 009a 0B58      		.word	22539
 3512 009c 0C58      		.word	22540
 3513 009e 0502      		.word	517
 3514 00a0 1302      		.word	531
 3515 00a2 0F02      		.word	527
 3516 00a4 0902      		.word	521
 3517 00a6 1902      		.word	537
 3518 00a8 0000      		.word	0
 3519 00aa 0000      		.word	0
 3520 00ac 0000      		.word	0
 3521 00ae 0000      		.word	0
 3522 00b0 2900      		.word	41
 3523 00b2 0B02      		.word	523
 3524 00b4 2C00      		.word	44
 3525 00b6 2A00      		.word	42
 3526 00b8 0000      		.word	0
 3527 00ba 0000      		.word	0
 3528 00bc 0000      		.word	0
 3529 00be 0000      		.word	0
 3530 00c0 3300      		.word	51
 3531 00c2 1C00      		.word	28
 3532 00c4 1200      		.word	18
 3533 00c6 1800      		.word	24
 3534 00c8 1D00      		.word	29
 3535 00ca 0D58      		.word	22541
 3536 00cc 3900      		.word	57
 3537 00ce 0A02      		.word	522
 3538 00d0 0702      		.word	519
 3539 00d2 1102      		.word	529
 3540 00d4 1002      		.word	528
 3541 00d6 1B02      		.word	539
 3542 00d8 1400      		.word	20
 3543 00da 0C00      		.word	12
 3544 00dc 0800      		.word	8
 3545 00de 0400      		.word	4
 3546 00e0 0B57      		.word	22283
 3547 00e2 0E58      		.word	22542
 3548 00e4 0F58      		.word	22543
 3549 00e6 0602      		.word	518
 3550 00e8 1702      		.word	535
 3551 00ea 1502      		.word	533
 3552 00ec 1602      		.word	534
 3553 00ee 1A02      		.word	538
 3554 00f0 0D00      		.word	13
 3555 00f2 2D00      		.word	45
 3556 00f4 3400      		.word	52
 3557 00f6 0E00      		.word	14
 3558 00f8 3500      		.word	53
 3559 00fa 0B58      		.word	22539
 3560 00fc 0C58      		.word	22540
 3561 00fe 0502      		.word	517
 3562 0100 1302      		.word	531
 3563 0102 0F02      		.word	527
 3564 0104 0902      		.word	521
 3565 0106 1902      		.word	537
 3566 0108 0000      		.word	0
 3567 010a 0000      		.word	0
 3568 010c 0000      		.word	0
 3569 010e 0000      		.word	0
 3570 0110 2B00      		.word	43
 3571 0112 0100      		.word	1
 3572 0114 0457      		.word	22276
 3573 0116 4C4A      		.word	19020
 3574 0118 0000      		.word	0
 3575 011a 0000      		.word	0
 3576 011c 0000      		.word	0
 3577 011e 0000      		.word	0
 3578 0120 3302      		.word	563
 3579 0122 1C02      		.word	540
 3580 0124 1202      		.word	530
 3581 0126 1802      		.word	536
 3582 0128 1D02      		.word	541
 3583 012a 0D58      		.word	22541
 3584 012c 3900      		.word	57
 3585 012e 0A00      		.word	10
 3586 0130 0700      		.word	7
 3587 0132 1100      		.word	17
 3588 0134 1000      		.word	16
 3589 0136 1B00      		.word	27
 3590 0138 1402      		.word	532
 3591 013a 0C02      		.word	524
 3592 013c 0802      		.word	520
 3593 013e 0402      		.word	516
 3594 0140 3802      		.word	568
 3595 0142 0E58      		.word	22542
 3596 0144 0F58      		.word	22543
 3597 0146 0600      		.word	6
 3598 0148 1700      		.word	23
 3599 014a 1500      		.word	21
 3600 014c 1600      		.word	22
 3601 014e 1A00      		.word	26
 3602 0150 0D02      		.word	525
 3603 0152 2D02      		.word	557
 3604 0154 3402      		.word	564
 3605 0156 0E02      		.word	526
 3606 0158 3800      		.word	56
 3607 015a 0B58      		.word	22539
 3608 015c 0C58      		.word	22540
 3609 015e 0500      		.word	5
 3610 0160 1300      		.word	19
 3611 0162 0F00      		.word	15
 3612 0164 0900      		.word	9
 3613 0166 1900      		.word	25
 3614 0168 0000      		.word	0
 3615 016a 0000      		.word	0
 3616 016c 0000      		.word	0
 3617 016e 0000      		.word	0
 3618 0170 2B00      		.word	43
 3619 0172 0B02      		.word	523
 3620 0174 0100      		.word	1
 3621 0176 4C00      		.word	76
 3622 0178 0000      		.word	0
 3623 017a 0000      		.word	0
 3624 017c 0000      		.word	0
 3625 017e 0000      		.word	0
 3626 0180 0000      		.word	0
 3627 0182 0000      		.word	0
 3628 0184 0000      		.word	0
 3629 0186 0000      		.word	0
 3630 0188 0000      		.word	0
 3631 018a 0100      		.word	1
 3632 018c 0100      		.word	1
 3633 018e 0057      		.word	22272
 3634 0190 2F00      		.word	47
 3635 0192 2302      		.word	547
 3636 0194 3000      		.word	48
 3637 0196 0000      		.word	0
 3638 0198 0000      		.word	0
 3639 019a 0000      		.word	0
 3640 019c 0000      		.word	0
 3641 019e 0000      		.word	0
 3642 01a0 0000      		.word	0
 3643 01a2 0100      		.word	1
 3644 01a4 0100      		.word	1
 3645 01a6 3102      		.word	561
 3646 01a8 2602      		.word	550
 3647 01aa 2102      		.word	545
 3648 01ac 2702      		.word	551
 3649 01ae 0000      		.word	0
 3650 01b0 0000      		.word	0
 3651 01b2 0000      		.word	0
 3652 01b4 0000      		.word	0
 3653 01b6 0000      		.word	0
 3654 01b8 0000      		.word	0
 3655 01ba 0100      		.word	1
 3656 01bc 0100      		.word	1
 3657 01be 3800      		.word	56
 3658 01c0 2F02      		.word	559
 3659 01c2 2002      		.word	544
 3660 01c4 3002      		.word	560
 3661 01c6 0000      		.word	0
 3662 01c8 0000      		.word	0
 3663 01ca 0000      		.word	0
 3664 01cc 0000      		.word	0
 3665 01ce 0000      		.word	0
 3666 01d0 0100      		.word	1
 3667 01d2 0100      		.word	1
 3668 01d4 3100      		.word	49
 3669 01d6 E15C      		.word	23777
 3670 01d8 0000      		.word	0
 3671 01da 0000      		.word	0
 3672 01dc 0000      		.word	0
 3673 01de 0000      		.word	0
 3674 01e0 0157      		.word	22273
 3675 01e2 3700      		.word	55
 3676 01e4 2502      		.word	549
 3677 01e6 2402      		.word	548
 3678 01e8 0000      		.word	0
 3679 01ea 0100      		.word	1
 3680 01ec 0100      		.word	1
 3681 01ee 0000      		.word	0
 3682 01f0 4A00      		.word	74
 3683 01f2 5200      		.word	82
 3684 01f4 4D00      		.word	77
 3685 01f6 4B00      		.word	75
 3686 01f8 E05C      		.word	23776
 3687 01fa 0757      		.word	22279
 3688 01fc DF5C      		.word	23775
 3689 01fe 0657      		.word	22278
 3690 0200 3802      		.word	568
 3691 0202 0100      		.word	1
 3692 0204 0100      		.word	1
 3693 0206 0000      		.word	0
 3694 0208 5000      		.word	80
 3695 020a 5100      		.word	81
 3696 020c 4F00      		.word	79
 3697 020e 4E00      		.word	78
 3698 0210 0000      		.word	0
 3699 0212 2E02      		.word	558
 3700 0214 1F02      		.word	543
 3701 0216 1E02      		.word	542
 3702 0218 3800      		.word	56
 3703 021a 0100      		.word	1
 3704 021c 0100      		.word	1
 3705 021e 0000      		.word	0
 3706 0220 0000      		.word	0
 3707 0222 0000      		.word	0
 3708 0224 0000      		.word	0
 3709 0226 0000      		.word	0
 3710 0228 0000      		.word	0
 3711 022a 0000      		.word	0
 3712 022c 0000      		.word	0
 3713 022e 0000      		.word	0
 3714 0230 E25C      		.word	23778
 3715 0232 0557      		.word	22277
 3716 0234 0100      		.word	1
 3717 0236 0100      		.word	1
 3718 0238 0000      		.word	0
 3719 023a 0000      		.word	0
 3720 023c 0000      		.word	0
 3721 023e 0000      		.word	0
 3722 0240 015A      		.word	23041
 3723 0242 025A      		.word	23042
 3724 0244 035A      		.word	23043
 3725 0246 045A      		.word	23044
 3726 0248 055A      		.word	23045
 3727 024a 065A      		.word	23046
 3728 024c 235A      		.word	23075
 3729 024e 245A      		.word	23076
 3730 0250 255A      		.word	23077
 3731 0252 265A      		.word	23078
 3732 0254 275A      		.word	23079
 3733 0256 285A      		.word	23080
 3734 0258 DB5C      		.word	23771
 3735 025a 075A      		.word	23047
 3736 025c 095A      		.word	23049
 3737 025e 0B5A      		.word	23051
 3738 0260 0D5A      		.word	23053
 3739 0262 115A      		.word	23057
 3740 0264 165A      		.word	23062
 3741 0266 1A5A      		.word	23066
 3742 0268 1C5A      		.word	23068
 3743 026a 1E5A      		.word	23070
 3744 026c 205A      		.word	23072
 3745 026e 225A      		.word	23074
 3746 0270 DC5C      		.word	23772
 3747 0272 085A      		.word	23048
 3748 0274 0A5A      		.word	23050
 3749 0276 0C5A      		.word	23052
 3750 0278 0E5A      		.word	23054
 3751 027a 125A      		.word	23058
 3752 027c 175A      		.word	23063
 3753 027e 1B5A      		.word	23067
 3754 0280 1D5A      		.word	23069
 3755 0282 1F5A      		.word	23071
 3756 0284 215A      		.word	23073
 3757 0286 295A      		.word	23081
 3758 0288 0000      		.word	0
 3759 028a 0000      		.word	0
 3760 028c 0000      		.word	0
 3761 028e 0000      		.word	0
 3762 0290 0F5A      		.word	23055
 3763 0292 105A      		.word	23056
 3764 0294 185A      		.word	23064
 3765 0296 195A      		.word	23065
 3766 0298 0000      		.word	0
 3767 029a 0000      		.word	0
 3768 029c 0000      		.word	0
 3769 029e 0000      		.word	0
 3770 02a0 0000      		.word	0
 3771 02a2 0900      		.word	9
 3772 02a4 0865      		.word	25864
 3773 02a6 0700      		.word	7
 3774 02a8 0000      		.word	0
 3775 02aa 0100      		.word	1
 3776 02ac 0100      		.word	1
 3777 02ae 3800      		.word	56
 3778 02b0 2400      		.word	36
 3779 02b2 2500      		.word	37
 3780 02b4 2600      		.word	38
 3781 02b6 2502      		.word	549
 3782 02b8 0855      		.word	21768
 3783 02ba 0661      		.word	24838
 3784 02bc 0564      		.word	25605
 3785 02be 0462      		.word	25092
 3786 02c0 0000      		.word	0
 3787 02c2 0100      		.word	1
 3788 02c4 0100      		.word	1
 3789 02c6 0357      		.word	22275
 3790 02c8 2100      		.word	33
 3791 02ca 2200      		.word	34
 3792 02cc 2300      		.word	35
 3793 02ce 2D00      		.word	45
 3794 02d0 0000      		.word	0
 3795 02d2 1B00      		.word	27
 3796 02d4 DE5C      		.word	23774
 3797 02d6 3100      		.word	49
 3798 02d8 0000      		.word	0
 3799 02da 0100      		.word	1
 3800 02dc 0100      		.word	1
 3801 02de 0257      		.word	22274
 3802 02e0 1E00      		.word	30
 3803 02e2 1F00      		.word	31
 3804 02e4 2000      		.word	32
 3805 02e6 2E02      		.word	558
 3806 02e8 0000      		.word	0
 3807 02ea 0000      		.word	0
 3808 02ec 0000      		.word	0
 3809 02ee 0000      		.word	0
 3810 02f0 0100      		.word	1
 3811 02f2 0100      		.word	1
 3812 02f4 2700      		.word	39
 3813 02f6 2E00      		.word	46
 3814 02f8 0000      		.word	0
 3815 02fa 0000      		.word	0
 3816 02fc 0000      		.word	0
 3817 02fe 0000      		.word	0
 3818 0300 0000      		.word	0
 3819 0302 0000      		.word	0
 3820 0304 0000      		.word	0
 3821 0306 0000      		.word	0
 3822 0308 0000      		.word	0
 3823 030a 0100      		.word	1
 3824 030c 0100      		.word	1
 3825 030e 0000      		.word	0
 3826 0310 4000      		.word	64
 3827 0312 4100      		.word	65
 3828 0314 4200      		.word	66
 3829 0316 4500      		.word	69
 3830 0318 0855      		.word	21768
 3831 031a 0155      		.word	21761
 3832 031c 0455      		.word	21764
 3833 031e 0255      		.word	21762
 3834 0320 0000      		.word	0
 3835 0322 0100      		.word	1
 3836 0324 0100      		.word	1
 3837 0326 0000      		.word	0
 3838 0328 3D00      		.word	61
 3839 032a 3E00      		.word	62
 3840 032c 3F00      		.word	63
 3841 032e 4400      		.word	68
 3842 0330 0000      		.word	0
 3843 0332 0000      		.word	0
 3844 0334 0000      		.word	0
 3845 0336 0000      		.word	0
 3846 0338 0000      		.word	0
 3847 033a 0100      		.word	1
 3848 033c 0100      		.word	1
 3849 033e 0000      		.word	0
 3850 0340 3A00      		.word	58
 3851 0342 3B00      		.word	59
 3852 0344 3C00      		.word	60
 3853 0346 4300      		.word	67
 3854 0348 0000      		.word	0
 3855 034a 0000      		.word	0
 3856 034c 0000      		.word	0
 3857 034e 0000      		.word	0
 3858 0350 0100      		.word	1
 3859 0352 0100      		.word	1
 3860 0354 0100      		.word	1
 3861 0356 0100      		.word	1
 3862 0358 0000      		.word	0
 3863 035a 0000      		.word	0
 3864 035c 0000      		.word	0
 3865 035e 0000      		.word	0
 3866 0360 0000      		.word	0
 3867 0362 0000      		.word	0
 3868 0364 0000      		.word	0
 3869 0366 0000      		.word	0
 3870 0368 0000      		.word	0
 3871 036a 0100      		.word	1
 3872 036c 0100      		.word	1
 3873 036e 0000      		.word	0
 3874 0370 FB00      		.word	251
 3875 0372 F000      		.word	240
 3876 0374 FC00      		.word	252
 3877 0376 F900      		.word	249
 3878 0378 0000      		.word	0
 3879 037a F600      		.word	246
 3880 037c F500      		.word	245
 3881 037e F400      		.word	244
 3882 0380 0000      		.word	0
 3883 0382 0100      		.word	1
 3884 0384 0100      		.word	1
 3885 0386 0000      		.word	0
 3886 0388 F200      		.word	242
 3887 038a F100      		.word	241
 3888 038c F300      		.word	243
 3889 038e FA00      		.word	250
 3890 0390 0000      		.word	0
 3891 0392 0000      		.word	0
 3892 0394 0000      		.word	0
 3893 0396 0000      		.word	0
 3894 0398 0000      		.word	0
 3895 039a 0100      		.word	1
 3896 039c 0100      		.word	1
 3897 039e 0000      		.word	0
 3898 03a0 0000      		.word	0
 3899 03a2 0000      		.word	0
 3900 03a4 0000      		.word	0
 3901 03a6 0000      		.word	0
 3902 03a8 0000      		.word	0
 3903 03aa 0000      		.word	0
 3904 03ac 0000      		.word	0
 3905 03ae 0000      		.word	0
 3906 03b0 0100      		.word	1
 3907 03b2 0100      		.word	1
 3908 03b4 0100      		.word	1
 3909 03b6 0100      		.word	1
 3910 03b8 0000      		.word	0
 3911 03ba 0000      		.word	0
 3912 03bc 0000      		.word	0
 3913 03be 0000      		.word	0
 3914 03c0 0000      		.word	0
 3915 03c2 0000      		.word	0
 3916 03c4 0605      		.word	1286
 3917 03c6 1905      		.word	1305
 3918 03c8 0000      		.word	0
 3919 03ca 0000      		.word	0
 3920 03cc 0000      		.word	0
 3921 03ce 0000      		.word	0
 3922 03d0 0000      		.word	0
 3923 03d2 0000      		.word	0
 3924 03d4 0000      		.word	0
 3925 03d6 DD5C      		.word	23773
 3926 03d8 1D01      		.word	285
 3927 03da 1B01      		.word	283
 3928 03dc 0601      		.word	262
 3929 03de 1901      		.word	281
 3930 03e0 0000      		.word	0
 3931 03e2 0000      		.word	0
 3932 03e4 0000      		.word	0
 3933 03e6 0000      		.word	0
 3934 03e8 0857      		.word	22280
 3935 03ea 0957      		.word	22281
 3936 03ec 0000      		.word	0
 3937 03ee 0000      		.word	0
 3938 03f0 0000      		.word	0
 3939 03f2 0000      		.word	0
 3940 03f4 1801      		.word	280
 3941 03f6 0701      		.word	263
 3942 03f8 0000      		.word	0
 3943 03fa 0000      		.word	0
 3944 03fc 0000      		.word	0
 3945 03fe 0000      		.word	0
 3946 0400 0000      		.word	0
 3947 0402 0000      		.word	0
 3948 0404 0000      		.word	0
 3949 0406 0000      		.word	0
 3950 0408 0000      		.word	0
 3951 040a 0000      		.word	0
 3952 040c 0000      		.word	0
 3953 040e 0000      		.word	0
 3954 0410 0100      		.word	1
 3955 0412 0000      		.word	0
 3956 0414 0000      		.word	0
 3957 0416 0100      		.word	1
 3958 0418 0000      		.word	0
 3959 041a 0000      		.word	0
 3960 041c 0000      		.word	0
 3961 041e 0000      		.word	0
 3962 0420 0000      		.word	0
 3963 0422 0900      		.word	9
 3964 0424 0865      		.word	25864
 3965 0426 0700      		.word	7
 3966 0428 0000      		.word	0
 3967 042a 0100      		.word	1
 3968 042c 0100      		.word	1
 3969 042e 3800      		.word	56
 3970 0430 2400      		.word	36
 3971 0432 2500      		.word	37
 3972 0434 2600      		.word	38
 3973 0436 2502      		.word	549
 3974 0438 0855      		.word	21768
 3975 043a 0661      		.word	24838
 3976 043c 0564      		.word	25605
 3977 043e 0462      		.word	25092
 3978 0440 0000      		.word	0
 3979 0442 0100      		.word	1
 3980 0444 0100      		.word	1
 3981 0446 0357      		.word	22275
 3982 0448 2100      		.word	33
 3983 044a 2200      		.word	34
 3984 044c 2300      		.word	35
 3985 044e 2D00      		.word	45
 3986 0450 0000      		.word	0
 3987 0452 2002      		.word	544
 3988 0454 DE5C      		.word	23774
 3989 0456 3100      		.word	49
 3990 0458 0000      		.word	0
 3991 045a 0100      		.word	1
 3992 045c 0100      		.word	1
 3993 045e 0257      		.word	22274
 3994 0460 1E00      		.word	30
 3995 0462 1F00      		.word	31
 3996 0464 2000      		.word	32
 3997 0466 2E02      		.word	558
 3998 0468 0000      		.word	0
 3999 046a 0000      		.word	0
 4000 046c 0000      		.word	0
 4001 046e 0000      		.word	0
 4002 0470 E35C      		.word	23779
 4003 0472 2C00      		.word	44
 4004 0474 2700      		.word	39
 4005 0476 2E00      		.word	46
 4006 0478 0000      		.word	0
 4007 047a 0000      		.word	0
 4008 047c 0000      		.word	0
 4009 047e 0000      		.word	0
 4010 0480 0100      		.word	1
 4011 0482 3700      		.word	55
 4012 0484 2502      		.word	549
 4013 0486 2402      		.word	548
 4014 0488 3502      		.word	565
 4015 048a 0100      		.word	1
 4016 048c 0100      		.word	1
 4017 048e 3500      		.word	53
 4018 0490 2F00      		.word	47
 4019 0492 2302      		.word	547
 4020 0494 3000      		.word	48
 4021 0496 0100      		.word	1
 4022 0498 0100      		.word	1
 4023 049a 3602      		.word	566
 4024 049c 2202      		.word	546
 4025 049e 3702      		.word	567
 4026 04a0 3802      		.word	568
 4027 04a2 0100      		.word	1
 4028 04a4 0100      		.word	1
 4029 04a6 3102      		.word	561
 4030 04a8 2602      		.word	550
 4031 04aa 2102      		.word	545
 4032 04ac 2702      		.word	551
 4033 04ae 0100      		.word	1
 4034 04b0 0100      		.word	1
 4035 04b2 3302      		.word	563
 4036 04b4 1F02      		.word	543
 4037 04b6 1E02      		.word	542
 4038 04b8 3800      		.word	56
 4039 04ba 0100      		.word	1
 4040 04bc 0100      		.word	1
 4041 04be 3100      		.word	49
 4042 04c0 2F02      		.word	559
 4043 04c2 2002      		.word	544
 4044 04c4 3002      		.word	560
 4045 04c6 0100      		.word	1
 4046 04c8 0000      		.word	0
 4047 04ca 0000      		.word	0
 4048 04cc 0000      		.word	0
 4049 04ce 0000      		.word	0
 4050 04d0 E35C      		.word	23779
 4051 04d2 2E00      		.word	46
 4052 04d4 2E02      		.word	558
 4053 04d6 2C00      		.word	44
 4054 04d8 0000      		.word	0
 4055 04da 0000      		.word	0
 4056 04dc 0000      		.word	0
 4057 04de 0000      		.word	0
 4058 04e0 0000      		.word	0
 4059 04e2 0000      		.word	0
 4060 04e4 0000      		.word	0
 4061 04e6 0000      		.word	0
 4062 04e8 0000      		.word	0
 4063 04ea 0100      		.word	1
 4064 04ec 0100      		.word	1
 4065 04ee 0000      		.word	0
 4066 04f0 4000      		.word	64
 4067 04f2 4100      		.word	65
 4068 04f4 4200      		.word	66
 4069 04f6 4500      		.word	69
 4070 04f8 0855      		.word	21768
 4071 04fa 0155      		.word	21761
 4072 04fc 0455      		.word	21764
 4073 04fe 0255      		.word	21762
 4074 0500 0000      		.word	0
 4075 0502 0100      		.word	1
 4076 0504 0100      		.word	1
 4077 0506 0000      		.word	0
 4078 0508 3D00      		.word	61
 4079 050a 3E00      		.word	62
 4080 050c 3F00      		.word	63
 4081 050e 4400      		.word	68
 4082 0510 0000      		.word	0
 4083 0512 0000      		.word	0
 4084 0514 0000      		.word	0
 4085 0516 0000      		.word	0
 4086 0518 0000      		.word	0
 4087 051a 0100      		.word	1
 4088 051c 0100      		.word	1
 4089 051e 0000      		.word	0
 4090 0520 3A00      		.word	58
 4091 0522 3B00      		.word	59
 4092 0524 3C00      		.word	60
 4093 0526 4300      		.word	67
 4094 0528 0000      		.word	0
 4095 052a 0000      		.word	0
 4096 052c 0000      		.word	0
 4097 052e 0000      		.word	0
 4098 0530 E35C      		.word	23779
 4099 0532 0000      		.word	0
 4100 0534 2E02      		.word	558
 4101 0536 0000      		.word	0
 4102 0538 0000      		.word	0
 4103 053a 0000      		.word	0
 4104 053c 0000      		.word	0
 4105 053e 0000      		.word	0
 4106 0540 0000      		.word	0
 4107 0542 0000      		.word	0
 4108 0544 0000      		.word	0
 4109 0546 0000      		.word	0
 4110 0548 0000      		.word	0
 4111 054a 0100      		.word	1
 4112 054c 0100      		.word	1
 4113 054e 0000      		.word	0
 4114 0550 4A00      		.word	74
 4115 0552 5200      		.word	82
 4116 0554 4D00      		.word	77
 4117 0556 4B00      		.word	75
 4118 0558 0855      		.word	21768
 4119 055a 0155      		.word	21761
 4120 055c 0455      		.word	21764
 4121 055e 0255      		.word	21762
 4122 0560 0000      		.word	0
 4123 0562 0100      		.word	1
 4124 0564 0100      		.word	1
 4125 0566 0000      		.word	0
 4126 0568 5000      		.word	80
 4127 056a 5100      		.word	81
 4128 056c 4F00      		.word	79
 4129 056e 4E00      		.word	78
 4130 0570 0000      		.word	0
 4131 0572 0000      		.word	0
 4132 0574 0000      		.word	0
 4133 0576 0000      		.word	0
 4134 0578 0000      		.word	0
 4135 057a 0100      		.word	1
 4136 057c 0100      		.word	1
 4137 057e 0000      		.word	0
 4138 0580 0000      		.word	0
 4139 0582 0000      		.word	0
 4140 0584 0000      		.word	0
 4141 0586 0000      		.word	0
 4142 0588 0000      		.word	0
 4143 058a 0000      		.word	0
 4144 058c 0000      		.word	0
 4145 058e 0000      		.word	0
 4146 0590 E35C      		.word	23779
 4147 0592 0000      		.word	0
 4148 0594 0000      		.word	0
 4149 0596 0000      		.word	0
 4150 0598 0000      		.word	0
 4151 059a 0000      		.word	0
 4152 059c 0000      		.word	0
 4153 059e 0000      		.word	0
 4154 05a0 0000      		.word	0
 4155 05a2 0000      		.word	0
 4156 05a4 0000      		.word	0
 4157 05a6 0000      		.word	0
 4158 05a8 0000      		.word	0
 4159 05aa 0100      		.word	1
 4160 05ac 0100      		.word	1
 4161 05ae 0000      		.word	0
 4162 05b0 FB00      		.word	251
 4163 05b2 F000      		.word	240
 4164 05b4 FC00      		.word	252
 4165 05b6 F900      		.word	249
 4166 05b8 0000      		.word	0
 4167 05ba F600      		.word	246
 4168 05bc F500      		.word	245
 4169 05be F400      		.word	244
 4170 05c0 0000      		.word	0
 4171 05c2 0100      		.word	1
 4172 05c4 0100      		.word	1
 4173 05c6 0000      		.word	0
 4174 05c8 F200      		.word	242
 4175 05ca F100      		.word	241
 4176 05cc F300      		.word	243
 4177 05ce FA00      		.word	250
 4178 05d0 0000      		.word	0
 4179 05d2 0000      		.word	0
 4180 05d4 0000      		.word	0
 4181 05d6 0000      		.word	0
 4182 05d8 0000      		.word	0
 4183 05da 0100      		.word	1
 4184 05dc 0100      		.word	1
 4185 05de 0000      		.word	0
 4186 05e0 0000      		.word	0
 4187 05e2 0000      		.word	0
 4188 05e4 0000      		.word	0
 4189 05e6 0000      		.word	0
 4190 05e8 0000      		.word	0
 4191 05ea 0000      		.word	0
 4192 05ec 0000      		.word	0
 4193 05ee 0000      		.word	0
 4194 05f0 E35C      		.word	23779
 4195 05f2 0000      		.word	0
 4196 05f4 0000      		.word	0
 4197 05f6 0000      		.word	0
 4198 05f8 0000      		.word	0
 4199 05fa 0000      		.word	0
 4200 05fc 0000      		.word	0
 4201 05fe 0000      		.word	0
 4202               		.text
 4203               	.Letext0:
 4204               		.file 6 "/usr/avr/include/stdint.h"
 4205               		.file 7 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 4206               		.file 8 "./tmk_core/common/keyboard.h"
 4207               		.file 9 "./tmk_core/common/keycode.h"
 4208               		.file 10 "./tmk_core/common/action_code.h"
 4209               		.file 11 "./tmk_core/common/action.h"
 4210               		.file 12 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 4211               		.file 13 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 4212               		.file 14 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 4213               		.file 15 "./lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 4214               		.file 16 "/usr/avr/include/stdio.h"
 4215               		.file 17 "./tmk_core/common/report.h"
 4216               		.file 18 "./tmk_core/common/host.h"
 4217               		.file 19 "./tmk_core/common/debug.h"
 4218               		.file 20 "./quantum/keycode_config.h"
 4219               		.file 21 "./quantum/quantum_keycodes.h"
 4220               		.file 22 "./quantum/keymap.h"
 4221               		.file 23 "./tmk_core/common/action_layer.h"
 4222               		.file 24 "./tmk_core/common/timer.h"
 4223               		.file 25 "./tmk_core/common/action_util.h"
 4224               		.file 26 "/usr/avr/include/stdlib.h"
 4225               		.file 27 "./quantum/process_keycode/process_steno.h"
 4226               		.file 28 "./quantum/process_keycode/process_tap_dance.h"
 4227               		.file 29 "./quantum/quantum.h"
 4228               		.file 30 "./quantum/keymap_extras/keymap_steno.h"
 4229               		.file 31 "/net/depot/qmk_firmware/keyboards/splitography/keymaps/thumbh/common/tapdance.h"
 4230               		.file 32 "./tmk_core/common/eeconfig.h"
 4231               		.file 33 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keymap.c
     /tmp/ccdewnqq.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccdewnqq.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccdewnqq.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccdewnqq.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccdewnqq.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccdewnqq.s:13     .text.equal_reset:0000000000000000 equal_reset
     /tmp/ccdewnqq.s:38     .text.private:0000000000000000 private
     /tmp/ccdewnqq.s:3307   .progmem.data.__c.5764:0000000000000000 __c.5764
     /tmp/ccdewnqq.s:84     .text.send:0000000000000000 send
     /tmp/ccdewnqq.s:3302   .progmem.data.__c.5770:0000000000000000 __c.5770
     /tmp/ccdewnqq.s:129    .text.tap_mods:0000000000000000 tap_mods
     /tmp/ccdewnqq.s:3427   .bss.mods:0000000000000000 mods
     /tmp/ccdewnqq.s:175    .text.modifier:0000000000000000 modifier
     /tmp/ccdewnqq.s:262    .text.register_shift:0000000000000000 register_shift
     /tmp/ccdewnqq.s:295    .text.unregister_shift:0000000000000000 unregister_shift
     /tmp/ccdewnqq.s:317    .text.colon_reset:0000000000000000 colon_reset
     /tmp/ccdewnqq.s:338    .text.greater_reset:0000000000000000 greater_reset
     /tmp/ccdewnqq.s:359    .text.lesser_reset:0000000000000000 lesser_reset
     /tmp/ccdewnqq.s:384    .text.tilde_reset:0000000000000000 tilde_reset
     /tmp/ccdewnqq.s:405    .text.tap_key:0000000000000000 tap_key
     /tmp/ccdewnqq.s:436    .text.comma:0000000000000000 comma
     /tmp/ccdewnqq.s:486    .text.shift_key:0000000000000000 shift_key
     /tmp/ccdewnqq.s:532    .text.tilde:0000000000000000 tilde
     /tmp/ccdewnqq.s:625    .text.asterisk:0000000000000000 asterisk
     /tmp/ccdewnqq.s:675    .text.dot:0000000000000000 dot
     /tmp/ccdewnqq.s:727    .text.key_press:0000000000000000 key_press
     /tmp/ccdewnqq.s:3422   .bss.key_timer:0000000000000000 key_timer
     /tmp/ccdewnqq.s:800    .text.mt_shift:0000000000000000 mt_shift
     /tmp/ccdewnqq.s:910    .text.map_shift:0000000000000000 map_shift
     /tmp/ccdewnqq.s:1029   .text.double_shift:0000000000000000 double_shift
     /tmp/ccdewnqq.s:3417   .bss.dt_shift:0000000000000000 dt_shift
     /tmp/ccdewnqq.s:1062   .text.tap_lt:0000000000000000 tap_lt
     /tmp/ccdewnqq.s:1309   .text.enter:0000000000000000 enter
     /tmp/ccdewnqq.s:3412   .bss.tap_rule:0000000000000000 tap_rule
     /tmp/ccdewnqq.s:1353   .text.space:0000000000000000 space
     /tmp/ccdewnqq.s:1398   .text.tap_reset:0000000000000000 tap_reset
     /tmp/ccdewnqq.s:1446   .text.enter_reset:0000000000000000 enter_reset
     /tmp/ccdewnqq.s:1469   .text.space_reset:0000000000000000 space_reset
     /tmp/ccdewnqq.s:1492   .text.double_max:0000000000000000 double_max
     /tmp/ccdewnqq.s:1576   .text.colon:0000000000000000 colon
     /tmp/ccdewnqq.s:1674   .text.equal:0000000000000000 equal
     /tmp/ccdewnqq.s:1777   .text.greater:0000000000000000 greater
     /tmp/ccdewnqq.s:1881   .text.lesser:0000000000000000 lesser
     /tmp/ccdewnqq.s:1982   .text.thumb_roll:0000000000000000 thumb_roll
     /tmp/ccdewnqq.s:3342   .bss.thumb:0000000000000000 thumb
     /tmp/ccdewnqq.s:3337   .bss.overlayer:0000000000000000 overlayer
     /tmp/ccdewnqq.s:2137   .text.lt:0000000000000000 lt
     /tmp/ccdewnqq.s:2252   .text.lt_shift:0000000000000000 lt_shift
     /tmp/ccdewnqq.s:2286   .text.tap_layer:0000000000000000 tap_layer
     /tmp/ccdewnqq.s:2316   .text.clear_layers:0000000000000000 clear_layers
     /tmp/ccdewnqq.s:3332   .bss.tt_keycode:0000000000000000 tt_keycode
     /tmp/ccdewnqq.s:2366   .text.raise_number:0000000000000000 raise_number
     /tmp/ccdewnqq.s:3327   .bss.double_key:0000000000000000 double_key
     /tmp/ccdewnqq.s:2433   .text.tt_clear:0000000000000000 tt_clear
     /tmp/ccdewnqq.s:2465   .text.tt_escape:0000000000000000 tt_escape
     /tmp/ccdewnqq.s:2526   .text.toggle_plover:0000000000000000 toggle_plover
     /tmp/ccdewnqq.s:3322   .bss.plover:0000000000000000 plover
     /tmp/ccdewnqq.s:2581   .text.base_layer:0000000000000000 base_layer
     /tmp/ccdewnqq.s:2606   .text.steno:0000000000000000 steno
     /tmp/ccdewnqq.s:2667   .text.steno_exit:0000000000000000 steno_exit
     /tmp/ccdewnqq.s:2699   .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccdewnqq.s:3312   .bss.down_rule:0000000000000000 down_rule
     /tmp/ccdewnqq.s:3317   .bss.base_n:0000000000000000 base_n
     /tmp/ccdewnqq.s:3283   .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/ccdewnqq.s:3348   .data.tap_dance_actions:0000000000000000 tap_dance_actions
     /tmp/ccdewnqq.s:3433   .progmem.data.keymaps:0000000000000000 keymaps

UNDEFINED SYMBOLS
unregister_code
layer_off
send_string_P
reset_tap_dance
register_code
send_string
timer_elapsed
timer_read
layer_state
biton32
layer_on
set_oneshot_layer
clear_oneshot_layer_state
clear_mods
set_single_persistent_default_layer
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
eeconfig_update_keymap
steno_set_mode
__do_copy_data
__do_clear_bss
